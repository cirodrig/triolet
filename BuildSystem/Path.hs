
module BuildSystem.Path where

import Data.List
import System.FilePath

import Distribution.ModuleName
import Distribution.Simple
import Distribution.Simple.BuildPaths
import Distribution.Simple.LocalBuildInfo
import Distribution.Simple.Utils
import Distribution.PackageDescription

-- | Look up the executable triolet compilr 
getTrioletExe :: LocalBuildInfo -> Executable
getTrioletExe lbi =
  case executables $ localPkgDescr lbi
  of [exe] -> exe
     _     -> error "Configuration error: Missing executable build info"

findExeConfig exe lbi =
  case find ((exeName exe ==) . fst) $ executableConfigs lbi
  of Just x  -> snd x
     Nothing -> error "Configuration error: Missing list of package dependences"


newtype SearchPaths = SearchPaths [FilePath]

-- | Find a file in any of the given search paths.  Return the full path if
--   found, or 'Nothing' otherwise.
findInSearchPaths :: SearchPaths -> FilePath -> IO FilePath
findInSearchPaths sp path = do
  mf <- optFindInSearchPaths sp path
  case mf of
    Just f  -> return f
    Nothing -> die $ "Not found: " ++ path

optFindInSearchPaths (SearchPaths sps) path =
  findFirstFile id [sp </> path | sp <- sps]

-------------------------------------------------------------------------------
-- Hard-coded search paths

-- | The directories where source files belonging to the \"triolet\"
--   program are
trioletSearchPaths :: LocalBuildInfo -> SearchPaths
trioletSearchPaths lbi =
  let exe = getTrioletExe lbi
  in SearchPaths $ trioletBuildDir lbi : hsSourceDirs (buildInfo exe)

testDriverSearchPaths :: SearchPaths
testDriverSearchPaths = SearchPaths ["src/testdriver"]

-- | Destination for object files belonging to the \"triolet\" program
trioletBuildDir :: LocalBuildInfo -> FilePath
trioletBuildDir lbi = buildDir lbi </> "triolet"

-- | The path where Cabal puts autogenerated files
cabalAutogenDir :: LocalBuildInfo -> FilePath
cabalAutogenDir lbi = buildDir lbi </> "autogen"

-- | Directories containing source files belonging to the RTS
rtsIncludePaths :: LocalBuildInfo -> [FilePath]
rtsIncludePaths lbi =
  [ rtsBuildDir lbi                -- Compiled files
  , dataBuildDir lbi </> "include" -- Predefined include files
  , "src/rts"                      -- Source files
  ]

rtsSourceDir = "src/rts"

dataSourceDir = "data"

-- | Destination for object files belonging to the RTS
rtsBuildDir :: LocalBuildInfo -> FilePath
rtsBuildDir lbi = buildDir lbi </> "rts"

-- | Destination for data files that will be installed
dataBuildDir :: LocalBuildInfo -> FilePath
dataBuildDir lbi = buildDir lbi </> "data"

-- | Destination for the test driver
testDriverBuildDir :: LocalBuildInfo -> FilePath
testDriverBuildDir lbi = buildDir lbi </> "test"

-------------------------------------------------------------------------------
-- File names

rtsFile :: LocalBuildInfo -> FilePath
rtsFile lbi = dataBuildDir lbi </> "libtrioletrts.so"

trioletFile :: LocalBuildInfo -> FilePath
trioletFile lbi = trioletBuildDir lbi </> "triolet"

testDriverFile :: LocalBuildInfo -> FilePath
testDriverFile lbi = testDriverBuildDir lbi </> "testdriver"

findTrioletMainFile :: LocalBuildInfo -> IO FilePath
findTrioletMainFile lbi =
  let exe = getTrioletExe lbi
  in findInSearchPaths (trioletSearchPaths lbi) (modulePath exe)

-- | Path of the auto-generated \"cabal_macros.h\" module
cabalMacrosFile :: LocalBuildInfo -> FilePath
cabalMacrosFile lbi =
  cabalAutogenDir lbi </> "cabal_macros.h"
  
-- | Path of the auto-generated \"Paths\" module
autogenPathsFile :: LocalBuildInfo -> FilePath
autogenPathsFile lbi =
  let pkg_desc = localPkgDescr lbi
      module_path = toFilePath (autogenModuleName pkg_desc) `addExtension` ".hs"
  in trioletBuildDir lbi </> module_path

-- | Path of the auto-generated \"Machine\" module
autogenMachineFile :: LocalBuildInfo -> FilePath
autogenMachineFile lbi =
  trioletBuildDir lbi </> "Machine.hs"

-- | Path of the auto-generated \"machine.h\" file used by the RTS
autogenMachineHeaderFile :: LocalBuildInfo -> FilePath
autogenMachineHeaderFile lbi =
  rtsBuildDir lbi </> "machine.h"

-- | Path of the auto-generated \"Paths\" module, without search path or
--   extension
autogenPathsPath :: LocalBuildInfo -> FilePath
autogenPathsPath lbi =
  let pkg_desc = localPkgDescr lbi
      module_path = toFilePath (autogenModuleName pkg_desc)
  in module_path

-- | Path of the auto-generated \"Machine\" module, without search path or
--   extension
autogenMachinePath :: LocalBuildInfo -> FilePath
autogenMachinePath lbi = "Machine"

-- | The list of all Haskell modules in the Triolet executable.
--
--   Modules are given as a path, relative to a module search path, without
--   an extension.
trioletModulePaths :: LocalBuildInfo -> [FilePath]
trioletModulePaths lbi =
  let exe = getTrioletExe lbi
      main_path = dropExtension $ modulePath exe
  in main_path : map toFilePath (otherModules (buildInfo exe))

-- | The list of all C files in the Triolet executable.
trioletCFiles :: LocalBuildInfo -> [FilePath]
trioletCFiles lbi = cSources $ buildInfo $ getTrioletExe lbi

-- | Low-level Triolet library source files
rtsLltSourceFiles = ["apply_new.llt", "memory_py.llt", "effects.llt",
                     "prim.llt", "inplace.llt", "structures.llt",
                     "list.llt", "stream.llt"]

-- | Object files that should be created in 'rtsBuildDir'
rtsObjectFiles = ["apply_data.c.o", "memory.c.o", "debug.c.o", "hashtable.c.o",
                  "par_loops.cc.o"] ++
                 [f <.> ".o" | f <- rtsLltSourceFiles]

-- | Data files that are not programmatically generated.
--   These are installed before compiling the RTS.
prebuiltDataFiles = ["include/triolet.h", "include/triolet_list.h",
                     "include/triolet_matrix.h",
                     "include/TrioletData.h",
                     "include/triolet/Base.h",
                     "include/triolet/Layout.h",
                     "symbols/coremodule"]

-- | All data files that will be installed
dataFiles lbi = [rtsFile lbi] ++ data_files ++ interface_files
  where
    build_dir = dataBuildDir lbi
    data_files = [build_dir </> f | f <- prebuiltDataFiles]
    interface_files =
      [build_dir </> "interfaces" </> f `replaceExtension` ".ti"
      | f <- rtsLltSourceFiles]

testDriverMain = "testdriver.hs"

-- The list of non-main modules used by the test driver. 
-- Modules are file paths relative to a search path, without an extension.
testDriverModules :: [FilePath]
testDriverModules = ["CUnitTest", "Statistics", "TestCase"]
