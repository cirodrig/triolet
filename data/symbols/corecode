
-------------------------------------------------------------------------------
-- Repr dictionaries

dynamicCopyError @(a : bare) (x : a) (ret : OutPtr a) -> Store
  attribute(inline) =
  except @Store;

reprSizeAlign @(a : bare) (rep : Repr a) -> SizeAlign a
  attribute(inline) =

  case rep of
    repr @a
    (sa : SizeAlign a)
    (copy_a : a -> Init a)
    (to_boxed_a : Init a -> BoxedType a)
    (to_bare_a : BoxedType a -> Init a)
    (pointerless_a : bool).

  sa;


-- Copy an array.  Use a loop to copy individual array elements.
copyArray @(N : intindex) @(a : bare)
  (rep : Repr a) (size : IInt N) (src : arr N a) (ret : OutPtr (arr N a))
  -> Store
  attribute(inline) =
  case rep of
    repr @a
    (sa : SizeAlign a)
    (copy_a : a -> Init a)
    (to_boxed_a : Init a -> BoxedType a)
    (to_bare_a : BoxedType a -> Init a)
    (pointerless_a : bool).

  case size of {
    iInt @N (fsize : FIInt N).
      -- Copy each item in a loop
      doall @N @a @a fsize
      (\ (i : int) -> Store.
        copy_a
        (subscript @N @a sa src i)
        (subscript_out @N @a sa ret i))
  ; iPosInfty @N. except @Store
  ; iNegInfty @N. except @Store
  };

repr_index2 : Repr (PyonTuple2 (Stored int) (Stored int)) =
  repr_PyonTuple2 @(Stored int) @(Stored int) repr_int repr_int;

repr_slice2 : Repr (PyonTuple2 SliceObject SliceObject) =
  repr_PyonTuple2 @SliceObject @SliceObject repr_SliceObject repr_SliceObject;

repr_index3 : Repr (PyonTuple3 (Stored int) (Stored int) (Stored int)) =
  repr_PyonTuple3 @(Stored int) @(Stored int) @(Stored int)
  repr_int repr_int repr_int;

repr_slice3 : Repr (PyonTuple3 SliceObject SliceObject SliceObject) =
  repr_PyonTuple3 @SliceObject @SliceObject @SliceObject
  repr_SliceObject repr_SliceObject repr_SliceObject;

-------------------------------------------------------------------------------
-- Eq dictionaries

EqDict_Tuple2_eq @(a b : bare)
  (eqA : EqDict a) (eqB : EqDict b) (x : PyonTuple2 a b) (y : PyonTuple2 a b)
  -> bool
  attribute(inline) =
  case eqA of eqDict @a (eq_a : a -> a -> bool) (ne_a : a -> a -> bool).
  case eqB of eqDict @b (eq_b : b -> b -> bool) (ne_b : b -> b -> bool).
  case x of pyonTuple2 @a @b (xa : a) (xb : b).
  case y of pyonTuple2 @a @b (ya : a) (yb : b).
  and (eq_a xa ya) (eq_b xb yb);


EqDict_Tuple2_ne @(a b : bare)
  (eqA : EqDict a) (eqB : EqDict b) (x : PyonTuple2 a b) (y : PyonTuple2 a b)
  -> bool
  attribute(inline) =
  case eqA of eqDict @a (eq_a : a -> a -> bool) (ne_a : a -> a -> bool).
  case eqB of eqDict @b (eq_b : b -> b -> bool) (ne_b : b -> b -> bool).
  case x of pyonTuple2 @a @b (xa : a) (xb : b).
  case y of pyonTuple2 @a @b (ya : a) (yb : b).
  and (ne_a xa ya) (ne_b xb yb);

-------------------------------------------------------------------------------
-- Additive dictionaries

AdditiveDict_PyonTuple2_add @(a b : bare)
  (repr_a : Repr a)
  (repr_b : Repr b)
  (additive_a : AdditiveDict a)
  (additive_b : AdditiveDict b)
  (x : PyonTuple2 a b)
  (y : PyonTuple2 a b)
  (ret : OutPtr (PyonTuple2 a b))
  -> Store =

  case additive_a of
    additiveDict @a
    (add_a : a -> a -> Init a)
    (sub_a : a -> a -> Init a)
    (negate_a : a -> Init a)
    (zero_a : a).
  case additive_b of
    additiveDict @b
    (add_b : b -> b -> Init b)
    (sub_b : b -> b -> Init b)
    (negate_b : b -> Init b)
    (zero_b : b).

  case x of pyonTuple2 @a @b (x_a : a) (x_b : b).
  case y of pyonTuple2 @a @b (y_a : a) (y_b : b).
  pyonTuple2 @a @b (add_a x_a y_a) (add_b x_b y_b) ret;


AdditiveDict_PyonTuple2_sub @(a b : bare)
  (repr_a : Repr a)
  (repr_b : Repr b)
  (additive_a : AdditiveDict a)
  (additive_b : AdditiveDict b)
  (x : PyonTuple2 a b)
  (y : PyonTuple2 a b)
  (ret : OutPtr (PyonTuple2 a b))
  -> Store =

  case additive_a of
    additiveDict @a
    (add_a : a -> a -> Init a)
    (sub_a : a -> a -> Init a)
    (negate_a : a -> Init a)
    (zero_a : a).
  case additive_b of
    additiveDict @b
    (add_b : b -> b -> Init b)
    (sub_b : b -> b -> Init b)
    (negate_b : b -> Init b)
    (zero_b : b).

  case x of pyonTuple2 @a @b (x_a : a) (x_b : b).
  case y of pyonTuple2 @a @b (y_a : a) (y_b : b).
  pyonTuple2 @a @b (sub_a x_a y_a) (sub_b x_b y_b) ret;


AdditiveDict_PyonTuple2_negate @(a b : bare)
  (repr_a : Repr a)
  (repr_b : Repr b)
  (additive_a : AdditiveDict a)
  (additive_b : AdditiveDict b)
  (x : PyonTuple2 a b)
  (ret : OutPtr (PyonTuple2 a b))
  -> Store =

  case additive_a of
    additiveDict @a
    (add_a : a -> a -> Init a)
    (sub_a : a -> a -> Init a)
    (negate_a : a -> Init a)
    (zero_a : a).
  case additive_b of
    additiveDict @b
    (add_b : b -> b -> Init b)
    (sub_b : b -> b -> Init b)
    (negate_b : b -> Init b)
    (zero_b : b).
  case x of pyonTuple2 @a @b (x_a : a) (x_b : b).
  pyonTuple2 @a @b (negate_a x_a) (negate_b x_b) ret;


AdditiveDict_PyonTuple2_zero @(a b : bare)
  (repr_a : Repr a)
  (repr_b : Repr b)
  (additive_a : AdditiveDict a)
  (additive_b : AdditiveDict b)
  (ret : OutPtr (PyonTuple2 a b))
  -> Store =

  case additive_a of
    additiveDict @a
    (add_a : a -> a -> Init a)
    (sub_a : a -> a -> Init a)
    (negate_a : a -> Init a)
    (zero_a : a).
  case additive_b of
    additiveDict @b
    (add_b : b -> b -> Init b)
    (sub_b : b -> b -> Init b)
    (negate_b : b -> Init b)
    (zero_b : b).
  pyonTuple2 @a @b (copy @a repr_a zero_a) (copy @b repr_b zero_b) ret;

-------------------------------------------------------------------------------
-- Multiplicative dictionaries

-- This is the identity transformation
MultiplicativeDict_int_fromInt (x : int) -> int attribute(inline) = x;

-------------------------------------------------------------------------------
-- Integer index arithmetic

plus_ii @(m n : intindex) (a : IInt m) (b : IInt n)
  -> IInt (plus_i m n) attribute(inline) =
  let type sum_t = plus_i m n in
  case a of {
    iInt @m (fa : FIInt m).
      case b of {
        iInt @n (fb : FIInt n). iInt @sum_t (plus_fii @m @n fa fb)
      ; iPosInfty @n. iPosInfty @sum_t
      ; iNegInfty @n. iNegInfty @sum_t
      }
  ; iPosInfty @m.
      case b of {
        iInt @n (fb : FIInt n). iPosInfty @sum_t
      ; iPosInfty @n. iPosInfty @sum_t
      ; iNegInfty @n. except @(IInt sum_t) -- Cannot add +inf and -inf
      }
  ; iNegInfty @m.
      case b of {
        iInt @n (fb : FIInt n). iNegInfty @sum_t
      ; iPosInfty @n. except @(IInt sum_t) -- Cannot add +inf and -inf
      ; iNegInfty @n. iNegInfty @sum_t
      }
  };


minus_ii @(m n : intindex) (a : IInt m) (b : IInt n)
  -> IInt (minus_i m n) attribute(inline) =
  let type sum_t = minus_i m n in
  case a of {
    iInt @m (fa : FIInt m).
      case b of {
        iInt @n (fb : FIInt n). iInt @sum_t (minus_fii @m @n fa fb)
      ; iPosInfty @n. iNegInfty @sum_t
      ; iNegInfty @n. iPosInfty @sum_t
      }
  ; iPosInfty @m.
      case b of {
        iInt @n (fb : FIInt n). iPosInfty @sum_t
      ; iPosInfty @n. except @(IInt sum_t) -- Cannot add +inf and -inf
      ; iNegInfty @n. iPosInfty @sum_t
      }
  ; iNegInfty @m.
      case b of {
        iInt @n (fb : FIInt n). iNegInfty @sum_t
      ; iPosInfty @n. iNegInfty @sum_t
      ; iNegInfty @n. except @(IInt sum_t) -- Cannot add +inf and -inf
      }
  };


min_ii @(m n : intindex) (a : IInt m) (b : IInt n)
  -> IInt (min_i m n) attribute(inline) =
  let type sum_t = min_i m n in
  case a of {
    iInt @m (fa : FIInt m).
      case b of {
        iInt @n (fb : FIInt n). iInt @sum_t (min_fii @m @n fa fb)
      ; iPosInfty @n.
          case fa of fiInt @m (a_i : int). iInt @sum_t (fiInt @sum_t a_i)
      ; iNegInfty @n. iNegInfty @sum_t
      }
  ; iPosInfty @m.
      case b of {
        iInt @n (fb : FIInt n).
	  case fb of fiInt @n (b_i : int). iInt @sum_t (fiInt @sum_t b_i)
      ; iPosInfty @n. iPosInfty @sum_t
      ; iNegInfty @n. iNegInfty @sum_t
      }
  ; iNegInfty @m.
      iNegInfty @sum_t
  };


max_ii @(m n : intindex) (a : IInt m) (b : IInt n)
  -> IInt (max_i m n) attribute(inline) =
  let type sum_t = max_i m n in
  case a of {
    iInt @m (fa : FIInt m).
      case b of {
        iInt @n (fb : FIInt n). iInt @sum_t (max_fii @m @n fa fb)
      ; iNegInfty @n.
          case fa of fiInt @m (a_i : int). iInt @sum_t (fiInt @sum_t a_i)
      ; iPosInfty @n. iPosInfty @sum_t
      }
  ; iNegInfty @m.
      case b of {
        iInt @n (fb : FIInt n).
	  case fb of fiInt @n (b_i : int). iInt @sum_t (fiInt @sum_t b_i)
      ; iPosInfty @n. iPosInfty @sum_t
      ; iNegInfty @n. iNegInfty @sum_t
      }
  ; iPosInfty @m.
      iPosInfty @sum_t
  };

zero_ii : IInt 0 = iInt @0 (fiInt @0 0);

one_ii : IInt 1 = iInt @1 (fiInt @1 1);

-- Operations on finite indexed ints aren't inlined until near the end,
-- because they don't enable other optimizations.  By delaying inlining,
-- code doesn't expand as much.

plus_fii @(m n : intindex) (x : FIInt m) (y : FIInt n)
	 -> FIInt (plus_i m n)
	 attribute(inline, inline_final) =
  case x of fiInt @m (x_i : int).
  case y of fiInt @n (y_i : int).
  fiInt @(plus_i m n) (x_i +# y_i);


minus_fii @(m n : intindex) (x : FIInt m) (y : FIInt n)
	  -> FIInt (minus_i m n)
	  attribute(inline, inline_final) =
  case x of fiInt @m (x_i : int).
  case y of fiInt @n (y_i : int).
  fiInt @(minus_i m n) (x_i -# y_i);


min_fii @(m n : intindex) (x : FIInt m) (y : FIInt n)
	-> FIInt (min_i m n)
	attribute(inline, inline_final) =
  case x of fiInt @m (x_i : int).
  case y of fiInt @n (y_i : int).
  fiInt @(min_i m n) (min_int x_i y_i);


max_fii @(m n : intindex) (x : FIInt m) (y : FIInt n)
	-> FIInt (max_i m n)
	attribute(inline, inline_final) =
  case x of fiInt @m (x_i : int).
  case y of fiInt @n (y_i : int).
  fiInt @(max_i m n) (max_int x_i y_i);


-- Determine if there are integers that are greater than or equal to @x@,
-- but less than @y@.
-- The result is False if @x == y@.
range_nonempty_ii @(m n : intindex) (x : IInt m) (y : IInt n) -> bool
  attribute(inline) =
  case x of {
    iInt @m (fx : FIInt m).
      case fx of fiInt @m (x_i : int).
      case y of {
        iInt @n (fy : FIInt n).
          case fy of fiInt @n (y_i : int).
          x_i <# y_i
      ; iPosInfty @n. True
      ; iNegInfty @n. False
      }
  ; iNegInfty @m.
      case y of {
        iNegInfty @n. False
      ; iInt @n (fy : FIInt n). True
      ; iPosInfty @n. True
      }
  ; iPosInfty @m. False
  };

fromIndInt @(N : intindex) (ii : IInt N) -> FIInt N attribute(inline) =
  case ii of {
    iInt @N (fii : FIInt N). fii;
    iPosInfty @N. except @(FIInt N);
    iNegInfty @N. except @(FIInt N)
  };


-- Test whether an interval is empty.
isEmptyInterval (iv : Interval) -> bool =
  case iv of interval (l : MaybeVal int) (u : MaybeVal int).
  case l of {
    justVal @int (ll : int).
      case u of {
        justVal @int (uu : int). ll ==# uu
      ; nothingVal @int. False
    }
  ; nothingVal @int. False
  };


-- Decide whether 'i' is in the interval.
inInterval (i : int) (iv : Interval) -> bool =
  case iv of interval (l : MaybeVal int) (u : MaybeVal int).

  -- Is 'i' within the lower bound?
  if case l of {
       nothingVal @int. True
     ; justVal @int (ll : int). i >=# ll
     }
  then -- Is 'i' within the upper bound?
       case u of {
         nothingVal @int. True
       ; justVal @int (uu : int). i <# uu
       }
  else False;


-- Compute the intersection of two intervals.
intersectInterval (iv1 : Interval) (iv2 : Interval) -> Interval =
  case iv1 of interval (l1 : MaybeVal int) (u1 : MaybeVal int).
  case iv2 of interval (l2 : MaybeVal int) (u2 : MaybeVal int).

  -- Lower bound is the maximum of the two bounds
  let l3 : MaybeVal int =
        case l1 of {
          nothingVal @int.
            l2
        ; justVal @int (ll1 : int).
            case l2 of {
              nothingVal @int.
                l1
            ; justVal @int (ll2 : int).
                justVal @int (max_int ll1 ll2)
            }
        } in

  -- Upper bound is the minimum of the two bounds
  let u3 : MaybeVal int =
        case u1 of {
          nothingVal @int.
            u2
        ; justVal @int (uu1 : int).
            case u2 of {
              nothingVal @int.
                u1
            ; justVal @int (uu2 : int).
                justVal @int (min_int uu1 uu2)
            }
        } in
  case l3 of {
    justVal @int (x : int).
      case u3 of {
        justVal @int (y : int).
          if x ># y
          then interval (justVal @int 0) (justVal @int 0) -- Empty interval
          else interval l3 u3
      ; nothingVal @int.
          interval l3 u3
      }
  ; nothingVal @int.
      interval l3 u3
  };


-- Get an interval consisting of the points {x + y | x <- i1, y <- i2}.
convolveInterval (i1 : Interval) (i2 : Interval) -> Interval
  attribute(inline, inline_final) =

  case i1 of interval (lo1 : MaybeVal int) (hi1 : MaybeVal int).
  case i2 of interval (lo2 : MaybeVal int) (hi2 : MaybeVal int).

  -- If either input is empty, the result is empty
  if or (isEmptyInterval i1) (isEmptyInterval i2)
  then interval (justVal @int 0) (justVal @int 0) else

  -- Add the lower bounds
  let lo3 : MaybeVal int =
        case lo1 of {
          justVal @int (ilo1 : int).
            case lo2 of {
              justVal @int (ilo2 : int). justVal @int (ilo1 +# ilo2)
            ; nothingVal @int. nothingVal @int
            }
        ; nothingVal @int. nothingVal @int
        } in

  -- Add the upper bounds.  Since the upper bound is exclusive,
  -- we must subtract 1 from the result.
  let hi3 : MaybeVal int =
        case hi1 of {
          justVal @int (ihi1 : int).
            case hi2 of {
              justVal @int (ihi2 : int). justVal @int (ihi1 +# ihi2 -# 1)
            ; nothingVal @int. nothingVal @int
            }
        ; nothingVal @int. nothingVal @int
        } in
  interval lo3 hi3;


-- Test whether i1 is a subset of i2.
subsetInterval (i1 : Interval) (i2 : Interval) -> bool attribute(inline) =

  case i1 of interval (lo1 : MaybeVal int) (hi1 : MaybeVal int).
  case i2 of interval (lo2 : MaybeVal int) (hi2 : MaybeVal int).

  -- An empty interval is a subset of anything
  if isEmptyInterval i1 then True else

  -- Check that each bound of i1 is inside the bound of i2
  let lower_subset : bool =
        case lo2 of {
          justVal @int (ilo2 : int).
            case lo1 of {
              justVal @int (ilo1 : int). ilo1 >=# ilo2
            ; nothingVal @int. False
            }
        ; nothingVal @int. True
        } in
  let upper_subset : bool =
        case hi2 of {
          justVal @int (ihi2 : int).
            case hi1 of {
              justVal @int (ihi1 : int). ihi1 <=# ihi2
            ; nothingVal @int. False
            }
        ; nothingVal @int. True
        } in
  and lower_subset upper_subset;


-- Decide whether 'i' is a member of the linear map's range.
inLM (i : int) (m : LinearMap) -> bool =
  case m of linearMap (s : int) (a : int). (i %# s) ==# (a %# s);
  

-- Evaluate a linear map at 'i'. 
evalLM (i : int) (m : LinearMap) -> int =
  case m of linearMap (s : int) (a : int). s *# i +# a;


-- Evaluate the inverse of a linear map at 'i'.
-- The result is undefined if 'i' is not in the range of the map.
invEvalLM (i : int) (m : LinearMap) -> int =
  case m of linearMap (s : int) (a : int). (i -# a) //# s;


-- Compute the intersection of two linear maps.
-- If the intersection is empty, 'Nothing' is returned.
intersectLM (m1 : LinearMap) (m2 : LinearMap) -> MaybeVal LinearMap
  attribute(inline, inline_final) =
  case m1 of linearMap (s1 : int) (a1 : int).
  case m2 of linearMap (s2 : int) (a2 : int).

  -- Special case handling when stride is 1
  if s1 ==# 1 then justVal @LinearMap m2 else
  if s2 ==# 1 then justVal @LinearMap m1 else

  let g : int = gcd s1 s2 in
  let align_remainder : int = (a2 -# a1) %# g in
  let align_quot : int = (a2 -# a1) //# g in

  -- Check if intersection is empty
  if align_remainder /=# 0 then nothingVal @LinearMap else

  let s1p : int = s1 //# g in
  let s2p : int = s2 //# g in
  let s3 : int = s1p *# s2 in
  let yp : int = extgcd_x s1p s2p in
  let y : int = align_quot *# yp in
  let a3 : int = (s1 *# y +# a1) %# s3 in
  justVal @LinearMap (linearMap s3 a3);


trimInterval (iv : Interval) (m : LinearMap) -> Interval
  attribute(inline, inline_final) =
  case iv of interval (l : MaybeVal int) (u : MaybeVal int).
  case m of linearMap (s : int) (a : int).

  let l2 : MaybeVal int =
        case l of {
          nothingVal @int. nothingVal @int
        ; justVal @int (n : int). justVal @int (n +# (a -# n) %# s) 
        } in
  let u2 : MaybeVal int =
        case u of {
          nothingVal @int. nothingVal @int
        ; justVal @int (n : int). justVal @int (n +# (a -# n) %# s) 
        } in
  interval l2 u2;


-- Convert fields of an array object to a domain.
-- The domain's linear map is the actual map from real to logical index.
arrayDescToDim1 @(N : intindex) (lb : int) (stride : int) (size : FIInt N)
  -> dim1 attribute(inline) =
  case size of fiInt @N (size_i : int).

  let ub : int = lb +# stride *# size_i in
  mk_dim1 (interval (justVal @int lb) (justVal @int ub)) (linearMap stride lb);


-- Convert a domain to fields of an array object
dim1ToArrayDesc @(a : bare)
  (shp : dim1)
  (k : (N : intindex) -> int -> int -> FIInt N -> Init a)
  (ret : OutPtr a)
  -> Store attribute(inline) =

  case shp of mk_dim1 (iv : Interval) (m : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case lb of {
    justVal @int (lb_i : int).
      case ub of {
        justVal @int (ub_i : int).
          case m of linearMap (stride : int) (alignment : int).
          let size_i : int = (ub_i -# lb_i) //# stride in
          case defineIntIndex size_i of
            someIInt @(N : intindex) (size : FIInt N).
          k @N lb_i stride size ret
      ; nothingVal @int.
          except @Store
      }
  ; nothingVal @int.
      except @Store
  };


internalApplyListSlice (slice_obj : SliceObject) (dom : list_dim)
  -> (list_dim, LinearMap)
  attribute(inline, inline_final) =
  case slice_obj of
    sliceObject (m_slice_lo : MaybeVal int)
                (m_slice_hi : MaybeVal int)
                (m_m_stride : MaybeVal (MaybeVal int)).
  case dom of mk_list_dim (list_size : MaybeVal int).
  let stride : int =
        case m_m_stride of {
          nothingVal @(MaybeVal int). 1
        ; justVal @(MaybeVal int) (m_stride : MaybeVal int).
            case m_stride of {
              nothingVal @int. 1
            ; justVal @int (stride : int). stride
            }
        } in
  if stride ==# 0 then except @(list_dim, LinearMap) else
  let counting_up : bool = stride ># 0 in

  -- Get the slice's inclusive lower bound.
  -- There must be a lower bound, determined either by the slice or the
  -- list domain.
  let slice_lo : int =
        if counting_up
        then case m_slice_lo of {
               nothingVal @int. 0
             ; justVal @int (l : int). max_int 0 l
             }
        else case m_slice_lo of {
               justVal @int (h : int).
                 case list_size of {
                   justVal @int (n : int). min_int h (n -# 1)
                 ; nothingVal @int. h
                 }
             ; nothingVal @int.
                 case list_size of {
                   justVal @int (n : int). n -# 1
                 ; nothingVal @int. except @int
                 }
             } in

  -- Get the slice's exclusive upper bound.
  let slice_hi : MaybeVal int =
        if counting_up
        then case m_slice_hi of {
               nothingVal @int.
                 list_size
             ; justVal @int (h : int).
                 case list_size of {
                   nothingVal @int. justVal @int h
                 ; justVal @int (n : int). justVal @int (min_int h n)
                 }
             }
        else case m_slice_hi of {
               nothingVal @int. justVal @int -1
             ; justVal @int (h : int). justVal @int (max_int h -1)
             } in

  -- If the slice is nonempty, this is the map from slice member to list member
  let linear_map : LinearMap = linearMap stride slice_lo in

  -- Compute the new list size, which may be unbounded
  let size : MaybeVal int =
        case slice_hi of {
          nothingVal @int. nothingVal @int
        ; justVal @int (h : int).
            let abs_stride : int = if counting_up
                                   then stride
                                   else AdditiveDict_int_negate stride in

            let abs_delta : int =
                  let delta : int = h -# slice_lo in
                  if delta <# 0
                  then AdditiveDict_int_negate delta
                  else delta in

            justVal @int ((abs_delta +# abs_stride -# 1) //# abs_stride)
        } in
  case size of {
    justVal @int (n : int).
      if n <# 0
      then (mk_list_dim (justVal @int 0), linearMap 0 0)
      else (mk_list_dim size, linear_map)
  ; nothingVal @int. (mk_list_dim size, linear_map)
  };


sliceToDomain (slice_obj : SliceObject) -> dim1
  attribute(inline, inline_final) =
  case slice_obj of
    sliceObject (m_slice_lo : MaybeVal int)
                (m_slice_hi : MaybeVal int)
                (m_m_stride : MaybeVal (MaybeVal int)).
  let stride : int =
        case m_m_stride of {
          nothingVal @(MaybeVal int). 1
        ; justVal @(MaybeVal int) (m_stride : MaybeVal int).
            case m_stride of {
              nothingVal @int. 1
            ; justVal @int (stride : int). stride
            }
        } in
  let alignment : int =
        case m_slice_lo of {
          nothingVal @int. 0
        ; justVal @int (n : int). n %# stride
        } in

  -- Stride must be positive
  if stride <=# 0 then except @dim1 else

  let map : LinearMap = linearMap stride alignment in
  let iv : Interval = trimInterval (interval m_slice_lo m_slice_hi) map in
  mk_dim1 iv map;


internalApplyArraySlice (slice_obj : SliceObject) (dom : dim1) -> dim1 =
  let slice_dom : dim1 = sliceToDomain slice_obj in
  ShapeDict_dim1_intersect slice_dom dom;

-------------------------------------------------------------------------------
-- Cartesian methods

CartesianDict_dim0_loBound
  (dom : dim0)
  -> Init (Maybe (index dim0))
  attribute(inline) =
  just @(Stored NoneType) (stored @NoneType None);


CartesianDict_dim0_hiBound
  (dom : dim0)
  -> Init (Maybe (index dim0))
  attribute(inline) =
  just @(Stored NoneType) (stored @NoneType None);


CartesianDict_dim0_stride
  (dom : dim0)
  -> Init (index dim0)
  attribute(inline) =
  stored @NoneType None;


CartesianDict_dim0_arrayDomain
  (lo : index dim0)
  (hi : index dim0)
  -> dim0
  attribute(inline) =
  mk_dim0;


CartesianDict_dim0_displaceDomain
  (dom : dim0)
  (ix : index dim0)
  -> dim0
  attribute(inline) =
  mk_dim0;


CartesianDict_dim0_multiplyDomain
  (dom : dim0)
  (n : Stored NoneType)
  -> dim0
  attribute(inline) =
  mk_dim0;


CartesianDict_dim0_divideDomain
  (dom : dim0)
  (n : Stored NoneType)
  -> dim0
  attribute(inline) =
  mk_dim0;


CartesianDict_dim1_loBound
  (dom : dim1)
  (ret : OutPtr (Maybe (index dim1)))
  -> Store
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case lb of {
    justVal @int (x : int).  just @(Stored int) (stored @int x) ret
  ; nothingVal @int. nothing @(Stored int) ret
  };


CartesianDict_dim1_hiBound
  (dom : dim1)
  (ret : OutPtr (Maybe (index dim1)))
  -> Store
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case ub of {
    justVal @int (x : int).  just @(Stored int) (stored @int x) ret
  ; nothingVal @int. nothing @(Stored int) ret
  };


CartesianDict_dim1_stride
  (dom : dim1)
  -> Init (index dim1)
  attribute(inline) =
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case lm of linearMap (stride : int) (alignment : int).
  stored @int stride;
  

CartesianDict_dim1_arrayDomain
  (lo : index dim1)
  (hi : index dim1)
  -> dim1
  attribute(inline, inline_final) =
  case lo of stored @int (lo_i : int).
  case hi of stored @int (hi_i : int).

  -- Check for empty range
  if lo_i ># hi_i
  then mk_dim1 (interval (justVal @int 0) (justVal @int 0)) (linearMap 1 0)
  else mk_dim1 (interval (justVal @int lo_i) (justVal @int hi_i))
               (linearMap 1 0);


CartesianDict_dim1_displaceDomain
  (dom : dim1)
  (ix : index dim1)
  -> dim1
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (m : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case m of linearMap (stride : int) (alignment : int).
  case ix of stored @int (offset_i : int).

  let lb2 : MaybeVal int =
        case lb of {
          justVal @int (lb_i : int). justVal @int (lb_i +# offset_i)
        ; nothingVal @int. nothingVal @int
        } in
  let ub2 : MaybeVal int =
        case ub of {
          justVal @int (ub_i : int). justVal @int (ub_i +# offset_i)
        ; nothingVal @int. nothingVal @int
        } in
  mk_dim1 (interval lb2 ub2)
          (linearMap stride ((alignment +# offset_i) %# stride));


CartesianDict_dim1_multiplyDomain
  (dom : dim1)
  (n : Stored int)
  -> dim1
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (m : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case m of linearMap (stride : int) (alignment : int).
  case n of stored @int (n_u : int).

  -- Stride must remain positive
  if n_u <=# 0 then except @dim1 else
  
  let lb2 : MaybeVal int =
        case lb of {
          justVal @int (lb_i : int). justVal @int (lb_i *# n_u)
        ; nothingVal @int. nothingVal @int
        } in

  let ub2 : MaybeVal int =
        case ub of {
          justVal @int (ub_i : int). justVal @int (ub_i *# n_u)
        ; nothingVal @int. nothingVal @int
        } in
  mk_dim1 (interval lb2 ub2)
          (linearMap (stride *# n_u) (alignment *# n_u));


CartesianDict_dim1_divideDomain
  (dom : dim1)
  (n : Stored int)
  -> dim1
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (m : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case m of linearMap (stride : int) (alignment : int).
  case n of stored @int (n_u : int).

  -- Stride must remain positive
  if n_u <=# 0 then except @dim1 else

  -- Ensure that it divides exactly
  if or (stride %# n_u /=# 0) (alignment %# n_u /=# 0)
  then except @(dim1) else
  
  let lb2 : MaybeVal int =
        case lb of {
          justVal @int (lb_i : int). justVal @int (lb_i //# n_u)
        ; nothingVal @int. nothingVal @int
        } in

  let ub2 : MaybeVal int =
        case ub of {
          justVal @int (ub_i : int). justVal @int (ub_i //# n_u)
        ; nothingVal @int. nothingVal @int
        } in
  mk_dim1 (interval lb2 ub2)
          (linearMap (stride //# n_u) (alignment //# n_u));


CartesianDict_dim2_loBound
  (dom : dim2)
  (ret : OutPtr (Maybe (index dim2)))
  -> Store
  attribute(inline, inline_final) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case dom_y of mk_dim1 (iv_y : Interval) (lm : LinearMap).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case lb_y of {
    justVal @int (y : int).
      case dom_x of mk_dim1 (iv_x : Interval) (lm : LinearMap).
      case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
      case lb_x of {
        justVal @int (x : int).
          just @(PyonTuple2 (Stored int) (Stored int))
               (pyonTuple2 @(Stored int) @(Stored int)
                (stored @int y) (stored @int x)) ret
      ; nothingVal @int.
          nothing @(PyonTuple2 (Stored int) (Stored int)) ret
      }
  ; nothingVal @int.
      nothing @(PyonTuple2 (Stored int) (Stored int)) ret
  };
  

CartesianDict_dim2_hiBound
  (dom : dim2)
  (ret : OutPtr (Maybe (index dim2)))
  -> Store
  attribute(inline, inline_final) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case dom_y of mk_dim1 (iv_y : Interval) (lm : LinearMap).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case ub_y of {
    justVal @int (y : int).
      case dom_x of mk_dim1 (iv_x : Interval) (lm : LinearMap).
      case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
      case ub_x of {
        justVal @int (x : int).
          just @(PyonTuple2 (Stored int) (Stored int))
               (pyonTuple2 @(Stored int) @(Stored int)
               (stored @int y) (stored @int x)) ret
      ; nothingVal @int.
          nothing @(PyonTuple2 (Stored int) (Stored int)) ret
      }
  ; nothingVal @int.
      nothing @(PyonTuple2 (Stored int) (Stored int)) ret
  };


CartesianDict_dim2_stride
  (dom : dim2)
  -> Init (index dim2)
  attribute(inline) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  pyonTuple2 @(Stored int) @(Stored int)
  (CartesianDict_dim1_stride dom_y)
  (CartesianDict_dim1_stride dom_x);


CartesianDict_dim2_arrayDomain
  (lo : index dim2)
  (hi : index dim2)
  -> dim2
  attribute(inline) =
  case lo of
    pyonTuple2 @(Stored int) @(Stored int)
               (lo_y : Stored int) (lo_x : Stored int).
  case lo_y of stored @int (lo_y_i : int).
  case lo_x of stored @int (lo_x_i : int).
  case hi of
    pyonTuple2 @(Stored int) @(Stored int)
               (hi_y : Stored int) (hi_x : Stored int).
  case hi_y of stored @int (hi_y_i : int).
  case hi_x of stored @int (hi_x_i : int).
  mk_dim2 (mk_dim1 (interval (justVal @int lo_y_i) (justVal @int hi_y_i))
                   (linearMap 1 0))
          (mk_dim1 (interval (justVal @int lo_x_i) (justVal @int hi_x_i))
                   (linearMap 1 0));


CartesianDict_dim2_displaceDomain
  (dom : dim2)
  (ix : index dim2)
  -> dim2
  attribute(inline) =
  case ix of pyonTuple2 @(Stored int) @(Stored int)
             (ix_y : Stored int) (ix_x : Stored int).
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  mk_dim2 (CartesianDict_dim1_displaceDomain dom_y ix_y)
          (CartesianDict_dim1_displaceDomain dom_x ix_x);


CartesianDict_dim2_multiplyDomain
  (dom : dim2)
  (v : PyonTuple2 (Stored int) (Stored int))
  -> dim2
  attribute(inline) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case v of pyonTuple2 @(Stored int) @(Stored int)
    (v_y : Stored int) (v_x : Stored int).
  mk_dim2 (CartesianDict_dim1_multiplyDomain dom_y v_y)
          (CartesianDict_dim1_multiplyDomain dom_x v_x);
  
  
CartesianDict_dim2_divideDomain
  (dom : dim2)
  (v : PyonTuple2 (Stored int) (Stored int))
  -> dim2
  attribute(inline) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case v of pyonTuple2 @(Stored int) @(Stored int)
    (v_y : Stored int) (v_x : Stored int).
  mk_dim2 (CartesianDict_dim1_divideDomain dom_y v_y)
          (CartesianDict_dim1_divideDomain dom_x v_x);


CartesianDict_dim3_loBound
  (dom : dim3)
  (ret : OutPtr (Maybe (index dim3)))
  -> Store
  attribute(inline, inline_final) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case dom_z of mk_dim1 (iv_z : Interval) (lm : LinearMap).
  case iv_z of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).
  case lb_z of {
    justVal @int (z : int).
      case dom_y of mk_dim1 (iv_y : Interval) (lm : LinearMap).
      case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
      case lb_y of {
        justVal @int (y : int).
          case dom_x of mk_dim1 (iv_x : Interval) (lm : LinearMap).
          case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
          case lb_x of {
            justVal @int (x : int).
              just @(PyonTuple3 (Stored int) (Stored int) (Stored int))
                   (pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
                    (stored @int z) (stored @int y) (stored @int x)) ret
          ; nothingVal @int.
              nothing @(PyonTuple3 (Stored int) (Stored int) (Stored int)) ret
          }
      ; nothingVal @int.
          nothing @(PyonTuple3 (Stored int) (Stored int) (Stored int)) ret
      }
  ; nothingVal @int.
      nothing @(PyonTuple3 (Stored int) (Stored int) (Stored int)) ret
  };
  

CartesianDict_dim3_hiBound
  (dom : dim3)
  (ret : OutPtr (Maybe (index dim3)))
  -> Store
  attribute(inline, inline_final) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case dom_z of mk_dim1 (iv_z : Interval) (lm : LinearMap).
  case iv_z of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).
  case ub_z of {
    justVal @int (z : int).
      case dom_y of mk_dim1 (iv_y : Interval) (lm : LinearMap).
      case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
      case ub_y of {
        justVal @int (y : int).
          case dom_x of mk_dim1 (iv_x : Interval) (lm : LinearMap).
          case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
          case ub_x of {
            justVal @int (x : int).
              just @(PyonTuple3 (Stored int) (Stored int) (Stored int))
                   (pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
                   (stored @int z) (stored @int y) (stored @int x)) ret
          ; nothingVal @int.
              nothing @(PyonTuple3 (Stored int) (Stored int) (Stored int)) ret
          }
      ; nothingVal @int.
          nothing @(PyonTuple3 (Stored int) (Stored int) (Stored int)) ret
      }
  ; nothingVal @int.
      nothing @(PyonTuple3 (Stored int) (Stored int) (Stored int)) ret
  };


CartesianDict_dim3_stride
  (dom : dim3)
  -> Init (index dim3)
  attribute(inline) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
  (CartesianDict_dim1_stride dom_z)
  (CartesianDict_dim1_stride dom_y)
  (CartesianDict_dim1_stride dom_x);


CartesianDict_dim3_arrayDomain
  (lo : index dim3)
  (hi : index dim3)
  -> dim3
  attribute(inline) =
  case lo of
    pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
               (lo_z : Stored int) (lo_y : Stored int) (lo_x : Stored int).
  case lo_z of stored @int (lo_z_i : int).
  case lo_y of stored @int (lo_y_i : int).
  case lo_x of stored @int (lo_x_i : int).
  case hi of
    pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
               (hi_z : Stored int) (hi_y : Stored int) (hi_x : Stored int).
  case hi_z of stored @int (hi_z_i : int).
  case hi_y of stored @int (hi_y_i : int).
  case hi_x of stored @int (hi_x_i : int).
  mk_dim3 (mk_dim1 (interval (justVal @int lo_z_i) (justVal @int hi_z_i))
                   (linearMap 1 0))
          (mk_dim1 (interval (justVal @int lo_y_i) (justVal @int hi_y_i))
                   (linearMap 1 0))
          (mk_dim1 (interval (justVal @int lo_x_i) (justVal @int hi_x_i))
                   (linearMap 1 0));


CartesianDict_dim3_displaceDomain
  (dom : dim3)
  (ix : index dim3)
  -> dim3
  attribute(inline) =
  case ix of pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
             (ix_z : Stored int) (ix_y : Stored int) (ix_x : Stored int).
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  mk_dim3 (CartesianDict_dim1_displaceDomain dom_z ix_z)
          (CartesianDict_dim1_displaceDomain dom_y ix_y)
          (CartesianDict_dim1_displaceDomain dom_x ix_x);


CartesianDict_dim3_multiplyDomain
  (dom : dim3)
  (v : PyonTuple3 (Stored int) (Stored int) (Stored int))
  -> dim3
  attribute(inline) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case v of pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
    (v_z : Stored int) (v_y : Stored int) (v_x : Stored int).
  mk_dim3 (CartesianDict_dim1_multiplyDomain dom_z v_z)
          (CartesianDict_dim1_multiplyDomain dom_y v_y)
          (CartesianDict_dim1_multiplyDomain dom_x v_x);
  
  
CartesianDict_dim3_divideDomain
  (dom : dim3)
  (v : PyonTuple3 (Stored int) (Stored int) (Stored int))
  -> dim3
  attribute(inline) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case v of pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
    (v_z : Stored int) (v_y : Stored int) (v_x : Stored int).
  mk_dim3 (CartesianDict_dim1_divideDomain dom_z v_z)
          (CartesianDict_dim1_divideDomain dom_y v_y)
          (CartesianDict_dim1_divideDomain dom_x v_x);

-------------------------------------------------------------------------------
-- Imperative computation

intUpdateInPlace_int_coercion : coerce @bare (Stored int) (Stored int) =
  idBareCoercion @(Stored int);


intUpdateInPlace_finalizer : UpdateInPlaceFinalizer (Stored int) (Stored int) =
  mutateInPlace @(Stored int) @(Stored int)
  intUpdateInPlace_int_coercion;


intUpdateInPlace_combiner (x : Stored int) (y : Stored int)
  (ret : OutPtr (Stored int))
  -> Store =
  case x of stored @int (ux : int).
  case y of stored @int (uy : int).
  stored @int (ux +# uy) ret;


floatUpdateInPlace_float_coercion : coerce @bare (Stored float) (Stored float) =
  idBareCoercion @(Stored float);


floatUpdateInPlace_finalizer : UpdateInPlaceFinalizer (Stored float) (Stored float) =
  mutateInPlace @(Stored float) @(Stored float)
  floatUpdateInPlace_float_coercion;


floatUpdateInPlace_combiner (x : Stored float) (y : Stored float)
  (ret : OutPtr (Stored float))
  -> Store =
  case x of stored @float (ux : float).
  case y of stored @float (uy : float).
  stored @float (AdditiveDict_float_add ux uy) ret;


intSumScatter : Scatter (Stored int) (Stored int) =
  let type Sint = Stored int in
  mk_scatter @Sint @Sint @Sint @(NoneType -> int) @(int -> int)
  repr_int
  intUpdateInPlace_initializer
  intSumScatter_updater
  intUpdateInPlace_combiner
  intUpdateInPlace_finalizer
  intSumScatter_make_update
  intSumScatter_make_init;


intSumScatter_updater (modify : int -> int) (ix : Stored int)
  (tok_in : EffTok) (ret : OutPtr (Stored int)) -> EffTok =
  intUpdateInPlace_updater modify tok_in ret;


intSumScatter_make_update (i : Stored int) -> int -> int =
  case i of stored @int (ui : int).
  (\ (n : int) -> int. ui +# n);


intSumScatter_make_init (dummy : NoneType) -> int = 0;


floatSumScatter : Scatter (Stored float) (Stored float) =
  let type Sfloat = Stored float in
  mk_scatter @Sfloat @Sfloat @Sfloat @(NoneType -> float) @(float -> float)
  repr_float
  floatUpdateInPlace_initializer
  floatSumScatter_updater
  floatUpdateInPlace_combiner
  floatUpdateInPlace_finalizer
  floatSumScatter_make_update
  floatSumScatter_make_init;


floatSumScatter_updater (modify : float -> float) (ix : Stored float)
  (tok_in : EffTok) (ret : OutPtr (Stored float)) -> EffTok =
  floatUpdateInPlace_updater modify tok_in ret;


floatSumScatter_make_update (i : Stored float) -> float -> float =
  case i of stored @float (ui : float).
  (\ (n : float) -> float. AdditiveDict_float_add ui n);


floatSumScatter_make_init (dummy : NoneType) -> float = 0.0;


countingScatter : Scatter (Stored int) (Stored NoneType) =

  mk_scatter @(Stored int) @(Stored NoneType) @(Stored int)
             @(NoneType -> int) @(int -> int)
  repr_int
  intUpdateInPlace_initializer
  countingScatter_updater
  intUpdateInPlace_combiner
  intUpdateInPlace_finalizer
  countingScatter_make_update
  countingScatter_make_init;


countingScatter_updater (modify : int -> int) (ix : Stored NoneType)
  (tok_in : EffTok) (ret : OutPtr (Stored int)) -> EffTok =
  intUpdateInPlace_updater modify tok_in ret;


countingScatter_make_update (i : Stored NoneType) -> int -> int =
  (\ (n : int) -> int. n +# 1);


countingScatter_make_init (dummy : NoneType) -> int = 0;


boxedScatter @(a : box) @(b : bare) (repr : Repr b)
  (f : b -> a -> a)
  (g : a -> a -> a)
  (init : a)
  -> Scatter (StuckRef a) b =
  mk_scatter @(StuckRef a) @b @(StuckRef a) @(NoneType -> a) @(a -> a)
  (repr_StuckRef @a)
  -- Initializer
  (\ (init_f : NoneType -> a) (p : OutPtr (StuckRef a)) -> EffTok.
     toEffTok @(StuckRef a) (stuckRef @a (init_f None) p))
  -- Updater
  (\ (modify : a -> a) (index : b) (eff_in : EffTok)
     (p : OutPtr (StuckRef a)) -> EffTok.
     boxedScatter_updater @a modify eff_in p)
  (\ (x : StuckRef a) (y : StuckRef a) (ret : OutPtr (StuckRef a))
     -> Store.
     case x of stuckRef @a (ux : a).
     case y of stuckRef @a (uy : a).
     stuckRef @a (g ux uy) ret)
  (mutateInPlace @(StuckRef a) @(StuckRef a) (idBareCoercion @(StuckRef a)))
  (\ (x : b) (old : a) -> a. f x old)
  (\ (dummy : NoneType) -> a. init);


appendScatter @(a : bare) (rep : Repr a)
  -> Scatter (list a) a =
  mk_scatter @(list a) @a @(append_list a)
             @(NoneType -> NoneType)
             @(OutPtr a -> Store)
  (repr_append_list @a rep)
  (appendScatter_initializer @a (reprSizeAlign @a rep))
  (appendScatter_updater @a rep)
  (appendScatter_concatenate @a rep)
  (mutateAndCopy @(append_list a) @(list a)
   (\ (x : append_list a) (ret : OutPtr (list a)) -> Store.

      -- Create a copy of the list that contains no unused array elements.

      -- Inspect the old value
      case x of
        make_append_list @a @(M : intindex)
        (ls_count : FIInt M) (real_length : int) (ls_data : StuckBox (arr M a)).
      case ls_data of stuckBox @(arr M a) (ls_arr : arr M a).

      -- Construct the new list; copy from the old list
      case defineIntIndex real_length of
        someIInt @(N : intindex) (count : FIInt N).
      make_list @a @N count
      (stuckBox @(arr N a)
       (\ (ret : OutPtr (arr N a)) -> Store.
          doall @N @a @a count
          (\ (i : int) -> Store.
             copy @a rep
             (subscript @M @a (reprSizeAlign @a rep) ls_arr i)
             (subscript_out @N @a (reprSizeAlign @a rep) ret i))))
      ret))
  (copy @a rep)
  (\ (dummy : NoneType) -> NoneType. dummy);


appendScatter_updater @(a : bare)
  (rep : Repr a)
  (writer : OutPtr a -> Store)
  (arg : a)
  (tok_in : EffTok)
  (update_list : OutPtr (append_list a))
  -> EffTok =
  appendScatter_update_real @a rep writer tok_in update_list;


appendScatter_concatenate @(a : bare)
  (rep : Repr a)
  (l1 : append_list a)
  (l2 : append_list a)
  (ret : OutPtr (append_list a))
  -> Store =

  case l1 of
    make_append_list @a @(N : intindex)
    (s1 : FIInt N) (n1 : int) (data1 : StuckBox (arr N a)).
  case data1 of stuckBox @(arr N a) (arr1 : arr N a).
  case l2 of
    make_append_list @a @(M : intindex)
    (s2 : FIInt M) (n2 : int) (data2 : StuckBox (arr M a)).
  case data2 of stuckBox @(arr M a) (arr2 : arr M a).

  -- Concatenate both lists
  -- TODO: This function may be called repeatedly, but we shouldn't copy
  -- more than once.  Avoid excess copying by building a cord, then
  -- flattening the cord later.
  case defineIntIndex n1 of someIInt @(Np : intindex) (count1 : FIInt Np).
  case defineIntIndex n2 of someIInt @(Mp : intindex) (count2 : FIInt Mp).

  case defineIntIndex (n1 +# n2) of someIInt @(P : intindex) (s3 : FIInt P).
  case s3 of fiInt @P (n3 : int).

  let sizealign : SizeAlign a = reprSizeAlign @a rep in

  make_append_list @a @P s3 n3
  (stuckBox @(arr P a)
   (\ (ret : OutPtr (arr P a)) -> Store.

      -- Copy data from l1 and l2 into the output
      fromEffTok @(arr P a)
      (seqEffTok
       (toEffTok @(arr P a)
        (doall @Np @a @a count1
         (\ (i : int) -> Store.
            -- Copy l1 into the beginning of the list
            copy @a rep
            (subscript @N @a sizealign arr1 i)
            (subscript_out @P @a sizealign ret i))))
       (toEffTok @(arr P a)
        (doall @Mp @a @a count2
         (\ (i : int) -> Store.
            -- Copy l2 into the end of the list
            copy @a rep
            (subscript @N @a sizealign arr1 i)
            (subscript_out @P @a sizealign ret (i +# n1))))))))
  ret;


comapScatterIndex @(r i1 i2 : bare)
  (repr_i1 : Repr i1)
  (repr_i2 : Repr i2)
  (repr_r : Repr r)
  (transform : i2 -> Init i1)
  (sr : Scatter r i1)
  -> Scatter r i2
  attribute(inline, inline_final) =

  case sr of
    mk_scatter @r @i1 @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i1 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s r)
    (update_f : i1 -> updF)
    (init_f : iniF).

  letfun
    updater2 (f : updF) (index : i2) (tok_in : EffTok) (out_ptr : OutPtr s)
      -> EffTok =
      case boxed @i1 (transform index) of boxed @i1 (index1 : i1).
      updater f index1 tok_in out_ptr in

  letfun
    update_f2 (index : i2) -> updF =
      case boxed @i1 (transform index) of boxed @i1 (index1 : i1).
      update_f index1 in

  mk_scatter @r @i2 @s @iniF @updF repr_s initializer
  updater2 combiner finalizer update_f2 init_f;


arrScatter @(N : intindex) @(e i : bare)
  (repr_i : Repr i)
  (repr_e : Repr e)
  (count : FIInt N)
  (reduction_op : Scatter e i)
  -> Scatter (arr N e) (PyonTuple2 (Stored int) i)
  attribute(inline, inline_final) =

  case reduction_op of
    mk_scatter @e @i @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s e)
    (update_f : i -> updF)
    (init_f : iniF).

  let type arr_t = arr N e in
  let type i2 = PyonTuple2 (Stored int) i in

  case count of fiInt @N (u_count : int).

  case repr_s of
    repr @s
    (sa_s : SizeAlign s)
    (copy_s : s -> Init s)
    (to_boxed_s : Init s -> BoxedType s)
    (to_bare_s : BoxedType s -> Init s)
    (pointerless_s : bool).

  mk_scatter @arr_t @i2 @(arr N s) @iniF @updF
  (repr_arr @N @s count repr_s)
  (\ (f : iniF) (p : OutPtr (arr N s)) -> EffTok.
     -- Initialize all array elements
     toEffTok @(arr N s)
     (arr1D_build @N @s repr_s count
      (\ (i : int) (ret : OutPtr s) -> Store.
         fromEffTok @s (initializer f ret)) p))
  (\ (f : updF) (index : i2) (in_tok : EffTok) (p : OutPtr (arr N s))
     -> EffTok.
     case index of
       pyonTuple2 @(Stored int) @i (arr_index : Stored int) (elt_index : i).
     case arr_index of stored @int (u_arr_index : int).

     -- If index is out of bounds, do nothing
     if or (u_arr_index <# 0) (u_arr_index >=# u_count)
     then in_tok
     else updater f elt_index in_tok
          (subscript_out @N @s sa_s p u_arr_index))

  -- Combine arrays elementwise
  (\ (x : arr N s) (y : arr N s) (ret : OutPtr (arr N s)) -> Store.
     arr1D_build @N @s repr_s count
     (\ (i : int) (local_ret : OutPtr s) -> Store.
        combiner (subscript @N @s sa_s x i) (subscript @N @s sa_s y i)
        local_ret)
     ret)

  -- Update in place if array elements can be updated in place
  -- Otherwise, make a copy
  (case finalizer of {
     mutateInPlace @s @e (co : coerce @bare s e).
       mutateInPlace @(arr N s) @(arr N e)
       (unsafeMakeBareCoercion @(arr N s) @(arr N e))
   ; mutateAndCopy @s @e (f : s -> Init e).
       mutateAndCopy @(arr N s) @(arr N e)
       (\ (accumulator : arr N s) (ret : OutPtr (arr N e))
          -> Store.
          arr1D_build @N @e repr_e count
          (\ (i : int) (ret : OutPtr e) -> Store.
             f (subscript @N @s sa_s accumulator i) ret)
          ret)
   })
   (\ (index : i2) -> updF.
      case index of
        pyonTuple2 @(Stored int) @i (arr_index : Stored int) (elt_index : i).
      update_f elt_index)
   init_f;


listScatter @(e i : bare)
  (repr_i : Repr i)
  (repr_e : Repr e)
  (dom : list_dim)
  (reduction_op : Scatter e i)
  -> Scatter (list e) (PyonTuple2 (Stored int) i) =

  let type i2 = (PyonTuple2 (Stored int) i) in
  let type ret_type = Scatter (list e) i2 in

  case dom of mk_list_dim (mlist_size : MaybeVal int).
  case mlist_size of {
    justVal @int (list_size : int).
      case defineIntIndex list_size of
        someIInt @(N : intindex) (count : FIInt N).

      -- Create a plain array scatter reducer.
      case arrScatter @N @e @i repr_i repr_e count reduction_op of
        mk_scatter @(arr N e) @i2 @(s : bare) @(iniF : box) @(updF : box)
        (repr_s : Repr s)
        (initializer : iniF -> OutPtr s -> EffTok)
        (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
        (combiner : s -> s -> Init s)
        (finalizer : UpdateInPlaceFinalizer s (arr N e))
        (make_updater : i2 -> updF)
        (make_init : iniF).

      -- Create a scatter reducer that wraps it in a list
      let list_finalizer : UpdateInPlaceFinalizer s (list e) =
            mutateAndCopy @s @(list e)
            (\ (accumulator : s) (ret : OutPtr (list e)) -> Store.
               make_list @e @N count
               (stuckBox @(arr N e)
                (case finalizer of {
                   mutateInPlace @s @(arr N e) (co : coerce @bare s (arr N e)).
                     copy @(arr N e) (repr_arr @N @e count repr_e)
                     (coerce @s @(arr N e) accumulator)
                 ; mutateAndCopy @s @(arr N e) (f : s -> Init (arr N e)).
                     f accumulator
                 }))
               ret) in

      mk_scatter @(list e) @i2 @s @iniF @updF
      repr_s
      initializer
      updater
      combiner
      list_finalizer
      make_updater
      make_init

  ; nothingVal @int.
      except @(Scatter (list e) (PyonTuple2 (Stored int) i))
  };


array1Scatter @(e i : bare)
  (repr_i : Repr i)
  (repr_e : Repr e)
  (dom : dim1)
  (reduction_op : Scatter e i)
  -> Scatter (array1 e) (PyonTuple2 (Stored int) i) =

  let type i2 = (PyonTuple2 (Stored int) i) in
  let type ret_type = Scatter (array1 e) i2 in

  -- Compute array size
  case boxed @(Ref ret_type)
       (dim1ToArrayDesc @(Ref ret_type) dom
        (\ @(N : intindex) (lb : int) (stride : int) (count : FIInt N)
           (ret : OutPtr (Ref ret_type))
           -> Store.

           -- Create a plain array scatter reducer.
           case arrScatter @N @e @i repr_i repr_e count reduction_op of
             mk_scatter @(arr N e) @i2 @(s : bare) @(iniF : box) @(updF : box)
             (repr_s : Repr s)
             (initializer : iniF -> OutPtr s -> EffTok)
             (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
             (combiner : s -> s -> Init s)
             (finalizer : UpdateInPlaceFinalizer s (arr N e))
             (make_updater : i2 -> updF)
             (make_init : iniF).

           -- Create a scatter reducer that wraps it in an array
           let array_finalizer : UpdateInPlaceFinalizer s (array1 e) =
                 mutateAndCopy @s @(array1 e)
                 (\ (accumulator : s) (ret : OutPtr (array1 e))
                    -> Store.
                    mk_array1 @e @N lb stride count
                    (stuckBox @(arr N e)
                     (case finalizer of {
                        mutateInPlace @s @(arr N e) (co : coerce @bare s (arr N e)).
                          copy @(arr N e) (repr_arr @N @e count repr_e)
                          (coerce @s @(arr N e) accumulator)
                      ; mutateAndCopy @s @(arr N e) (f : s -> Init (arr N e)).
                          f accumulator
                      }))
                    ret) in

           -- Transform dim1 indices to linear indices
           letfun
             linearized_updater
               (f : updF) (ix : i2) (tok_in : EffTok) (ret : OutPtr s)
               -> EffTok =
               case ix of pyonTuple2 @(Stored int) @i (arr_ix : Stored int) (val : i).
               case arr_ix of stored @int (u_arr_ix : int).

               -- Drop values whose indices are out of bounds due to alignment
               let zeroed_ix : int = u_arr_ix -# lb in
               if zeroed_ix %# stride /=# 0 then tok_in else
               let linearized_ix : int = zeroed_ix //# stride in
               case boxed @i2 (pyonTuple2 @(Stored int) @i
                               (stored @int linearized_ix) (copy @i repr_i val)) of
                 boxed @i2 (new_ix : i2).
               updater f new_ix tok_in ret
           in

           ref @ret_type
           (mk_scatter @(array1 e) @i2 @s @iniF @updF
            repr_s
            initializer
            linearized_updater
            combiner
            array_finalizer
            make_updater
            make_init)
           ret)) of
    boxed @(Ref ret_type) (s_retval : Ref ret_type).
  case s_retval of ref @ret_type (retval : ret_type).
  retval;


barray1Scatter @(a i : bare)
  (repr_i : Repr i)
  (repr_a : Repr a)
  (dom : dim1)
  (reduction_op : Scatter (StuckRef (BoxedType a)) i)
  -> Scatter (barray1 a) (PyonTuple2 (Stored int) i) =
  let type boxed_a = StuckRef (BoxedType a) in
  let type i2 = PyonTuple2 (Stored int) i in

  -- Use array1Scatter
  case array1Scatter @boxed_a @i
       repr_i (repr_StuckRef @(BoxedType a)) dom reduction_op of
    mk_scatter @(array1 boxed_a) @i2 @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s (array1 boxed_a))
    (make_updater : i2 -> updF)
    (make_init : iniF).

  -- Wrap with barray1
  let repr_array_a : Repr (array1 boxed_a) =
        repr_array1 @boxed_a (repr_StuckRef @(BoxedType a)) in

  let barray_finalizer : UpdateInPlaceFinalizer s (barray1 a) =
        case finalizer of {
          mutateInPlace @s @(array1 boxed_a)
          (co : coerce @bare s (array1 boxed_a)).
            mutateAndCopy @s @(barray1 a)
            (\ (x : s) -> Init (barray1 a).
               mk_barray1 @a
               (copy @(array1 boxed_a) repr_array_a
                (coerce @s @(array1 boxed_a) x)))
        ; mutateAndCopy @s @(array1 boxed_a) (f : s -> Init (array1 boxed_a)).
            mutateAndCopy @s @(barray1 a)
            (\ (x : s) -> Init (barray1 a). mk_barray1 @a (f x))
        } in

  mk_scatter @(barray1 a) @i2 @s @iniF @updF repr_s initializer updater combiner
  barray_finalizer make_updater make_init;


array2Scatter @(e i : bare)
  (repr_i : Repr i)
  (repr_e : Repr e)
  (dom : dim2)
  (reduction_op : Scatter e i)
  -> Scatter (array2 e) (PyonTuple2 (index dim2) i) =

  let type i2 = (PyonTuple2 (index dim2) i) in
  let type ret_type = Scatter (array2 e) i2 in

  let repr_i2 : Repr i2 =
        repr_PyonTuple2 @(index dim2) @i repr_index2 repr_i in

  -- Compute array size
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case boxed @(Ref ret_type)
       (dim1ToArrayDesc @(Ref ret_type) dom_y
        (\ @(M : intindex) (lb_y : int) (stride_y : int) (count_y : FIInt M)
           (ret : OutPtr (Ref ret_type))
           -> Store.
           dim1ToArrayDesc @(Ref ret_type) dom_x
           (\ @(N : intindex) (lb_x : int) (stride_x : int) (count_x : FIInt N)
              (ret : OutPtr (Ref ret_type))
              -> Store.

              let type index_1d = PyonTuple2 (Stored int) i in
              let type index_2d = PyonTuple2 (Stored int) index_1d in

              let repr_inner_array : Repr (arr N e) =
                    repr_arr @N @e count_x repr_e in
              let repr_array : Repr (arr M (arr N e)) =
                    repr_arr @M @(arr N e) count_y repr_inner_array in
              let repr_inner_index : Repr index_1d =
                    repr_PyonTuple2 @(Stored int) @i repr_int repr_i in
              let repr_index : Repr index_2d =
                    repr_PyonTuple2 @(Stored int) @index_1d repr_int repr_inner_index in


              -- Create a plain array scatter reducer using two calls to
              -- 'arrScatter'
              let x_scatter_reduction : Scatter (arr N e) index_1d  =
                    arrScatter @N @e @i repr_i repr_e count_x reduction_op in
              let xy_scatter_reduction : Scatter (arr M (arr N e)) index_2d =
                    arrScatter @M @(arr N e) @index_1d
                    repr_inner_index repr_inner_array count_y x_scatter_reduction in

              -- Change the index to the expected data type
              -- Deconstruct the result.
              let arr_scatter_reduction : Scatter (arr M (arr N e)) i2 =
                   comapScatterIndex @(arr M (arr N e)) @index_2d @i2
                   repr_index repr_i2 repr_array
                   (\ (index_in : i2) (ret : OutPtr index_2d) -> Store.
                      case index_in of
                        pyonTuple2 @(index dim2) @i
                        (yx : index dim2) (z : i).
                      case yx of
                        pyonTuple2 @(Stored int) @(Stored int)
                        (y : Stored int) (x : Stored int).
                      case x of stored @int (u_x : int).
                      case y of stored @int (u_y : int).

                      pyonTuple2 @(Stored int) @index_1d
                      (stored @int u_y)
                      (pyonTuple2 @(Stored int) @i
                       (stored @int u_x) (copy @i repr_i z))
                      ret)
                   xy_scatter_reduction in
              case arr_scatter_reduction of
                mk_scatter @(arr M (arr N e)) @i2 @(s : bare)
                           @(iniF : box) @(updF : box)
                (repr_s : Repr s)
                (initializer : iniF -> OutPtr s -> EffTok)
                (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
                (combiner : s -> s -> Init s)
                (finalizer : UpdateInPlaceFinalizer s (arr M (arr N e)))
                (make_updater : i2 -> updF)
                (make_init : iniF).

              -- Create a scatter reducer that wraps it in an array
              let array_finalizer : UpdateInPlaceFinalizer s (array2 e) =
                    mutateAndCopy @s @(array2 e)
                    (\ (accumulator : s) (ret : OutPtr (array2 e))
                       -> Store.
                       mk_array2 @e @M @N
                       lb_y stride_y count_y lb_x stride_x count_x
                       (stuckBox @(arr M (arr N e))
                        (case finalizer of {
                           mutateInPlace @s @(arr M (arr N e)) (co : coerce @bare s (arr M (arr N e))).
                             copy @(arr M (arr N e)) repr_array
                             (coerce @s @(arr M (arr N e)) accumulator)
                         ; mutateAndCopy @s @(arr M (arr N e)) (f : s -> Init (arr M (arr N e))).
                             f accumulator
                         }))
                       ret) in

              -- Transform dim2 indices to linear indices
              letfun
                linearized_updater
                  (f : updF) (ix : i2) (tok_in : EffTok) (ret : OutPtr s)
                  -> EffTok =
                  case ix of pyonTuple2 @(index dim2) @i
                             (arr_ix : index dim2) (val : i).
                  case arr_ix of pyonTuple2 @(Stored int) @(Stored int)
                                 (ix_y : Stored int) (ix_x : Stored int).
                  case ix_y of stored @int (u_ix_y : int).
                  case ix_x of stored @int (u_ix_x : int).

                  -- Drop values whose indices are out of bounds due to alignment
                  let zeroed_ix_y : int = u_ix_y -# lb_y in
                  let zeroed_ix_x : int = u_ix_x -# lb_x in
                  if zeroed_ix_y %# stride_y /=# 0 then tok_in else
                  if zeroed_ix_x %# stride_x /=# 0 then tok_in else
                  let linearized_ix_y : int = zeroed_ix_y //# stride_y in
                  let linearized_ix_x : int = zeroed_ix_x //# stride_x in
                  case boxed @i2 (pyonTuple2 @(index dim2) @i
                                  (pyonTuple2 @(Stored int) @(Stored int)
                                   (stored @int linearized_ix_y) (stored @int linearized_ix_x))
                                  (copy @i repr_i val)) of
                    boxed @i2 (new_ix : i2).
                  updater f new_ix tok_in ret
              in

              ref @ret_type
              (mk_scatter @(array2 e) @i2 @s @iniF @updF
               repr_s
               initializer
               linearized_updater
               combiner
               array_finalizer
               make_updater
               make_init)
              ret)
           ret)) of
    boxed @(Ref ret_type) (s_retval : Ref ret_type).
  case s_retval of ref @ret_type (retval : ret_type).
  retval;


barray2Scatter @(a i : bare)
  (repr_i : Repr i)
  (repr_a : Repr a)
  (dom : dim2)
  (reduction_op : Scatter (StuckRef (BoxedType a)) i)
  -> Scatter (barray2 a) (PyonTuple2 (index dim2) i) =
  let type boxed_a = StuckRef (BoxedType a) in
  let type i2 = PyonTuple2 (index dim2) i in

  -- Use array2Scatter
  case array2Scatter @boxed_a @i
       repr_i (repr_StuckRef @(BoxedType a)) dom reduction_op of
    mk_scatter @(array2 boxed_a) @i2 @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s (array2 boxed_a))
    (make_updater : i2 -> updF)
    (make_init : iniF).

  -- Wrap with barray2
  let repr_array_a : Repr (array2 boxed_a) =
        repr_array2 @boxed_a (repr_StuckRef @(BoxedType a)) in

  let barray_finalizer : UpdateInPlaceFinalizer s (barray2 a) =
        case finalizer of {
          mutateInPlace @s @(array2 boxed_a)
          (co : coerce @bare s (array2 boxed_a)).
            mutateAndCopy @s @(barray2 a)
            (\ (x : s) -> Init (barray2 a).
               mk_barray2 @a
               (copy @(array2 boxed_a) repr_array_a
                (coerce @s @(array2 boxed_a) x)))
        ; mutateAndCopy @s @(array2 boxed_a) (f : s -> Init (array2 boxed_a)).
            mutateAndCopy @s @(barray2 a)
            (\ (x : s) -> Init (barray2 a). mk_barray2 @a (f x))
        } in

  mk_scatter @(barray2 a) @i2 @s @iniF @updF repr_s initializer updater combiner
  barray_finalizer make_updater make_init;


array3Scatter @(e i : bare)
  (repr_i : Repr i)
  (repr_e : Repr e)
  (dom : dim3)
  (reduction_op : Scatter e i)
  -> Scatter (array3 e) (PyonTuple2 (index dim3) i) =

  let type i3 = (PyonTuple2 (index dim3) i) in
  let type ret_type = Scatter (array3 e) i3 in

  let repr_i3 : Repr i3 =
        repr_PyonTuple2 @(index dim3) @i repr_index3 repr_i in

  -- Compute array size
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case boxed @(Ref ret_type)
       (dim1ToArrayDesc @(Ref ret_type) dom_z
        (\ @(L : intindex) (lb_z : int) (stride_z : int) (count_z : FIInt L)
           (ret : OutPtr (Ref ret_type))
           -> Store.
           dim1ToArrayDesc @(Ref ret_type) dom_y
           (\ @(M : intindex) (lb_y : int) (stride_y : int) (count_y : FIInt M)
              (ret : OutPtr (Ref ret_type))
              -> Store.
              dim1ToArrayDesc @(Ref ret_type) dom_x
              (\ @(N : intindex) (lb_x : int) (stride_x : int) (count_x : FIInt N)
                 (ret : OutPtr (Ref ret_type))
                 -> Store.

                 let type index_1d = PyonTuple2 (Stored int) i in
                 let type index_2d = PyonTuple2 (Stored int) index_1d in
                 let type index_3d = PyonTuple2 (Stored int) index_2d in
                 let type arr1d = arr N e in
                 let type arr2d = arr M arr1d in
                 let type arr3d = arr L arr2d in

                 let repr_inner_array : Repr arr1d =
                       repr_arr @N @e count_x repr_e in
                 let repr_plane : Repr arr2d =
                       repr_arr @M @arr1d count_y repr_inner_array in
                 let repr_array : Repr arr3d =
                       repr_arr @L @arr2d count_z repr_plane in
                 let repr_inner_index : Repr index_1d =
                       repr_PyonTuple2 @(Stored int) @i repr_int repr_i in
                 let repr_plane_index : Repr index_2d =
                       repr_PyonTuple2 @(Stored int) @index_1d repr_int repr_inner_index in
                 let repr_index : Repr index_3d =
                       repr_PyonTuple2 @(Stored int) @index_2d repr_int repr_plane_index in

                 -- Create a plain array scatter reducer using three calls to
                 -- 'arrScatter'
                 let x_scatter_reduction : Scatter arr1d index_1d  =
                       arrScatter @N @e @i repr_i repr_e count_x reduction_op in
                 let xy_scatter_reduction : Scatter arr2d index_2d =
                       arrScatter @M @arr1d @index_1d
                       repr_inner_index repr_inner_array count_y x_scatter_reduction in
                 let xyz_scatter_reduction : Scatter arr3d index_3d =
                       arrScatter @L @arr2d @index_2d
                       repr_plane_index repr_plane count_z xy_scatter_reduction in

                 -- Change the index to the expected data type
                 -- Deconstruct the result.
                 let arr_scatter_reduction : Scatter arr3d i3 =
                      comapScatterIndex @arr3d @index_3d @i3
                      repr_index repr_i3 repr_array
                      (\ (index_in : i3) (ret : OutPtr index_3d) -> Store.
                         case index_in of
                           pyonTuple2 @(index dim3) @i
                           (zyx : index dim3) (val : i).
                         case zyx of
                           pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
                           (z : Stored int) (y : Stored int) (x : Stored int).
                         case z of stored @int (u_z : int).
                         case x of stored @int (u_x : int).
                         case y of stored @int (u_y : int).

                         pyonTuple2 @(Stored int) @index_2d
                         (stored @int u_z)
                         (pyonTuple2 @(Stored int) @index_1d
                          (stored @int u_y)
                          (pyonTuple2 @(Stored int) @i
                           (stored @int u_x) (copy @i repr_i val)))
                         ret)
                      xyz_scatter_reduction in
                 case arr_scatter_reduction of
                   mk_scatter @arr3d @i3 @(s : bare) @(iniF : box) @(updF : box)
                   (repr_s : Repr s)
                   (initializer : iniF -> OutPtr s -> EffTok)
                   (updater : updF -> i3 -> EffTok -> OutPtr s -> EffTok)
                   (combiner : s -> s -> Init s)
                   (finalizer : UpdateInPlaceFinalizer s arr3d)
                   (make_updater : i3 -> updF)
                   (make_init : iniF).

                 -- Create a scatter reducer that wraps it in an array
                 let array_finalizer : UpdateInPlaceFinalizer s (array3 e) =
                       mutateAndCopy @s @(array3 e)
                       (\ (accumulator : s) (ret : OutPtr (array3 e))
                          -> Store.
                          mk_array3 @e @L @M @N
                          lb_z stride_z count_z
                          lb_y stride_y count_y
                          lb_x stride_x count_x
                          (stuckBox @arr3d
                           (case finalizer of {
                              mutateInPlace @s @arr3d (co : coerce @bare s arr3d).
                                copy @arr3d repr_array
                                (coerce @s @arr3d accumulator)
                            ; mutateAndCopy @s @arr3d (f : s -> Init arr3d).
                                f accumulator
                            }))
                          ret) in

                 -- Transform dim3 indices to linear indices
                 letfun
                   linearized_updater
                     (f : updF) (ix : i3) (tok_in : EffTok) (ret : OutPtr s)
                     -> EffTok =
                     case ix of pyonTuple2 @(index dim3) @i
                                (arr_ix : index dim3) (val : i).
                     case arr_ix of pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
                                    (ix_z : Stored int) (ix_y : Stored int) (ix_x : Stored int).
                     case ix_z of stored @int (u_ix_z : int).
                     case ix_y of stored @int (u_ix_y : int).
                     case ix_x of stored @int (u_ix_x : int).

                     -- Drop values whose indices are out of bounds due to alignment
                     let zeroed_ix_z : int = u_ix_z -# lb_z in
                     let zeroed_ix_y : int = u_ix_y -# lb_y in
                     let zeroed_ix_x : int = u_ix_x -# lb_x in
                     if zeroed_ix_z %# stride_z /=# 0 then tok_in else
                     if zeroed_ix_y %# stride_y /=# 0 then tok_in else
                     if zeroed_ix_x %# stride_x /=# 0 then tok_in else
                     let linearized_ix_z : int = zeroed_ix_z //# stride_z in
                     let linearized_ix_y : int = zeroed_ix_y //# stride_y in
                     let linearized_ix_x : int = zeroed_ix_x //# stride_x in
                     case boxed @i3 (pyonTuple2 @(index dim3) @i
                                     (pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
                                      (stored @int linearized_ix_z)
                                      (stored @int linearized_ix_y)
                                      (stored @int linearized_ix_x))
                                     (copy @i repr_i val)) of
                       boxed @i3 (new_ix : i3).
                     updater f new_ix tok_in ret
                 in

                 ref @ret_type
                 (mk_scatter @(array3 e) @i3 @s @iniF @updF
                  repr_s
                  initializer
                  linearized_updater
                  combiner
                  array_finalizer
                  make_updater
                  make_init)
                 ret)
              ret)
            ret)) of
    boxed @(Ref ret_type) (s_retval : Ref ret_type).
  case s_retval of ref @ret_type (retval : ret_type).
  retval;


barray3Scatter @(a i : bare)
  (repr_i : Repr i)
  (repr_a : Repr a)
  (dom : dim3)
  (reduction_op : Scatter (StuckRef (BoxedType a)) i)
  -> Scatter (barray3 a) (PyonTuple2 (index dim3) i) =
  let type boxed_a = StuckRef (BoxedType a) in
  let type i2 = PyonTuple2 (index dim3) i in

  -- Use array3Scatter
  case array3Scatter @boxed_a @i
       repr_i (repr_StuckRef @(BoxedType a)) dom reduction_op of
    mk_scatter @(array3 boxed_a) @i2 @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s (array3 boxed_a))
    (make_updater : i2 -> updF)
    (make_init : iniF).

  -- Wrap with barray3
  let repr_array_a : Repr (array3 boxed_a) =
        repr_array3 @boxed_a (repr_StuckRef @(BoxedType a)) in

  let barray_finalizer : UpdateInPlaceFinalizer s (barray3 a) =
        case finalizer of {
          mutateInPlace @s @(array3 boxed_a)
          (co : coerce @bare s (array3 boxed_a)).
            mutateAndCopy @s @(barray3 a)
            (\ (x : s) -> Init (barray3 a).
               mk_barray3 @a
               (copy @(array3 boxed_a) repr_array_a
                (coerce @s @(array3 boxed_a) x)))
        ; mutateAndCopy @s @(array3 boxed_a) (f : s -> Init (array3 boxed_a)).
            mutateAndCopy @s @(barray3 a)
            (\ (x : s) -> Init (barray3 a). mk_barray3 @a (f x))
        } in

  mk_scatter @(barray3 a) @i2 @s @iniF @updF repr_s initializer updater combiner
  barray_finalizer make_updater make_init;


-------------------------------------------------------------------------------
-- Traversable methods

TraversableDict_Stream_build @(sh : box) @(a : bare)
  (repr : Repr a) (s : Stream sh a)
  -> Stream sh a attribute(inline) = s;


TraversableDict_Stream_traverse @(sh : box) @(a : bare)
  (repr : Repr a) (s : Stream sh a)
  -> Stream sh a attribute(inline) = s;


TraversableDict_view_list_dim_build
  @(a : bare) (repr : Repr a) (s : Stream list_dim a) -> view list_dim a
  attribute(inline) =
  case s of {
    viewStream @a (vw : view list_dim a). vw
  ; sequenceStream @a (sq : Sequence a). sequenceToView @a repr sq
  };


TraversableDict_view_list_dim_traverse
  @(a : bare) (repr : Repr a) (vw : view list_dim a) -> Stream list_dim a
  attribute(inline) =
  viewStream @a vw;


TraversableDict_view_dim0_build
  @(a : bare) (repr : Repr a) (s : Stream dim0 a) -> view dim0 a
  attribute(inline) =
  s;


TraversableDict_view_dim0_traverse
  @(a : bare) (repr : Repr a) (vw : view dim0 a) -> Stream dim0 a
  attribute(inline) =
  vw;


TraversableDict_view_dim1_build
  @(a : bare) (repr : Repr a) (s : Stream dim1 a) -> view dim1 a
  attribute(inline) =
  s;


TraversableDict_view_dim1_traverse
  @(a : bare) (repr : Repr a) (vw : view dim1 a) -> Stream dim1 a
  attribute(inline) =
  vw;


TraversableDict_view_dim2_build
  @(a : bare) (repr : Repr a) (s : Stream dim2 a) -> view dim2 a
  attribute(inline) =
  s;


TraversableDict_view_dim2_traverse
  @(a : bare) (repr : Repr a) (vw : view dim2 a) -> Stream dim2 a
  attribute(inline) =
  vw;


TraversableDict_view_dim3_build
  @(a : bare) (repr : Repr a) (s : Stream dim3 a) -> view dim3 a
  attribute(inline) =
  s;


TraversableDict_view_dim3_traverse
  @(a : bare) (repr : Repr a) (vw : view dim3 a) -> Stream dim3 a
  attribute(inline) =
  vw;


TraversableDict_list_build @(a : bare)
  (repr : Repr a) (s : Stream list_dim a) (ret : OutPtr (list a))
  -> Store attribute(inline) =
  case s of {
    sequenceStream @a (sq : Sequence a).
      Sequence_build_list @a repr sq ret
  ; viewStream @a (vw : view list_dim a).
      build_list_dim_list @a repr vw ret
  };

-- List traversal.
-- Loop over all list indices and return the corresponding array element.
TraversableDict_list_traverse @(a : bare) (rep : Repr a) (ls : list a)
  -> Stream list_dim a attribute(inline) =
  case ls of make_list @a @(N : intindex)
                       (size : FIInt N) (aref : StuckBox (arr N a)).
  case aref of stuckBox @(arr N a) (ay : arr N a).
  case size of fiInt @N (size_i : int).

  let shp : list_dim = mk_list_dim (justVal @int size_i) in

  case rep of
    repr @a
    (sa : SizeAlign a)
    (copy_a : a -> Init a)
    (to_boxed_a : Init a -> BoxedType a)
    (to_bare_a : BoxedType a -> Init a)
    (pointerless_a : bool).

  viewStream @a
  (view_generate @list_dim
   ShapeDict_list_dim @a rep shp
   (\ (si : Stored int) (ret : OutPtr a) -> Store.
     case si of stored @int (i : int).
     copy @a rep (subscript @N @a sa ay i) ret));


TraversableDict_array0_traverse
  @(a : bare) (repr : Repr a) (ay : array0 a) -> view dim0 a attribute(inline) =
  case ay of mk_array0 @a (x : a).
  view_generate @dim0 ShapeDict_dim0 @a
  repr mk_dim0
  (\ (dummy_index : Stored NoneType) -> Init a. copy @a repr x);


TraversableDict_array0_build
  @(a : bare) (repr : Repr a) (vw : view dim0 a) (ret : OutPtr (array0 a))
  -> Store attribute(inline) =

  case vw of mk_view @dim0 @a (dom : dim0) (f : Stored NoneType -> Init a).
  case boxed @(Stored NoneType) (stored @NoneType None) of
    boxed @(Stored NoneType) (dummy_index : Stored NoneType).
  mk_array0 @a (f dummy_index) ret;


TraversableDict_array1_traverse
  @(a : bare) (rep : Repr a) (ar : array1 a)
  -> view dim1 a attribute(inline) =
  case ar of
    mk_array1 @a @(N : intindex)
    (lo : int) (stride : int) (size : FIInt N)
    (ayref : StuckBox (arr N a)).
  case ayref of stuckBox @(arr N a) (ay : arr N a).
  
  let linear_map : LinearMap = linearMap stride lo in

  case rep of
    repr @a
    (sa : SizeAlign a)
    (copy_a : a -> Init a)
    (to_boxed_a : Init a -> BoxedType a)
    (to_bare_a : BoxedType a -> Init a)
    (pointerless_a : bool).

  view_generate @dim1 ShapeDict_dim1 @a rep
  (arrayDescToDim1 @N lo stride size)
  (\ (ix : Stored int) (ret : OutPtr a) -> Store.
    case ix of stored @int (ix_i : int).

    let real_ix : int = invEvalLM ix_i linear_map in
    copy @a rep (subscript @N @a sa ay real_ix) ret);


TraversableDict_array1_build
  @(a : bare) (repr : Repr a) (s : view dim1 a) (ret : OutPtr (array1 a))
  -> Store attribute(inline, inline_dimensionality) =
  build_dim1_array @a repr s ret;


TraversableDict_array2_traverse
  @(a : bare) (rep : Repr a) (ar : array2 a)
  -> view dim2 a attribute(inline) =
  case ar of
    mk_array2 @a @(M N : intindex)
    (lo_y : int) (stride_y : int) (size_y : FIInt M)
    (lo_x : int) (stride_x : int) (size_x : FIInt N)
    (ayref : StuckBox (arr M (arr N a))).
  case ayref of stuckBox @(arr M (arr N a)) (ay : arr M (arr N a)).

  let linear_map_y : LinearMap = linearMap stride_y lo_y in
  let linear_map_x : LinearMap = linearMap stride_x lo_x in
  case size_x of fiInt @N (width : int).
  let row_repr : Repr (arr N a) = repr_arr @N @a size_x rep in
  let type Sint = Stored int in

  view_generate @dim2 ShapeDict_dim2 @a rep
  (mk_dim2 (arrayDescToDim1 @M lo_y stride_y size_y)
           (arrayDescToDim1 @N lo_x stride_x size_x))
  (\ (ix : PyonTuple2 Sint Sint) (ret : OutPtr a) -> Store.
     case ix of pyonTuple2 @Sint @Sint (ix_y : Sint) (ix_x : Sint).
     case ix_y of stored @int (ix_y_i : int).
     case ix_x of stored @int (ix_x_i : int).
     let real_ix_y : int = invEvalLM ix_y_i linear_map_y in
     let real_ix_x : int = invEvalLM ix_x_i linear_map_x in
     copy @a rep 
     (subscript @N @a (reprSizeAlign @a rep)
      (subscript @M @(arr N a) (reprSizeAlign @(arr N a) row_repr) ay real_ix_y) real_ix_x)
     ret);


TraversableDict_array2_build
  @(a : bare) (repr : Repr a) (s : view dim2 a) (ret : OutPtr (array2 a))
  -> Store attribute(inline, inline_dimensionality) =
  
  case s of mk_view @dim2 @a (dom : dim2) (f : index dim2 -> Init a).
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).

  -- Compute array parameters
  dim1ToArrayDesc @(array2 a) dom_y
  (\ @(M : intindex)
     (lb_y : int) (stride_y : int) (size_y : FIInt M) (ret : OutPtr (array2 a))
     -> Store.
     dim1ToArrayDesc @(array2 a) dom_x
     (\ @(N : intindex)
        (lb_x : int) (stride_x : int) (size_x : FIInt N) (ret : OutPtr (array2 a))
        -> Store.

        let linear_map_y : LinearMap = linearMap stride_y lb_y in
        let linear_map_x : LinearMap = linearMap stride_x lb_x in
        let type out_arr = arr M (arr N a) in
        let type Sint = Stored int in

        mk_array2 @a @M @N lb_y stride_y size_y lb_x stride_x size_x
        (stuckBox @out_arr
         (arr2D_build @M @N @a repr size_y size_x
          (\ (y : int) (x : int) (ret : OutPtr a) -> Store.
             let logical_y : int = evalLM y linear_map_y in
             let logical_x : int = evalLM x linear_map_x in
             case boxed @(PyonTuple2 Sint Sint)
                  (pyonTuple2 @Sint @Sint
                   (stored @int logical_y) (stored @int logical_x)) of
               boxed @(PyonTuple2 Sint Sint) (ix : PyonTuple2 Sint Sint).

             -- Evaluate the function
             f ix ret)))
         ret)
     ret)
  ret;


TraversableDict_array3_traverse
  @(a : bare) (repr : Repr a) (ar : array3 a)
  -> view dim3 a attribute(inline) =
  case ar of
    mk_array3 @a @(L M N : intindex)
    (lo_z : int) (stride_z : int) (size_z : FIInt L)
    (lo_y : int) (stride_y : int) (size_y : FIInt M)
    (lo_x : int) (stride_x : int) (size_x : FIInt N)
    (ayref : StuckBox (arr L (arr M (arr N a)))).
  let type arr3d = arr L (arr M (arr N a)) in

  case ayref of stuckBox @arr3d (ay : arr3d).

  let linear_map_z : LinearMap = linearMap stride_z lo_z in
  let linear_map_y : LinearMap = linearMap stride_y lo_y in
  let linear_map_x : LinearMap = linearMap stride_x lo_x in
  case size_y of fiInt @M (height : int).
  case size_x of fiInt @N (width : int).
  let row_repr : Repr (arr N a) = repr_arr @N @a size_x repr in
  let plane_repr : Repr (arr M (arr N a)) =
        repr_arr @M @(arr N a) size_y row_repr in
  let type Sint = Stored int in

  view_generate @dim3 ShapeDict_dim3 @a repr
  (mk_dim3 (arrayDescToDim1 @L lo_z stride_z size_z)
           (arrayDescToDim1 @M lo_y stride_y size_y)
           (arrayDescToDim1 @N lo_x stride_x size_x))
  (\ (ix : PyonTuple3 Sint Sint Sint) (ret : OutPtr a) -> Store.
     case ix of pyonTuple3 @Sint @Sint @Sint
                (ix_z : Sint) (ix_y : Sint) (ix_x : Sint).
     case ix_z of stored @int (ix_z_i : int).
     case ix_y of stored @int (ix_y_i : int).
     case ix_x of stored @int (ix_x_i : int).
     let real_ix_z : int = invEvalLM ix_z_i linear_map_z in
     let real_ix_y : int = invEvalLM ix_y_i linear_map_y in
     let real_ix_x : int = invEvalLM ix_x_i linear_map_x in
     copy @a repr
     (subscript @N @a (reprSizeAlign @a repr)
      (subscript @M @(arr N a) (reprSizeAlign @(arr N a) row_repr)
       (subscript @L @(arr M (arr N a)) (reprSizeAlign @(arr M (arr N a)) plane_repr) ay real_ix_z)
       real_ix_y)
      real_ix_x)
     ret);


TraversableDict_array3_build
  @(a : bare) (repr : Repr a) (s : view dim3 a) (ret : OutPtr (array3 a))
  -> Store attribute(inline, inline_dimensionality) =

  case s of mk_view @dim3 @a (dom : dim3) (f : index dim3 -> Init a).
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).

  -- Compute array parameters
  dim1ToArrayDesc @(array3 a) dom_z
  (\ @(L : intindex)
     (lb_z : int) (stride_z : int) (size_z : FIInt L) (ret : OutPtr (array3 a))
     -> Store.
     dim1ToArrayDesc @(array3 a) dom_y
     (\ @(M : intindex)
        (lb_y : int) (stride_y : int) (size_y : FIInt M) (ret : OutPtr (array3 a))
        -> Store.
        dim1ToArrayDesc @(array3 a) dom_x
        (\ @(N : intindex)
           (lb_x : int) (stride_x : int) (size_x : FIInt N) (ret : OutPtr (array3 a))
           -> Store.

           let linear_map_z : LinearMap = linearMap stride_z lb_z in
           let linear_map_y : LinearMap = linearMap stride_y lb_y in
           let linear_map_x : LinearMap = linearMap stride_x lb_x in
           let type out_arr = arr L (arr M (arr N a)) in
           let type Sint = Stored int in

           mk_array3 @a @L @M @N lb_z stride_z size_z
                                 lb_y stride_y size_y
                                 lb_x stride_x size_x
           (stuckBox @out_arr
            (arr3D_build @L @M @N @a repr size_z size_y size_x
             (\ (z : int) (y : int) (x : int) (ret : OutPtr a) -> Store.
                let logical_z : int = evalLM z linear_map_z in
                let logical_y : int = evalLM y linear_map_y in
                let logical_x : int = evalLM x linear_map_x in
                case boxed @(PyonTuple3 Sint Sint Sint)
                     (pyonTuple3 @Sint @Sint @Sint
                      (stored @int logical_z)
                      (stored @int logical_y) (stored @int logical_x)) of
                  boxed @(PyonTuple3 Sint Sint Sint)
                        (ix : PyonTuple3 Sint Sint Sint).

                -- Evaluate the function
                f ix ret)))
            ret)
        ret)
     ret)
  ret;


TraversableDict_blist_build @(a : bare)
  (repr : Repr a) (s : Stream list_dim a) (ret : OutPtr (blist a))
  -> Store attribute(inline) =

  let type boxed_a = StuckRef (BoxedType a) in
  let repr_boxed : Repr boxed_a = repr_StuckRef @(BoxedType a) in
  -- Wrap all sequence elements in boxes
  let s2 : Stream list_dim boxed_a =
        ShapeDict_list_dim_map @a @boxed_a repr (repr_StuckRef @(BoxedType a))
        (\ (x : a) -> Init boxed_a.
           stuckRef @(BoxedType a) (convertToBoxed @a repr (copy @a repr x)))
        s in 
  case s2 of {
    sequenceStream @boxed_a (sq : Sequence boxed_a).
      make_blist @a (Sequence_build_list @boxed_a repr_boxed sq) ret
  ; viewStream @boxed_a (vw : view list_dim boxed_a).
      make_blist @a (build_list_dim_list @boxed_a repr_boxed vw) ret
  };

-- List traversal.
-- Loop over all list indices and return the corresponding array element.
TraversableDict_blist_traverse @(a : bare) (repr : Repr a) (ls : blist a)
  -> Stream list_dim a attribute(inline) =
  let type boxed_a = StuckRef (BoxedType a) in
  case ls of make_blist @a (ls2 : list boxed_a).
  case ls2 of make_list @boxed_a @(N : intindex)
                       (size : FIInt N) (aref : StuckBox (arr N boxed_a)).
  case aref of stuckBox @(arr N boxed_a) (ay : arr N boxed_a).
  case size of fiInt @N (size_i : int).

  let shp : list_dim = mk_list_dim (justVal @int size_i) in
  let repr_box : Repr boxed_a = repr_StuckRef @(BoxedType a) in

  viewStream @a
  (view_generate @list_dim
   ShapeDict_list_dim @a repr shp
   (\ (si : Stored int) (ret : OutPtr a) -> Store.
     case si of stored @int (i : int).
     case subscript @N @boxed_a (reprSizeAlign @boxed_a repr_box) ay i of
       stuckRef @(BoxedType a) (val : BoxedType a).
     convertToBare @a repr val ret));


TraversableDict_barray1_traverse
  @(a : bare) (repr : Repr a) (ar : barray1 a)
  -> view dim1 a attribute(inline) =
  let type boxed_a = StuckRef (BoxedType a) in
  case ar of mk_barray1 @a (ar2 : array1 boxed_a).
  case ar2 of mk_array1 @boxed_a @(N : intindex)
    (lo : int) (stride : int) (size : FIInt N)
    (ayref : StuckBox (arr N boxed_a)).
  case ayref of stuckBox @(arr N boxed_a) (ay : arr N boxed_a).

  let linear_map : LinearMap = linearMap stride lo in
  let repr_box : Repr boxed_a = repr_StuckRef @(BoxedType a) in

  view_generate @dim1 ShapeDict_dim1 @a repr
  (arrayDescToDim1 @N lo stride size)
  (\ (ix : Stored int) (ret : OutPtr a) -> Store.
    case ix of stored @int (ix_i : int).

    let real_ix : int = invEvalLM ix_i linear_map in
    case subscript @N @boxed_a (reprSizeAlign @boxed_a repr_box) ay real_ix of 
      stuckRef @(BoxedType a) (val : BoxedType a).
    convertToBare @a repr val ret);


TraversableDict_barray1_build
  @(a : bare) (repr : Repr a) (s : view dim1 a) (ret : OutPtr (barray1 a))
  -> Store attribute(inline, inline_dimensionality) =
  let type boxed_a = StuckRef (BoxedType a) in
  let brepr : Repr boxed_a = repr_StuckRef @(BoxedType a) in
  mk_barray1 @a
  (build_dim1_array @boxed_a brepr
   (view_map @dim1 ShapeDict_dim1 @a @boxed_a
    repr brepr (\ (x : a) -> Init boxed_a.
                  stuckRef @(BoxedType a)
                  (convertToBoxed @a repr (copy @a repr x))) s))
  ret;


TraversableDict_barray2_traverse
  @(a : bare) (repr : Repr a) (ar : barray2 a)
  -> view dim2 a attribute(inline) =
  let type boxed_a = StuckRef (BoxedType a) in
  case ar of mk_barray2 @a (ar2 : array2 boxed_a).
  case ar2 of
    mk_array2 @boxed_a @(M N : intindex)
    (lo_y : int) (stride_y : int) (size_y : FIInt M)
    (lo_x : int) (stride_x : int) (size_x : FIInt N)
    (ayref : StuckBox (arr M (arr N boxed_a))).
  case ayref of stuckBox @(arr M (arr N boxed_a)) (ay : arr M (arr N boxed_a)).

  let linear_map_y : LinearMap = linearMap stride_y lo_y in
  let linear_map_x : LinearMap = linearMap stride_x lo_x in
  case size_x of fiInt @N (width : int).
  let box_repr : Repr boxed_a = repr_StuckRef @(BoxedType a) in
  let row_repr : Repr (arr N boxed_a) = repr_arr @N @boxed_a size_x box_repr in
  let type Sint = Stored int in

  view_generate @dim2 ShapeDict_dim2 @a repr
  (mk_dim2 (arrayDescToDim1 @M lo_y stride_y size_y)
           (arrayDescToDim1 @N lo_x stride_x size_x))
  (\ (ix : PyonTuple2 Sint Sint) (ret : OutPtr a) -> Store.
     case ix of pyonTuple2 @Sint @Sint (ix_y : Sint) (ix_x : Sint).
     case ix_y of stored @int (ix_y_i : int).
     case ix_x of stored @int (ix_x_i : int).
     let real_ix_y : int = invEvalLM ix_y_i linear_map_y in
     let real_ix_x : int = invEvalLM ix_x_i linear_map_x in
     case subscript @N @boxed_a (reprSizeAlign @boxed_a box_repr)
          (subscript @M @(arr N boxed_a) (reprSizeAlign @(arr N boxed_a) row_repr) ay real_ix_y) real_ix_x of
       stuckRef @(BoxedType a) (val : BoxedType a).
     convertToBare @a repr val ret);


TraversableDict_barray2_build
  @(a : bare) (repr : Repr a) (s : view dim2 a) (ret : OutPtr (barray2 a))
  -> Store attribute(inline, inline_dimensionality) =
  
  case s of mk_view @dim2 @a (dom : dim2) (f : index dim2 -> Init a).
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).

  -- Compute array parameters
  dim1ToArrayDesc @(barray2 a) dom_y
  (\ @(M : intindex)
     (lb_y : int) (stride_y : int) (size_y : FIInt M) (ret : OutPtr (barray2 a))
     -> Store.
     dim1ToArrayDesc @(barray2 a) dom_x
     (\ @(N : intindex)
        (lb_x : int) (stride_x : int) (size_x : FIInt N) (ret : OutPtr (barray2 a))
        -> Store.

        let linear_map_y : LinearMap = linearMap stride_y lb_y in
        let linear_map_x : LinearMap = linearMap stride_x lb_x in
        let type boxed_a = StuckRef (BoxedType a) in
        let type out_arr = arr M (arr N boxed_a) in
        let type Sint = Stored int in
        let box_repr : Repr boxed_a = repr_StuckRef @(BoxedType a) in

        mk_barray2 @a
        (mk_array2 @boxed_a @M @N lb_y stride_y size_y lb_x stride_x size_x
         (stuckBox @out_arr
          (arr2D_build @M @N @boxed_a box_repr size_y size_x
           (\ (y : int) (x : int) (ret : OutPtr boxed_a) -> Store.
              let logical_y : int = evalLM y linear_map_y in
              let logical_x : int = evalLM x linear_map_x in
              case boxed @(PyonTuple2 Sint Sint)
                   (pyonTuple2 @Sint @Sint
                    (stored @int logical_y) (stored @int logical_x)) of
                boxed @(PyonTuple2 Sint Sint) (ix : PyonTuple2 Sint Sint).

              -- Evaluate the function and box its result
              stuckRef @(BoxedType a)
                (convertToBoxed @a repr (f ix)) ret))))
         ret)
     ret)
  ret;

-------------------------------------------------------------------------------
-- Shape dictionary methods

ShapeDict_dim0 : ShapeDict dim0 =
  shapeDict @dim0
  repr_NoneType
  repr_NoneType
  ShapeDict_dim0_member
  ShapeDict_dim0_intersect
  ShapeDict_dim0_flatten
  ShapeDict_dim0_generate
  ShapeDict_dim0_map
  ShapeDict_dim0_zipWith
  ShapeDict_dim0_zipWith3
  ShapeDict_dim0_zipWith4
  ShapeDict_dim0_slice;

ShapeDict_dim0_member (d : dim0) (i : index dim0) -> bool attribute(inline) =
  True;

ShapeDict_dim0_intersect (d : dim0) (x : dim0) -> dim0 attribute(inline) =
  d;

ShapeDict_dim0_generate @(a : bare)
  (repr : Repr a) (d : dim0) (f : Stored NoneType -> Init a)
  -> Stream dim0 a attribute(inline) =
  mk_view @dim0 @a mk_dim0 f;

ShapeDict_dim0_flatten @(a : bare) (repr : Repr a) (s : Stream dim0 a)
  -> Stream list_dim a attribute(inline) =
  case s of mk_view @dim0 @a (d : dim0) (f : Stored NoneType -> Init a).

  let d : list_dim = mk_list_dim (justVal @int 1) in

  ShapeDict_list_dim_generate @a repr d
  (\ (i : Stored int) -> Init a.
    case boxed @(Stored NoneType) (stored @NoneType None) of
      boxed @(Stored NoneType) (x : Stored NoneType).
    f x);


ShapeDict_dim0_map @(a b : bare)
  (repr_a : Repr a) (repr_b : Repr b)
  (transformer : a -> Init b)
  (s : Stream dim0 a)
  -> Stream dim0 b attribute(inline) =
  case s of mk_view @dim0 @a (d : dim0) (f : Stored NoneType -> Init a).
  mk_view @dim0 @b d
  (\ (i : Stored NoneType) -> Init b.
    case boxed @a (f i) of boxed @a (x : a). transformer x);


ShapeDict_dim0_zipWith @(a b c : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c)
  (transformer : a -> b -> Init c)
  (sA : Stream dim0 a)
  (sB : Stream dim0 b)
  -> Stream dim0 c attribute(inline) =
  case sA of mk_view @dim0 @a (dA : dim0) (fA : Stored NoneType -> Init a).
  case sB of mk_view @dim0 @b (dB : dim0) (fB : Stored NoneType -> Init b).
  mk_view @dim0 @c dA
  (\ (i : Stored NoneType) -> Init c.
    case boxed @a (fA i) of boxed @a (x : a).
    case boxed @b (fB i) of boxed @b (y : b).
    transformer x y);


ShapeDict_dim0_zipWith3 @(a b c d : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (transformer : a -> b -> c -> Init d)
  (sA : Stream dim0 a)
  (sB : Stream dim0 b)
  (sC : Stream dim0 c)
  -> Stream dim0 d attribute(inline) =
  case sA of mk_view @dim0 @a (dA : dim0) (fA : Stored NoneType -> Init a).
  case sB of mk_view @dim0 @b (dB : dim0) (fB : Stored NoneType -> Init b).
  case sC of mk_view @dim0 @c (dC : dim0) (fC : Stored NoneType -> Init c).
  mk_view @dim0 @d dA
  (\ (i : Stored NoneType) -> Init d.
    case boxed @a (fA i) of boxed @a (x : a).
    case boxed @b (fB i) of boxed @b (y : b).
    case boxed @c (fC i) of boxed @c (z : c).
    transformer x y z);


ShapeDict_dim0_zipWith4 @(a b c d e : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d) (repr_e : Repr e)
  (transformer : a -> b -> c -> d -> Init e)
  (sA : Stream dim0 a)
  (sB : Stream dim0 b)
  (sC : Stream dim0 c)
  (sD : Stream dim0 d)
  -> Stream dim0 e attribute(inline) =
  case sA of mk_view @dim0 @a (dA : dim0) (fA : Stored NoneType -> Init a).
  case sB of mk_view @dim0 @b (dB : dim0) (fB : Stored NoneType -> Init b).
  case sC of mk_view @dim0 @c (dC : dim0) (fC : Stored NoneType -> Init c).
  case sD of mk_view @dim0 @d (dD : dim0) (fD : Stored NoneType -> Init d).
  mk_view @dim0 @e dA
  (\ (i : Stored NoneType) -> Init e.
    case boxed @a (fA i) of boxed @a (x : a).
    case boxed @b (fB i) of boxed @b (y : b).
    case boxed @c (fC i) of boxed @c (z : c).
    case boxed @d (fD i) of boxed @d (w : d).
    transformer x y z w);

ShapeDict_dim0_slice @(t : bare -> bare) @(a : bare)
  (has_shape : coerce @box (shape t) dim0)
  (indexable : IndexableDict t)
  (repr : Repr a)
  (container : t a)
  (sl : slice dim0)
  -> view dim0 a attribute(inline) =
  case indexable of
    indexableDict @t
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  mk_view @dim0 @a mk_dim0
  (\ (ix : Stored NoneType) -> Init a.
    at_index @a repr container (coerce @(index dim0) @(index (shape t)) ix));


ShapeDict_list_dim : ShapeDict list_dim =
  shapeDict @list_dim
  repr_int
  repr_SliceObject
  ShapeDict_list_dim_member
  ShapeDict_list_dim_intersect
  ShapeDict_list_dim_flatten
  ShapeDict_list_dim_generate
  ShapeDict_list_dim_map
  ShapeDict_list_dim_zipWith
  ShapeDict_list_dim_zipWith3
  ShapeDict_list_dim_zipWith4
  ShapeDict_list_dim_slice;


ShapeDict_list_dim_member
  (sh : list_dim) (ix : Stored int) -> bool =
  case ix of stored @int (ix_i : int).
  case sh of mk_list_dim (m_size : MaybeVal int).
  case m_size of {
    nothingVal @int. ix_i >=# 0
  ; justVal @int (size_i : int). and (ix_i >=# 0) (ix_i <# size_i)
  };


ShapeDict_list_dim_intersect (d1 : list_dim) (d2 : list_dim) -> list_dim =
  case d1 of mk_list_dim (m_size1 : MaybeVal int).
  case d2 of mk_list_dim (m_size2 : MaybeVal int).
  mk_list_dim
  (case m_size1 of {
     justVal @int (size1 : int).
       case m_size2 of {
         justVal @int (size2 : int).
           justVal @int (min_int size1 size2)
       ; nothingVal @int.
           justVal @int size1
       }
   ; nothingVal @int.
       m_size2
   });


ShapeDict_list_dim_flatten @(a : bare) (repr : Repr a) (s : Stream list_dim a)
  -> Stream list_dim a attribute(inline) = s;


ShapeDict_list_dim_generate @(a : bare)
  (repr : Repr a) (d : list_dim) (f : Stored int -> Init a)
  -> Stream list_dim a =
  viewStream @a (view_generate @list_dim
  ShapeDict_list_dim @a repr d f);


ShapeDict_list_dim_map @(a b : bare)
  (repr_a : Repr a) (repr_b : Repr b)
  (transformer : a -> Init b)
  (s : Stream list_dim a)
  -> Stream list_dim b attribute(inline) =
  case s of {
    sequenceStream @a (sq : Sequence a).
      sequenceStream @b (Sequence_map @a @b repr_a repr_b transformer sq)
  ; viewStream @a (vw : view list_dim a).
      viewStream @b
      (view_map @list_dim
       ShapeDict_list_dim @a @b repr_a repr_b transformer vw)
  };


ShapeDict_list_dim_zipWith @(a b c : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c)
  (transformer : a -> b -> Init c)
  (sA : Stream list_dim a)
  (sB : Stream list_dim b)
  -> Stream list_dim c attribute(inline) =
  case sA of {
    sequenceStream @a (sqA : Sequence a).
      let sqB : Sequence b =
            case sB of {
              sequenceStream @b (sqB : Sequence b). sqB
            ; viewStream @b (vwB : view list_dim b). viewToSequence @b repr_b vwB
            } in
      sequenceStream @c
      (Sequence_zipWith @a @b @c repr_a repr_b repr_c transformer sqA sqB)

  ; viewStream @a (vwA : view list_dim a).
      case sB of {
        sequenceStream @b (sqB : Sequence b).
          sequenceStream @c
          (Sequence_zipWith @a @b @c repr_a repr_b repr_c transformer
           (viewToSequence @a repr_a vwA) sqB)
      ; viewStream @b (vwB : view list_dim b).
          viewStream @c
          (view_zipWith @list_dim
           ShapeDict_list_dim
           @a @b @c repr_a repr_b repr_c transformer vwA vwB)
    }
  };

ShapeDict_list_dim_zipWith3 @(a b c d : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (transformer : a -> b -> c -> Init d)
  (sA : Stream list_dim a)
  (sB : Stream list_dim b)
  (sC : Stream list_dim c)
  -> Stream list_dim d attribute(inline) =
  case sA of {
    sequenceStream @a (sqA : Sequence a).
      let sqB : Sequence b =
            case sB of {
              sequenceStream @b (sqB : Sequence b). sqB
            ; viewStream @b (vwB : view list_dim b). viewToSequence @b repr_b vwB
            } in
      let sqC : Sequence c =
            case sC of {
              sequenceStream @c (sqC : Sequence c). sqC
            ; viewStream @c (vwC : view list_dim c). viewToSequence @c repr_c vwC
            } in
      sequenceStream @d
      (Sequence_zipWith3 @a @b @c @d repr_a repr_b repr_c repr_d
       transformer sqA sqB sqC)

  ; viewStream @a (vwA : view list_dim a).
      case sB of {
        sequenceStream @b (sqB : Sequence b).
          let sqC : Sequence c =
                case sC of {
                  sequenceStream @c (sqC : Sequence c). sqC
                ; viewStream @c (vwC : view list_dim c). viewToSequence @c repr_c vwC
                } in
          sequenceStream @d
          (Sequence_zipWith3 @a @b @c @d repr_a repr_b repr_c repr_d transformer
           (viewToSequence @a repr_a vwA) sqB sqC)

      ; viewStream @b (vwB : view list_dim b).
          case sC of {
            sequenceStream @c (sqC : Sequence c).
              sequenceStream @d
              (Sequence_zipWith3 @a @b @c @d
               repr_a repr_b repr_c repr_d transformer
               (viewToSequence @a repr_a vwA)
               (viewToSequence @b repr_b vwB)
               sqC)

          ; viewStream @c (vwC : view list_dim c).
              viewStream @d
              (view_zipWith3 @list_dim
               ShapeDict_list_dim
               @a @b @c @d repr_a repr_b repr_c repr_d
               transformer vwA vwB vwC)
          }
      }
  };


ShapeDict_list_dim_zipWith4 @(a b c d e : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d) (repr_e : Repr e)
  (transformer : a -> b -> c -> d -> Init e)
  (sA : Stream list_dim a)
  (sB : Stream list_dim b)
  (sC : Stream list_dim c)
  (sD : Stream list_dim d)
  -> Stream list_dim e attribute(inline) =
  case sA of {
    sequenceStream @a (sqA : Sequence a).
      let sqB : Sequence b =
            case sB of {
              sequenceStream @b (sqB : Sequence b). sqB
            ; viewStream @b (vwB : view list_dim b). viewToSequence @b repr_b vwB
            } in
      let sqC : Sequence c =
            case sC of {
              sequenceStream @c (sqC : Sequence c). sqC
            ; viewStream @c (vwC : view list_dim c). viewToSequence @c repr_c vwC
            } in
      let sqD : Sequence d =
            case sD of {
              sequenceStream @d (sqD : Sequence d). sqD
            ; viewStream @d (vwD : view list_dim d). viewToSequence @d repr_d vwD
            } in
      sequenceStream @e
      (Sequence_zipWith4 @a @b @c @d @e repr_a repr_b repr_c repr_d repr_e
       transformer sqA sqB sqC sqD)

  ; viewStream @a (vwA : view list_dim a).
      case sB of {
        sequenceStream @b (sqB : Sequence b).
          let sqC : Sequence c =
                case sC of {
                  sequenceStream @c (sqC : Sequence c). sqC
                ; viewStream @c (vwC : view list_dim c). viewToSequence @c repr_c vwC
                } in
          let sqD : Sequence d =
                case sD of {
                  sequenceStream @d (sqD : Sequence d). sqD
                ; viewStream @d (vwD : view list_dim d). viewToSequence @d repr_d vwD
                } in
          sequenceStream @e
          (Sequence_zipWith4 @a @b @c @d @e
           repr_a repr_b repr_c repr_d repr_e transformer
           (viewToSequence @a repr_a vwA) sqB sqC sqD)

      ; viewStream @b (vwB : view list_dim b).
          case sC of {
            sequenceStream @c (sqC : Sequence c).
              let sqD : Sequence d =
                    case sD of {
                      sequenceStream @d (sqD : Sequence d).
                        sqD
                    ; viewStream @d (vwD : view list_dim d).
                        viewToSequence @d repr_d vwD
                    } in
              sequenceStream @e
              (Sequence_zipWith4 @a @b @c @d @e
               repr_a repr_b repr_c repr_d repr_e transformer
               (viewToSequence @a repr_a vwA)
               (viewToSequence @b repr_b vwB)
               sqC sqD)

          ; viewStream @c (vwC : view list_dim c).
              case sD of {
                sequenceStream @d (sqD : Sequence d).
                  sequenceStream @e
                  (Sequence_zipWith4 @a @b @c @d @e
                   repr_a repr_b repr_c repr_d repr_e transformer
                   (viewToSequence @a repr_a vwA)
                   (viewToSequence @b repr_b vwB)
                   (viewToSequence @c repr_c vwC)
                   sqD)
              ; viewStream @d (vwD : view list_dim d).
                  viewStream @e
                  (view_zipWith4 @list_dim
                   ShapeDict_list_dim @a @b @c @d @e
                   repr_a repr_b repr_c repr_d repr_e
                   transformer vwA vwB vwC vwD)
              }
          }
      }
  };


ShapeDict_list_dim_slice @(t : bare -> bare) @(a : bare)
  (is_dim1 : coerce @box (shape t) list_dim)
  (indexable : IndexableDict t)
  (repr : Repr a)
  (container : t a)
  (slice_argument : slice list_dim)
  -> view list_dim a attribute(inline) =
  case indexable of
    indexableDict @t
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  -- Compute parameters of the sliced list
  case internalApplyListSlice slice_argument
       (coerce @(shape t) @list_dim (get_shape @a container)) of
    (view_domain : list_dim, view_map : LinearMap).

  view_generate @list_dim
  ShapeDict_list_dim @a repr view_domain
  (\ (i : Stored int) (ret : OutPtr a) -> Store.

    -- Compute the index in the original object that holds the value at 'i'
    let source_index : int =
          case i of stored @int (u_i : int). evalLM u_i view_map in
    case boxed @(Stored int) (stored @int source_index) of
      boxed @(Stored int) (source_s_index : Stored int).
    let s_index : index (shape t) =
          coerce @(index list_dim) @(index (shape t)) source_s_index in

    -- Retrieve the value
    at_index @a repr container s_index ret);


ShapeDict_dim1 : ShapeDict dim1 =
  shapeDict @dim1
  repr_int
  repr_SliceObject
  ShapeDict_dim1_member
  ShapeDict_dim1_intersect
  ShapeDict_dim1_flatten
  ShapeDict_dim1_generate
  ShapeDict_dim1_map
  ShapeDict_dim1_zipWith
  ShapeDict_dim1_zipWith3
  ShapeDict_dim1_zipWith4
  ShapeDict_dim1_slice;


ShapeDict_dim1_member (dom : dim1) (ix : Stored int)
  -> bool attribute(inline) =
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case ix of stored @int (ix_i : int).

  -- Point must be in the interval and in the linear map
  if inInterval ix_i iv
  then inLM ix_i lm
  else False;


ShapeDict_dim1_intersect (d : dim1) (e : dim1)
  -> dim1 attribute(inline, inline_final) =
  case d of mk_dim1 (iv1 : Interval) (m1 : LinearMap).
  case e of mk_dim1 (iv2 : Interval) (m2 : LinearMap).
  case intersectLM m1 m2 of {
    justVal @LinearMap (m3 : LinearMap).
      let iv3 : Interval = trimInterval (intersectInterval iv1 iv2) m3 in
      mk_dim1 iv3 m3
  ; nothingVal @LinearMap.
      mk_dim1 (interval (justVal @int 0) (justVal @int 0)) (linearMap 1 0)
  };


ShapeDict_dim1_flatten @(a : bare)
  (repr : Repr a) (s : Stream dim1 a) -> Stream list_dim a
  attribute(inline, inline_dimensionality) =
  case s of mk_view @dim1 @a (dom : dim1) (f : Stored int -> Init a).

  -- Compute the size of the list
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case lm of linearMap (stride : int) (alignment : int).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case case lb of {
         justVal @int (lb_i : int).
           case ub of {
             justVal @int (ub_i : int).
               -- Bounded list
               (justVal @int ((ub_i -# lb_i) //# stride),
                linearMap stride lb_i)
           ; nothingVal @int.
               -- Unbounded list
               (nothingVal @int,
                linearMap stride lb_i)
         }
       ; nothingVal @int. except @(MaybeVal int, LinearMap)
       } of
    (list_size : MaybeVal int, list_map : LinearMap).

  viewStream @a
  (view_generate @list_dim
   ShapeDict_list_dim @a
   repr (mk_list_dim list_size)
   (\ (ix : Stored int) -> Init a.
      case ix of stored @int (ix_u : int).
      case boxed @(Stored int) (stored @int (evalLM ix_u list_map)) of
        boxed @(Stored int) (ix2 : Stored int).
      f ix2));


ShapeDict_dim1_generate @(a : bare)
  (repr : Repr a) (dom : dim1) (f : index dim1 -> Init a)
  -> Stream dim1 a attribute(inline) =
  view_generate @dim1
  ShapeDict_dim1 @a repr dom f;


ShapeDict_dim1_map @(a b : bare)
  (repr_a : Repr a) (repr_b : Repr b)
  (transformer : a -> Init b)
  (s : Stream dim1 a)
  -> Stream dim1 b attribute(inline) =
  view_map @dim1
  ShapeDict_dim1 @a @b repr_a repr_b transformer s;


ShapeDict_dim1_zipWith @(a b c : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c)
  (transformer : a -> b -> Init c)
  (sa : Stream dim1 a)
  (sb : Stream dim1 b)
  -> Stream dim1 c attribute(inline) =
  view_zipWith @dim1 ShapeDict_dim1 @a @b @c
  repr_a repr_b repr_c transformer sa sb;


ShapeDict_dim1_zipWith3 @(a b c d : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (transformer : a -> b -> c -> Init d)
  (sa : Stream dim1 a)
  (sb : Stream dim1 b)
  (sc : Stream dim1 c)
  -> Stream dim1 d attribute(inline) =
  view_zipWith3 @dim1 ShapeDict_dim1 @a @b @c @d
  repr_a repr_b repr_c repr_d transformer sa sb sc;


ShapeDict_dim1_zipWith4 @(a b c d e : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (repr_e : Repr e)
  (transformer : a -> b -> c -> d -> Init e)
  (sa : Stream dim1 a)
  (sb : Stream dim1 b)
  (sc : Stream dim1 c)
  (sd : Stream dim1 d)
  -> Stream dim1 e attribute(inline) =
  view_zipWith4 @dim1 ShapeDict_dim1 @a @b @c @d @e
  repr_a repr_b repr_c repr_d repr_e transformer sa sb sc sd;


ShapeDict_dim1_slice @(t : bare -> bare) @(a : bare)
  (is_dim1 : coerce @box (shape t) dim1)
  (indexable : IndexableDict t)
  (repr : Repr a)
  (container : t a)
  (slice_argument : slice dim1)
  -> view dim1 a attribute(inline) =
  case indexable of
    indexableDict @t
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  -- Compute the slice's domain
  let dom : dim1 = coerce @(shape t) @dim1 (get_shape @a container) in
  let slice_dom : dim1 = internalApplyArraySlice slice_argument dom in

  view_generate @dim1
  ShapeDict_dim1 @a repr slice_dom
  (\ (i : index dim1) (ret : OutPtr a) -> Store.
    at_index @a repr container (coerce @(index dim1) @(index (shape t)) i) ret);


ShapeDict_dim2 : ShapeDict dim2 =
  shapeDict @dim2
  repr_index2
  repr_slice2
  ShapeDict_dim2_member
  ShapeDict_dim2_intersect
  ShapeDict_dim2_flatten
  ShapeDict_dim2_generate
  ShapeDict_dim2_map
  ShapeDict_dim2_zipWith
  ShapeDict_dim2_zipWith3
  ShapeDict_dim2_zipWith4
  ShapeDict_dim2_slice;


ShapeDict_dim2_member (dom : dim2) (ix : index dim2) -> bool =
  -- Take the conjunction of x and y membership conditions
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case ix of pyonTuple2 @(Stored int) @(Stored int)
             (ix_y : Stored int) (ix_x : Stored int).
  if ShapeDict_dim1_member dom_y ix_y
  then ShapeDict_dim1_member dom_x ix_x
  else False;


ShapeDict_dim2_intersect (domA : dim2) (domB : dim2) -> dim2 =
  -- Take the intersection in each dimension
  case domA of mk_dim2 (domA_y : dim1) (domA_x : dim1).
  case domB of mk_dim2 (domB_y : dim1) (domB_x : dim1).
  mk_dim2 (ShapeDict_dim1_intersect domA_y domB_y)
          (ShapeDict_dim1_intersect domA_x domB_x);


ShapeDict_dim2_generate @(a : bare)
  (repr : Repr a) (dom : dim2) (f : index dim2 -> Init a)
  -> Stream dim2 a attribute(inline) =
  view_generate @dim2 ShapeDict_dim2 @a repr dom f;


ShapeDict_dim2_flatten_helper
  (iv_y : Interval)
  (iv_x : Interval)
  (stride_y : int)
  (stride_x : int)
  -> (list_dim, MaybeVal int, int, int)
  attribute(inline, inline_final) =

  case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).

  -- Lower bound must be finite
  case lb_x of {
    justVal @int (lb_x_i : int).
      case ub_x of {
        justVal @int (ub_x_i : int).
          -- Domain has finite x extent
          let count_x : int = (ub_x_i -# lb_x_i) //# stride_x in

          case lb_y of {
            justVal @int (lb_y_i : int).

              -- Compute the number of points in the domain
              let list_size : MaybeVal int =
                    case ub_y of {
                      justVal @int (ub_y_i : int).
                        -- Domain is bounded on all sides
                        let count_y : int = (ub_y_i -# lb_y_i) //# stride_y in
                        justVal @int (count_x *# count_y)
                    ; nothingVal @int.

                        -- Domain is unbounded in the y-dimension
                        nothingVal @int
                    } in

              (mk_list_dim list_size, justVal @int count_x, lb_y_i, lb_x_i)
            ; nothingVal @int.
                except @(list_dim, MaybeVal int, int, int)
            }

      ; nothingVal @int.
          -- Domain has infinite x extent
          case lb_y of {
            justVal @int (lb_y_i : int).
              (mk_list_dim (nothingVal @int), nothingVal @int, lb_y_i, lb_x_i)

          ; nothingVal @int.
              except @(list_dim, MaybeVal int, int, int)
          }
      }

  ; nothingVal @int.
      except @(list_dim, MaybeVal int, int, int)
  };


ShapeDict_dim2_flatten_helper2 (i : int) (divisor : MaybeVal int) -> (int, int)
  attribute(inline, inline_final) =
  case divisor of {
    justVal @int (count_x : int). (i //# count_x, i %# count_x)
  ; nothingVal @int. (0, i)
  };

ShapeDict_dim2_flatten @(a : bare)
  (repr : Repr a) (s : Stream dim2 a) -> Stream list_dim a
  attribute(inline, inline_dimensionality) =
  case s of mk_view @dim2 @a (dom : dim2) (f : index dim2 -> Init a).
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case dom_x of mk_dim1 (iv_x : Interval) (lm_x : LinearMap).
  case dom_y of mk_dim1 (iv_y : Interval) (lm_y : LinearMap).
  case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case lm_x of linearMap (stride_x : int) (alignment_x : int).
  case lm_y of linearMap (stride_y : int) (alignment_y : int).

  -- Compute stream dimensions and indices
  case ShapeDict_dim2_flatten_helper iv_y iv_x stride_y stride_x
  of (flattened_size : list_dim, divisor : MaybeVal int, lb_y_i : int, lb_x_i : int).

  viewStream @a
  (mk_view @list_dim @a flattened_size
   (\ (si : Stored int) (ret : OutPtr a) -> Store.
      -- Linearize the index
      case si of stored @int (i : int).
      case ShapeDict_dim2_flatten_helper2 i divisor
      of (i_y : int, i_x : int).

      -- Apply the stride to get an index in the domain
      let dim2_i_y : int = lb_y_i +# i_y *# stride_y in 
      let dim2_i_x : int = lb_x_i +# i_x *# stride_x in 

      let type index2d = PyonTuple2 (Stored int) (Stored int) in
      case boxed @index2d
           (pyonTuple2 @(Stored int) @(Stored int)
            (stored @int dim2_i_y) (stored @int dim2_i_x))
      of boxed @index2d (index_2d : index2d).
      f index_2d ret));


ShapeDict_dim2_map @(a b : bare)
  (repr_a : Repr a) (repr_b : Repr b)
  (transformer : a -> Init b)
  (s : Stream dim2 a)
  -> Stream dim2 b attribute(inline) =
  view_map @dim2
  ShapeDict_dim2 @a @b repr_a repr_b transformer s;


ShapeDict_dim2_zipWith @(a b c : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c)
  (transformer : a -> b -> Init c)
  (sa : Stream dim2 a)
  (sb : Stream dim2 b)
  -> Stream dim2 c attribute(inline) =
  view_zipWith @dim2 ShapeDict_dim2 @a @b @c
  repr_a repr_b repr_c transformer sa sb;


ShapeDict_dim2_zipWith3 @(a b c d : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (transformer : a -> b -> c -> Init d)
  (sa : Stream dim2 a)
  (sb : Stream dim2 b)
  (sc : Stream dim2 c)
  -> Stream dim2 d attribute(inline) =
  view_zipWith3 @dim2 ShapeDict_dim2 @a @b @c @d
  repr_a repr_b repr_c repr_d transformer sa sb sc;


ShapeDict_dim2_zipWith4 @(a b c d e : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (repr_e : Repr e)
  (transformer : a -> b -> c -> d -> Init e)
  (sa : Stream dim2 a)
  (sb : Stream dim2 b)
  (sc : Stream dim2 c)
  (sd : Stream dim2 d)
  -> Stream dim2 e attribute(inline) =
  view_zipWith4 @dim2 ShapeDict_dim2 @a @b @c @d @e
  repr_a repr_b repr_c repr_d repr_e transformer sa sb sc sd;


ShapeDict_dim2_slice @(t : bare -> bare) @(a : bare)
  (is_dim2 : coerce @box (shape t) dim2)
  (indexable : IndexableDict t)
  (repr : Repr a)
  (container : t a)
  (slice_argument : slice dim2)
  -> view dim2 a attribute(inline) =
  case indexable of
    indexableDict @t
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  -- Compute the slice's domain
  case slice_argument of
    pyonTuple2 @SliceObject @SliceObject
    (slice_y : SliceObject) (slice_x : SliceObject).

  let dom : dim2 = coerce @(shape t) @dim2 (get_shape @a container) in
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  let slice_dom : dim2 =
        mk_dim2 (internalApplyArraySlice slice_y dom_y)
                (internalApplyArraySlice slice_x dom_x) in

  view_generate @dim2
  ShapeDict_dim2 @a repr slice_dom
  (\ (i : index dim2) (ret : OutPtr a) -> Store.
    at_index @a repr container (coerce @(index dim2) @(index (shape t)) i) ret);


ShapeDict_dim3 : ShapeDict dim3 =
  shapeDict @dim3
  repr_index3
  repr_slice3
  ShapeDict_dim3_member
  ShapeDict_dim3_intersect
  ShapeDict_dim3_flatten
  ShapeDict_dim3_generate
  ShapeDict_dim3_map
  ShapeDict_dim3_zipWith
  ShapeDict_dim3_zipWith3
  ShapeDict_dim3_zipWith4
  ShapeDict_dim3_slice;


ShapeDict_dim3_member (dom : dim3) (ix : index dim3) -> bool =
  -- Take the conjunction of x, y, z membership conditions
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case ix of pyonTuple3 @(Stored int) @(Stored int) @(Stored int)
             (ix_z : Stored int) (ix_y : Stored int) (ix_x : Stored int).
  if ShapeDict_dim1_member dom_z ix_z
  then if ShapeDict_dim1_member dom_y ix_y
       then ShapeDict_dim1_member dom_x ix_x
       else False
  else False;


ShapeDict_dim3_intersect (domA : dim3) (domB : dim3) -> dim3 =
  -- Take the intersection in each dimension
  case domA of mk_dim3 (domA_z : dim1) (domA_y : dim1) (domA_x : dim1).
  case domB of mk_dim3 (domB_z : dim1) (domB_y : dim1) (domB_x : dim1).
  mk_dim3 (ShapeDict_dim1_intersect domA_z domB_z)
          (ShapeDict_dim1_intersect domA_y domB_y)
          (ShapeDict_dim1_intersect domA_x domB_x);


ShapeDict_dim3_flatten_helper
  (iv_z : Interval)
  (iv_y : Interval)
  (iv_x : Interval)
  (stride_z : int)
  (stride_y : int)
  (stride_x : int)
  -> (list_dim, MaybeVal (MaybeVal int, int), int, int, int)
  attribute(inline, inline_final) =

  case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case iv_z of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).

  -- Lower bound must be finite
  case lb_x of {
    justVal @int (lb_x_i : int).
      case ub_x of {
        justVal @int (ub_x_i : int).
          -- Domain has finite x extent
          let count_x : int = (ub_x_i -# lb_x_i) //# stride_x in

          case lb_y of {
            justVal @int (lb_y_i : int).
              case ub_y of {
                justVal @int (ub_y_i : int).
                  -- Domain has finite y extent
                    let count_y : int = (ub_y_i -# lb_y_i) //# stride_y in
                    let count_xy : int = count_x *# count_y in
                    case lb_z of {
                      justVal @int (lb_z_i : int).

                        -- Compute the number of points in the domain
                        let list_size : MaybeVal int =
                              case ub_z of {
                                justVal @int (ub_z_i : int).
                                  -- Domain is bounded on all sides
                                  let count_z : int =
                                        (ub_z_i -# lb_z_i) //# stride_z in
                                  justVal @int (count_xy *# count_z)
                              ; nothingVal @int.

                                  -- Domain is unbounded in the z-dimension
                                  nothingVal @int
                              } in

                        (mk_list_dim list_size,
                         justVal @(MaybeVal int, int)
                         (justVal @int count_xy, count_x),
                         lb_z_i, lb_y_i, lb_x_i)

                    ; nothingVal @int.
                        except @(list_dim, MaybeVal (MaybeVal int, int),
                                 int, int, int)
                    }
                ; nothingVal @int.

                    -- Domain has infinite y extent
                    case lb_z of {
                      justVal @int (lb_z_i : int).
                        (mk_list_dim (nothingVal @int),
                         justVal @(MaybeVal int, int)
                         (nothingVal @int, count_x),
                         lb_z_i, lb_y_i, lb_x_i)
                    ; nothingVal @int.
                        except @(list_dim, MaybeVal (MaybeVal int, int),
                                 int, int, int)
                    }
                }
            ; nothingVal @int.
                except @(list_dim, MaybeVal (MaybeVal int, int), int, int, int)
            }

      ; nothingVal @int.
          -- Domain has infinite x extent
          case lb_y of {
            justVal @int (lb_y_i : int).
              case lb_z of {
                justVal @int (lb_z_i : int).
                  (mk_list_dim (nothingVal @int),
                   nothingVal @(MaybeVal int, int), lb_z_i, lb_y_i, lb_x_i)
              ; nothingVal @int.
                  except @(list_dim, MaybeVal (MaybeVal int, int),
                           int, int, int)
              }

          ; nothingVal @int.
              except @(list_dim, MaybeVal (MaybeVal int, int), int, int, int)
          }
      }

  ; nothingVal @int.
      except @(list_dim, MaybeVal (MaybeVal int, int), int, int, int)
  };


ShapeDict_dim3_flatten_helper2
  (i : int) (divisors : MaybeVal (MaybeVal int, int))
  -> (int, int, int)
  attribute(inline, inline_final) =
  case divisors of {
    justVal @(MaybeVal int, int) (divisors_yx : (MaybeVal int, int)).

      -- Finite in the X dimension
      case divisors_yx of (divisor_xy : MaybeVal int, count_x : int).
      case divisor_xy of {
        justVal @int (count_xy : int).

          -- Finite in all dimensions
          let i_xy : int = i %# count_xy in
          let i_z : int = i //# count_xy in
          (i_z, i_xy //# count_x, i_xy %# count_x)

      ; nothingVal @int.
          -- Infinite in the Y dimension
          (0, i //# count_x, i %# count_x)
      }
  ; nothingVal @(MaybeVal int, int). (0, 0, i)
  };

ShapeDict_dim3_flatten @(a : bare)
  (repr : Repr a) (s : Stream dim3 a) -> Stream list_dim a
  attribute(inline, inline_dimensionality) =
  case s of mk_view @dim3 @a (dom : dim3) (f : index dim3 -> Init a).
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case dom_z of mk_dim1 (iv_z : Interval) (lm_z : LinearMap).
  case dom_x of mk_dim1 (iv_x : Interval) (lm_x : LinearMap).
  case dom_y of mk_dim1 (iv_y : Interval) (lm_y : LinearMap).
  case iv_z of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).
  case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case lm_z of linearMap (stride_z : int) (alignment_z : int).
  case lm_x of linearMap (stride_x : int) (alignment_x : int).
  case lm_y of linearMap (stride_y : int) (alignment_y : int).

  -- Compute stream dimensions and indices
  case ShapeDict_dim3_flatten_helper iv_z iv_y iv_x stride_z stride_y stride_x
  of (flattened_size : list_dim,
      divisors : MaybeVal (MaybeVal int, int),
      lb_z_i : int, lb_y_i : int, lb_x_i : int).

  viewStream @a
  (mk_view @list_dim @a flattened_size
   (\ (si : Stored int) (ret : OutPtr a) -> Store.
      -- Linearize the index
      case si of stored @int (i : int).
      case ShapeDict_dim3_flatten_helper2 i divisors
      of (i_z : int, i_y : int, i_x : int).

      -- Apply the stride to get an index in the domain
      let dim2_i_z : int = lb_z_i +# i_z *# stride_z in 
      let dim2_i_y : int = lb_y_i +# i_y *# stride_y in 
      let dim2_i_x : int = lb_x_i +# i_x *# stride_x in 

      let type Sint = Stored int in
      let type index3d = PyonTuple3 Sint Sint Sint in
      case boxed @index3d
           (pyonTuple3 @Sint @Sint @Sint
            (stored @int dim2_i_z) (stored @int dim2_i_y) (stored @int dim2_i_x))
      of boxed @index3d (index_3d : index3d).
      f index_3d ret));


ShapeDict_dim3_generate @(a : bare)
  (repr : Repr a) (dom : dim3) (f : index dim3 -> Init a)
  -> Stream dim3 a attribute(inline) =
  view_generate @dim3 ShapeDict_dim3 @a repr dom f;


ShapeDict_dim3_map @(a b : bare)
  (repr_a : Repr a) (repr_b : Repr b)
  (transformer : a -> Init b)
  (s : Stream dim3 a)
  -> Stream dim3 b attribute(inline) =
  view_map @dim3
  ShapeDict_dim3 @a @b repr_a repr_b transformer s;


ShapeDict_dim3_zipWith @(a b c : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c)
  (transformer : a -> b -> Init c)
  (sa : Stream dim3 a)
  (sb : Stream dim3 b)
  -> Stream dim3 c attribute(inline) =
  view_zipWith @dim3 ShapeDict_dim3 @a @b @c
  repr_a repr_b repr_c transformer sa sb;


ShapeDict_dim3_zipWith3 @(a b c d : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (transformer : a -> b -> c -> Init d)
  (sa : Stream dim3 a)
  (sb : Stream dim3 b)
  (sc : Stream dim3 c)
  -> Stream dim3 d attribute(inline) =
  view_zipWith3 @dim3 ShapeDict_dim3 @a @b @c @d
  repr_a repr_b repr_c repr_d transformer sa sb sc;


ShapeDict_dim3_zipWith4 @(a b c d e : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (repr_e : Repr e)
  (transformer : a -> b -> c -> d -> Init e)
  (sa : Stream dim3 a)
  (sb : Stream dim3 b)
  (sc : Stream dim3 c)
  (sd : Stream dim3 d)
  -> Stream dim3 e attribute(inline) =
  view_zipWith4 @dim3 ShapeDict_dim3 @a @b @c @d @e
  repr_a repr_b repr_c repr_d repr_e transformer sa sb sc sd;


ShapeDict_dim3_slice @(t : bare -> bare) @(a : bare)
  (is_dim3 : coerce @box (shape t) dim3)
  (indexable : IndexableDict t)
  (repr : Repr a)
  (container : t a)
  (slice_argument : slice dim3)
  -> view dim3 a attribute(inline) =
  case indexable of
    indexableDict @t
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  -- Compute the slice's domain
  case slice_argument of
    pyonTuple3 @SliceObject @SliceObject @SliceObject
    (slice_z : SliceObject) (slice_y : SliceObject) (slice_x : SliceObject).

  let dom : dim3 = coerce @(shape t) @dim3 (get_shape @a container) in
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  let slice_dom : dim3 =
        mk_dim3 (internalApplyArraySlice slice_z dom_z)
                (internalApplyArraySlice slice_y dom_y)
                (internalApplyArraySlice slice_x dom_x) in

  view_generate @dim3
  ShapeDict_dim3 @a repr slice_dom
  (\ (i : index dim3) (ret : OutPtr a) -> Store.
    at_index @a repr container (coerce @(index dim3) @(index (shape t)) i) ret);


-------------------------------------------------------------------------------
-- Indexable dictionary functions

IndexableDict_list_at_point @(a : bare)
  (repr : Repr a) (ls : list a) (ix : Stored int) (ret : OutPtr a) -> Store
  attribute(inline) =
  case ls of make_list @a @(N : intindex)
             (n : FIInt N) (ayref : StuckBox (arr N a)).
  case ayref of stuckBox @(arr N a) (ay : arr N a).
  case ix of stored @int (ix_i : int).
  copy @a repr (subscript @N @a (reprSizeAlign @a repr) ay ix_i) ret;


IndexableDict_list_get_shape @(a : bare) (ls : list a) -> list_dim
  attribute(inline) =
  case ls of make_list @a @(N : intindex)
             (n : FIInt N) (ayref : StuckBox (arr N a)).
  case n of fiInt @N (size : int).
  mk_list_dim (justVal @int size);


IndexableDict_view_at_point @(sh : box) (dict : ShapeDict sh) ->
  (a : bare) -> Repr a -> view sh a -> index sh -> Init a =
  \ @(a : bare)
    (repr : Repr a) (vw : view sh a) (ix : index sh) -> Init a.
    case vw of mk_view @sh @a (dom : sh) (f : index sh -> Init a).
    f ix;


IndexableDict_view_get_shape @(sh : box) (dict : ShapeDict sh) ->
  (a : bare) -> view sh a -> sh =
  \ @(a : bare) (vw : view sh a) -> sh.
    case vw of mk_view @sh @a (dom : sh) (f : index sh -> Init a).
    dom;


IndexableDict_array0_at_point @(a : bare)
  (repr : Repr a) (ay : array0 a) (ix : Stored NoneType) (ret : OutPtr a)
  -> Store
  attribute(inline) =
  case ay of mk_array0 @a (x : a). copy @a repr x ret;


IndexableDict_array0_get_shape @(a : bare)
  (ay : array0 a) -> dim0
  attribute(inline) =
  mk_dim0;


IndexableDict_array1_at_point @(a : bare)
  (repr : Repr a) (ay : array1 a) (ix : Stored int) (ret : OutPtr a)
  -> Store
  attribute(inline) =
  case ay of mk_array1 @a @(N : intindex)
             (lb : int) (stride : int) (size : FIInt N)
             (ayref : StuckBox (arr N a)).
  case ayref of stuckBox @(arr N a) (ay : arr N a).

  -- Compute real array index
  case ix of stored @int (ix_i : int).
  let real_index : int = (ix_i -# lb) //# stride in
  copy @a repr (subscript @N @a (reprSizeAlign @a repr) ay real_index) ret;


IndexableDict_array1_get_shape @(a : bare)
  (ay : array1 a) -> dim1
  attribute(inline) =
  case ay of mk_array1 @a @(N : intindex)
             (lb : int) (stride : int) (size : FIInt N)
             (ayref : StuckBox (arr N a)).
  arrayDescToDim1 @N lb stride size;


IndexableDict_array2_at_point @(a : bare)
  (repr : Repr a)
  (ay : array2 a)
  (ix : PyonTuple2 (Stored int) (Stored int))
  (ret : OutPtr a)
  -> Store
  attribute(inline) =
  case ay of mk_array2 @a @(M N : intindex)
             (lb_y : int) (stride_y : int) (size_y : FIInt M)
             (lb_x : int) (stride_x : int) (size_x : FIInt N)
             (ayref : StuckBox (arr M (arr N a))).
  case ayref of stuckBox @(arr M (arr N a)) (ay : arr M (arr N a)).
  let row_repr : Repr (arr N a) = repr_arr @N @a size_x repr in

  -- Compute real array indices
  case ix of pyonTuple2 @(Stored int) @(Stored int)
             (ix_y : Stored int) (ix_x : Stored int).
  case ix_y of stored @int (ix_y_i : int).
  let real_index_y : int = (ix_y_i -# lb_y) //# stride_y in
  case ix_x of stored @int (ix_x_i : int).
  let real_index_x : int = (ix_x_i -# lb_x) //# stride_x in

  -- Copy the desired element
  copy @a repr
  (subscript @N @a (reprSizeAlign @a repr)
   (subscript @M @(arr N a) (reprSizeAlign @(arr N a) row_repr)
    ay real_index_y)
   real_index_x) ret;


IndexableDict_array2_get_shape @(a : bare)
  (ay : array2 a) -> dim2
  attribute(inline) =
  case ay of mk_array2 @a @(M N : intindex)
             (lb_y : int) (stride_y : int) (size_y : FIInt M)
             (lb_x : int) (stride_x : int) (size_x : FIInt N)
             (ayref : StuckBox (arr M (arr N a))).
  mk_dim2 (arrayDescToDim1 @M lb_y stride_y size_y)
          (arrayDescToDim1 @N lb_x stride_x size_x);


IndexableDict_blist_at_point @(a : bare)
  (repr : Repr a) (ls : blist a) (ix : Stored int) (ret : OutPtr a) -> Store
  attribute(inline) =
  let type boxed_a = StuckRef (BoxedType a) in
  case ls of make_blist @a (ls2 : list boxed_a).
  case ls2 of make_list @boxed_a @(N : intindex)
             (n : FIInt N) (ayref : StuckBox (arr N boxed_a)).
  case ayref of stuckBox @(arr N boxed_a) (ay : arr N boxed_a).
  let repr_box : Repr boxed_a = repr_StuckRef @(BoxedType a) in
  case ix of stored @int (ix_i : int).
  case subscript @N @boxed_a (reprSizeAlign @boxed_a repr_box) ay ix_i of
    stuckRef @(BoxedType a) (val : BoxedType a).
  convertToBare @a repr val ret;


IndexableDict_blist_get_shape @(a : bare) (ls : blist a) -> list_dim
  attribute(inline) =
  let type boxed_a = StuckRef (BoxedType a) in
  case ls of make_blist @a (ls2 : list boxed_a).
  case ls2 of make_list @boxed_a @(N : intindex)
              (n : FIInt N) (ayref : StuckBox (arr N boxed_a)).
  case n of fiInt @N (size : int).
  mk_list_dim (justVal @int size);


IndexableDict_barray1_at_point @(a : bare)
  (repr : Repr a) (ay : barray1 a) (ix : Stored int) (ret : OutPtr a)
  -> Store
  attribute(inline) =
  let type boxed_a = StuckRef (BoxedType a) in
  case ay of mk_barray1 @a (ay2 : array1 boxed_a).
  case ay2 of mk_array1 @boxed_a @(N : intindex)
             (lb : int) (stride : int) (size : FIInt N)
             (ayref : StuckBox (arr N boxed_a)).
  case ayref of stuckBox @(arr N boxed_a) (ay : arr N boxed_a).
  let boxed_repr : Repr boxed_a = repr_StuckRef @(BoxedType a) in

  -- Compute real array index
  case ix of stored @int (ix_i : int).
  let real_index : int = (ix_i -# lb) //# stride in
  case subscript @N @boxed_a (reprSizeAlign @boxed_a boxed_repr) ay real_index
    of stuckRef @(BoxedType a) (val : BoxedType a).
  convertToBare @a repr val ret;


IndexableDict_barray1_get_shape @(a : bare)
  (ay : barray1 a) -> dim1
  attribute(inline) =
  let type boxed_a = StuckRef (BoxedType a) in
  case ay of mk_barray1 @a (ay2 : array1 boxed_a).
  case ay2 of mk_array1 @boxed_a @(N : intindex)
             (lb : int) (stride : int) (size : FIInt N)
             (ayref : StuckBox (arr N boxed_a)).
  arrayDescToDim1 @N lb stride size;


IndexableDict_barray2_at_point @(a : bare)
  (repr : Repr a)
  (ay : barray2 a)
  (ix : PyonTuple2 (Stored int) (Stored int))
  (ret : OutPtr a)
  -> Store
  attribute(inline) =
  let type boxed_a = StuckRef (BoxedType a) in
  case ay of mk_barray2 @a (ay2 : array2 boxed_a).
  case ay2 of mk_array2 @boxed_a @(M N : intindex)
             (lb_y : int) (stride_y : int) (size_y : FIInt M)
             (lb_x : int) (stride_x : int) (size_x : FIInt N)
             (ayref : StuckBox (arr M (arr N boxed_a))).
  case ayref of stuckBox @(arr M (arr N boxed_a)) (ay : arr M (arr N boxed_a)).
  let boxed_repr : Repr boxed_a = repr_StuckRef @(BoxedType a) in
  let row_repr : Repr (arr N boxed_a) =
        repr_arr @N @boxed_a size_x boxed_repr in

  -- Compute real array indices
  case ix of pyonTuple2 @(Stored int) @(Stored int)
             (ix_y : Stored int) (ix_x : Stored int).
  case ix_y of stored @int (ix_y_i : int).
  let real_index_y : int = (ix_y_i -# lb_y) //# stride_y in
  case ix_x of stored @int (ix_x_i : int).
  let real_index_x : int = (ix_x_i -# lb_x) //# stride_x in

  -- Copy the desired element
  case subscript @N @boxed_a (reprSizeAlign @boxed_a boxed_repr)
       (subscript @M @(arr N boxed_a)
       (reprSizeAlign @(arr N boxed_a) row_repr) ay real_index_y) real_index_x
    of stuckRef @(BoxedType a) (val : BoxedType a).
  convertToBare @a repr val ret;


IndexableDict_barray2_get_shape @(a : bare)
  (ay : barray2 a) -> dim2
  attribute(inline) =
  let type boxed_a = StuckRef (BoxedType a) in 
  case ay of mk_barray2 @a (ay2 : array2 boxed_a).
  case ay2 of mk_array2 @boxed_a @(M N : intindex)
             (lb_y : int) (stride_y : int) (size_y : FIInt M)
             (lb_x : int) (stride_x : int) (size_x : FIInt N)
             (ayref : StuckBox (arr M (arr N boxed_a))).
  mk_dim2 (arrayDescToDim1 @M lb_y stride_y size_y)
          (arrayDescToDim1 @N lb_x stride_x size_x);

-------------------------------------------------------------------------------
-- High-level overloaded functions

fun_reduce @(t : bare -> bare) @(a : bare)
  (traversable : TraversableDict t)
  (shape_dict : ShapeDict (shape t))
  (repr : Repr a)
  (reducer : a -> a -> Init a)
  (init : a)
  (input : t a)
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_dimensionality) =
  let type sh = shape t in

  case traversable
  of traversableDict @t
       (traverse : (a : bare) -> Repr a -> t a -> Stream sh a)
       (build : (a : bare) -> Repr a -> Stream sh a -> Init (t a)).

  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  let s : Stream1 a = shape_flatten @a repr (traverse @a repr input) in
  case s of {
    viewStream @a (vw : view list_dim a).
      reduce_list_dim @a repr reducer init vw ret
  ; sequenceStream @a (sq : Sequence a).
      Sequence_reduce @a repr reducer init sq ret
  };


fun_reduce1 @(t : bare -> bare) @(a : bare)
  (traversable : TraversableDict t)
  (shape_dict : ShapeDict (shape t))
  (repr : Repr a)
  (reducer : a -> a -> Init a)
  (input : t a)
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_dimensionality) =
  let type sh = shape t in

  case traversable
  of traversableDict @t
       (traverse : (a : bare) -> Repr a -> t a -> Stream sh a)
       (build : (a : bare) -> Repr a -> Stream sh a -> Init (t a)).

  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  let s : Stream1 a = shape_flatten @a repr (traverse @a repr input) in
  case s of {
    viewStream @a (vw : view list_dim a).
      reduce1_list_dim @a repr reducer vw ret
  ; sequenceStream @a (sq : Sequence a).
      Sequence_reduce1 @a repr reducer sq ret
  };


fun_sum @(t : bare -> bare) @(a : bare)
  (traversable : TraversableDict t)
  (shape : ShapeDict (shape t))
  (rep : Repr a)
  (additive : AdditiveDict a)
  (src : t a)
  (ret : OutPtr a)
  -> Store
  attribute(inline) =

  case additive of
    additiveDict @a
    (add : a -> a -> Init a)
    (sub : a -> a -> Init a)
    (negate : a -> Init a)
    (zero : a).

  fun_reduce @t @a traversable shape rep add zero src ret;


fun_scatter @(t : bare -> bare) @(i r : bare)
  (shape_dict : ShapeDict (shape t))
  (traversable : TraversableDict t)
  (repr_s : Repr (t i))
  (repr_i : Repr i)
  (repr_r : Repr r)
  (op : Scatter r i)
  (src : t i)
  (ret : OutPtr r)
  -> Store
  attribute(inline) =

  let type sh = shape t in
  case traversable
  of traversableDict @t
       (traverse : (a : bare) -> Repr a -> t a -> Stream sh a)
       (build : (a : bare) -> Repr a -> Stream sh a -> Init (t a)).

  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  -- Do a sequential in-place update
  case shape_flatten @i repr_i (traverse @i repr_i src) of {
    viewStream @i (vw : view list_dim i).
      scatter_list_dim @i @r repr_i repr_r op vw ret

  ; sequenceStream @i (sq : Sequence i).
      Sequence_scatter @i @r repr_i repr_r op sq ret
  };


histogram @(sh : box)
  (shape_dict : ShapeDict sh)
  (lo_bound : int)
  (hi_bound : int)
  (input : Stream sh (Stored int))
  (ret : OutPtr (array1 (Stored int)))
  -> Store
  attribute(inline) =

  let type Sint = Stored int in
  let type SNone = Stored NoneType in
  let sr : Scatter (array1 Sint) (PyonTuple2 Sint SNone) =
        array1Scatter @Sint @SNone
        repr_NoneType
        repr_int
        (mk_dim1 (interval (justVal @int lo_bound) (justVal @int hi_bound))
                 (linearMap 1 0))
        countingScatter in

  let traversable : TraversableDict (\ (a : bare). Ref (Stream sh a)) =
        traversableDict @(\ (a : bare). Ref (Stream sh a))
        (\ @(a : bare) (repr : Repr a) (x : Ref (Stream sh a))
           -> Stream sh a.
           case x of ref @(Stream sh a) (ux : Stream sh a). ux)
        (\ @(a : bare) (repr : Repr a) (x : Stream sh a)
           -> Init (Ref (Stream sh a)).
           ref @(Stream sh a) x) in

  case boxed @(BareType (Stream sh Sint)) (ref @(Stream sh Sint) input) of
    boxed @(BareType (Stream sh Sint)) (b_input : Ref (Stream sh Sint)).

  -- For each input value x, create a tuple (x, None)
  case boxed @(BareType (Stream sh (PyonTuple2 Sint SNone)))
       (fun_map @(\ (a : bare). BareType (Stream sh a))
                @Sint @(PyonTuple2 Sint SNone)
                traversable
                shape_dict
                repr_int
                (repr_PyonTuple2 @Sint @SNone repr_int repr_NoneType)
                (\ (x : Sint) -> Init (PyonTuple2 Sint SNone).
                  pyonTuple2 @Sint @SNone
                  (copy @Sint repr_int x) (stored @NoneType None))
                b_input)
  of boxed @(BareType (Stream sh (PyonTuple2 Sint SNone)))
     (b_input2 : BareType (Stream sh (PyonTuple2 Sint SNone))).

  fun_scatter @(\ (a : bare). BareType (Stream sh a))
  @(PyonTuple2 Sint SNone) @(array1 Sint)
  shape_dict
  traversable
  (repr_Box @(Stream sh (PyonTuple2 Sint SNone)))
  (repr_PyonTuple2 @Sint @SNone repr_int repr_NoneType)
  (repr_array1 @(Stored int) repr_int)
  sr
  b_input2
  ret;


fun_indices @(sh : box) (shape_dict : ShapeDict sh) (shp : sh)
  -> Stream sh (index sh)
  attribute(inline) =

  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  shape_generate @(index sh) index_repr shp (copy @(index sh) index_repr);


fun_map @(t : bare -> bare)
        @(a b : bare)
        (traversable : TraversableDict t)
        (shape_dict : ShapeDict (shape t))
        (repr_a : Repr a)
        (repr_b : Repr b)
        (transformer : a -> Init b)
        (container : t a)
	(ret : OutPtr (t b))
        -> Store
 	attribute(inline) =
  let type sh = shape t in

  case traversable of
    traversableDict @t
    (traverse : (a : bare) -> Repr a -> t a -> Stream sh a)
    (build : (a : bare) -> Repr a -> Stream sh a -> Init (t a)).

  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  build @b repr_b
  (shape_map @a @b repr_a repr_b transformer
   (traverse @a repr_a container))
  ret;


fun_filter @(t : bare -> bare) @(a : bare)
     (traversable : TraversableDict t)
     (is_list : coerce @box (shape t) list_dim)
     (repr : Repr a)
     (predicate : a -> bool)
     (input : t a)
     (ret : OutPtr (t a))
  -> Store attribute(inline) =
  case traversable of
    traversableDict @t
    (traverse : (a : bare) -> Repr a -> t a -> Stream (shape t) a)
    (build : (a : bare) -> Repr a -> Stream (shape t) a -> Init (t a)).

  -- Traverse the input
  let input_stream : Stream1 a =
        coerce @(Stream (shape t) a) @(Stream1 a)
        (traverse @a repr input) in

  -- Guard.  For each stream element,
  -- return the element if predicate evaluates to true.
  -- Otherwise, return nothing.
  let s : Stream1 a =
        Stream1_bind @a @a repr repr input_stream
        (\ (x : a) -> Stream1 a.
           if predicate x
           then sequenceStream @a (Sequence_return @a repr (copy @a repr x))
           else sequenceStream @a (Sequence_empty @a repr)) in

  -- Build the return value
  build @a repr (coerce @(Stream1 a) @(Stream (shape t) a) s) ret;


fun_zip @(t1 t2 : bare -> bare) @(a : bare) @(b : bare)
        (traversable1 : TraversableDict t1)
        (traversable2 : TraversableDict t2)
        (equal12 : coerce @box (shape t1) (shape t2))
	(shape_dict : ShapeDict (shape t1))
        (reprA : Repr a) (reprB : Repr b)
        (inputA : t1 a) (inputB : t2 b)
  -> Stream (shape t1) (PyonTuple2 a b)
  attribute(inline) =
  case traversable1
  of traversableDict @t1
       (traverse1 : (a : bare) -> Repr a -> t1 a -> Stream (shape t1) a)
       (build1 : (a : bare) -> Repr a -> Stream (shape t1) a -> Init (t1 a)).
  case traversable2
  of traversableDict @t2
       (traverse2 : (a : bare) -> Repr a -> t2 a -> Stream (shape t2) a)
       (build2 : (a : bare) -> Repr a -> Stream (shape t2) a -> Init (t2 a)).
  let stream1 : Stream (shape t1) a = traverse1 @a reprA inputA in
  let stream2 : Stream (shape t1) b =
        coerce @(Stream (shape t2) b) @(Stream (shape t1) b)
	(traverse2 @b reprB inputB) in

  let type sh = shape t1 in
  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  letfun
    transformer (x : a) (y : b) (ret : OutPtr (PyonTuple2 a b))
    		-> Store =
      pyonTuple2 @a @b (copy @a reprA x) (copy @b reprB y) ret
  in

  shape_zipWith @a @b @(PyonTuple2 a b)
  reprA reprB (repr_PyonTuple2 @a @b reprA reprB)
  transformer stream1 stream2;

fun_zip3 @(t1 t2 t3 : bare -> bare) @(a b c : bare)
        (traversable1 : TraversableDict t1)
        (traversable2 : TraversableDict t2)
        (traversable3 : TraversableDict t3)
        (equal12 : coerce @box (shape t1) (shape t2))
        (equal23 : coerce @box (shape t2) (shape t3))
	(shape_dict : ShapeDict (shape t1))
        (reprA : Repr a) (reprB : Repr b) (reprC : Repr c)
        (inputA : t1 a) (inputB : t2 b) (inputC : t3 c)
  -> Stream (shape t1) (PyonTuple3 a b c)
  attribute(inline) =
  case traversable1
  of traversableDict @t1
       (traverse1 : (a : bare) -> Repr a -> t1 a -> Stream (shape t1) a)
       (build1 : (a : bare) -> Repr a -> Stream (shape t1) a -> Init (t1 a)).
  case traversable2
  of traversableDict @t2
       (traverse2 : (a : bare) -> Repr a -> t2 a -> Stream (shape t2) a)
       (build2 : (a : bare) -> Repr a -> Stream (shape t2) a -> Init (t2 a)).
  case traversable3
  of traversableDict @t3
       (traverse3 : (a : bare) -> Repr a -> t3 a -> Stream (shape t3) a)
       (build3 : (a : bare) -> Repr a -> Stream (shape t3) a -> Init (t3 a)).
  let stream1 : Stream (shape t1) a = traverse1 @a reprA inputA in
  let stream2 : Stream (shape t1) b =
        coerce @(Stream (shape t2) b) @(Stream (shape t1) b)
	(traverse2 @b reprB inputB) in
  let stream3 : Stream (shape t1) c =
        coerce @(Stream (shape t3) c) @(Stream (shape t1) c)
	(traverse3 @c reprC inputC) in

  let type sh = shape t1 in
  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  letfun
    transformer (x : a) (y : b) (z : c) (ret : OutPtr (PyonTuple3 a b c))
    		-> Store =
      pyonTuple3 @a @b @c (copy @a reprA x) (copy @b reprB y) (copy @c reprC z) ret
  in

  shape_zipWith3 @a @b @c @(PyonTuple3 a b c)
  reprA reprB reprC (repr_PyonTuple3 @a @b @c reprA reprB reprC)
  transformer stream1 stream2 stream3;


fun_zip4 @(t1 t2 t3 t4 : bare -> bare) @(a b c d : bare)
        (traversable1 : TraversableDict t1)
        (traversable2 : TraversableDict t2)
        (traversable3 : TraversableDict t3)
        (traversable4 : TraversableDict t4)
        (equal12 : coerce @box (shape t1) (shape t2))
        (equal23 : coerce @box (shape t2) (shape t3))
        (equal34 : coerce @box (shape t3) (shape t4))
	(shape_dict : ShapeDict (shape t1))
        (reprA : Repr a) (reprB : Repr b) (reprC : Repr c) (reprD : Repr d)
        (inputA : t1 a) (inputB : t2 b) (inputC : t3 c) (inputD : t4 d)
  -> Stream (shape t1) (PyonTuple4 a b c d)
  attribute(inline) =
  case traversable1
  of traversableDict @t1
       (traverse1 : (a : bare) -> Repr a -> t1 a -> Stream (shape t1) a)
       (build1 : (a : bare) -> Repr a -> Stream (shape t1) a -> Init (t1 a)).
  case traversable2
  of traversableDict @t2
       (traverse2 : (a : bare) -> Repr a -> t2 a -> Stream (shape t2) a)
       (build2 : (a : bare) -> Repr a -> Stream (shape t2) a -> Init (t2 a)).
  case traversable3
  of traversableDict @t3
       (traverse3 : (a : bare) -> Repr a -> t3 a -> Stream (shape t3) a)
       (build3 : (a : bare) -> Repr a -> Stream (shape t3) a -> Init (t3 a)).
  case traversable4
  of traversableDict @t4
       (traverse4 : (a : bare) -> Repr a -> t4 a -> Stream (shape t4) a)
       (build4 : (a : bare) -> Repr a -> Stream (shape t4) a -> Init (t4 a)).
  let stream1 : Stream (shape t1) a = traverse1 @a reprA inputA in
  let stream2 : Stream (shape t1) b =
        coerce @(Stream (shape t2) b) @(Stream (shape t1) b)
	(traverse2 @b reprB inputB) in
  let stream3 : Stream (shape t1) c =
        coerce @(Stream (shape t3) c) @(Stream (shape t1) c)
	(traverse3 @c reprC inputC) in
  let stream4 : Stream (shape t1) d =
        coerce @(Stream (shape t4) d) @(Stream (shape t1) d)
	(traverse4 @d reprD inputD) in

  let type sh = shape t1 in
  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  letfun
    transformer (x : a) (y : b) (z : c) (w : d) (ret : OutPtr (PyonTuple4 a b c d))
    		-> Store =
      pyonTuple4 @a @b @c @d (copy @a reprA x) (copy @b reprB y) (copy @c reprC z) (copy @d reprD w) ret
  in

  shape_zipWith4 @a @b @c @d @(PyonTuple4 a b c d)
  reprA reprB reprC reprD (repr_PyonTuple4 @a @b @c @d reprA reprB reprC reprD)
  transformer stream1 stream2 stream3 stream4;


rows @(t : bare -> bare) @(a : bare)
  (indexable : IndexableDict t)
  (shape_is_dim2 : coerce @box (shape t) dim2)
  (repr : Repr a)
  (container : t a)
  -> view dim1 (Ref (view dim1 a))
  attribute(inline) =
  case indexable of
    indexableDict @t
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).
  case coerce @(shape t) @dim2 (get_shape @a container) of
    mk_dim2 (shape_y : dim1) (shape_x : dim1).

  view_generate @dim1
  ShapeDict_dim1 @(Ref (view dim1 a))
  (repr_Box @(view dim1 a)) shape_y
  (\ (s_y : Stored int) -> Init (Ref (view dim1 a)).
    ref @(view dim1 a)
    (view_generate @dim1 ShapeDict_dim1
     @a repr shape_x
     (\ (s_x : Stored int) (ret : OutPtr a) -> Store.
       case boxed @(index dim2)
            (pyonTuple2 @(Stored int) @(Stored int)
             (copy @(Stored int) repr_int s_y)
             (copy @(Stored int) repr_int s_x)) of
         boxed @(index dim2) (ix : index dim2).
       at_index @a repr container
       (coerce @(index dim2) @(index (shape t)) ix)
       ret)));
  

cols @(t : bare -> bare) @(a : bare)
  (indexable : IndexableDict t)
  (shape_is_dim2 : coerce @box (shape t) dim2)
  (repr : Repr a)
  (container : t a)
  -> view dim1 (Ref (view dim1 a))
  attribute(inline) =
  case indexable of
    indexableDict @t
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).
  case coerce @(shape t) @dim2 (get_shape @a container) of
    mk_dim2 (shape_y : dim1) (shape_x : dim1).

  view_generate @dim1
  ShapeDict_dim1 @(Ref (view dim1 a))
  (repr_Box @(view dim1 a)) shape_x
  (\ (s_x : Stored int) -> Init (Ref (view dim1 a)).
    ref @(view dim1 a)
    (view_generate @dim1
     ShapeDict_dim1 @a repr shape_y
     (\ (s_y : Stored int) (ret : OutPtr a) -> Store.
       case boxed @(index dim2)
            (pyonTuple2 @(Stored int) @(Stored int)
             (copy @(Stored int) repr_int s_y)
             (copy @(Stored int) repr_int s_x)) of
         boxed @(index dim2) (ix : index dim2).
       at_index @a repr container
       (coerce @(index dim2) @(index (shape t)) ix)
       ret)));


outerproduct @(t u : bare -> bare) @(a b : bare)
  (traversable_t : TraversableDict t)
  (traversable_u : TraversableDict u)
  (t_is_linear : coerce @box (shape t) dim1)
  (u_is_linear : coerce @box (shape u) dim1)
  (repr_a : Repr a) (repr_b : Repr b)
  (container_t : t a)
  (container_u : u b)
  -> Stream dim2 (PyonTuple2 a b)
  attribute(inline) =

  case traversable_t
  of traversableDict @t
       (traverseT : (a : bare) -> Repr a -> t a -> Stream (shape t) a)
       (buildT : (a : bare) -> Repr a -> Stream (shape t) a -> Init (t a)).
  case traversable_u
  of traversableDict @u
       (traverseU : (a : bare) -> Repr a -> u a -> Stream (shape u) a)
       (buildU : (a : bare) -> Repr a -> Stream (shape u) a -> Init (u a)).

  let sa : Stream dim1 a =
        coerce @(Stream (shape t) a) @(Stream dim1 a)
        (traverseT @a repr_a container_t) in
  let sb : Stream dim1 b =
        coerce @(Stream (shape u) b) @(Stream dim1 b)
        (traverseU @b repr_b container_u) in

  outerproductStream @a @b repr_a repr_b sa sb;


outerproductStream @(a b : bare)
  (repr_a : Repr a) (repr_b : Repr b)
  (sa : Stream dim1 a)
  (sb : Stream dim1 b)
  -> Stream dim2 (PyonTuple2 a b)
  attribute(inline, inline_dimensionality) =

  case sa of mk_view @dim1 @a (domA : dim1) (fA : Stored int -> Init a).
  case sb of mk_view @dim1 @b (domB : dim1) (fB : Stored int -> Init b).

  let type Sint = Stored int in
  let type out_type = PyonTuple2 a b in

  view_generate @dim2 ShapeDict_dim2 @out_type
  (repr_PyonTuple2 @a @b repr_a repr_b)
  (mk_dim2 domA domB)
  (\ (ix : PyonTuple2 Sint Sint) (ret : OutPtr out_type) -> Store.

    -- Index each view with one component of the index
    case ix of pyonTuple2 @Sint @Sint (ix_y : Sint) (ix_x : Sint).
    pyonTuple2 @a @b (fA ix_y) (fB ix_x) ret);


-------------------------------------------------------------------------------
-- API functions

safeIndex @(t : bare -> bare) @(a : bare)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (repr : Repr a)
  (container : t a)
  (ix : index (shape t))
  (ret : OutPtr a)
  -> Store
  attribute(inline) =

  let type sh = shape t in
  case indexable of
    indexableDict @t
    (at_index : (a : bare) -> Repr a -> t a -> index sh -> Init a)
    (get_shape : (a : bare) -> t a -> sh).

  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  let container_shape : sh = get_shape @a container in
  if shape_member container_shape ix
  then at_index @a repr container ix ret
  else except @Store;


safeSlice @(t : bare -> bare) @(a : bare)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (repr : Repr a)
  (container : t a)
  (sl : slice (shape t))
  -> view (shape t) a
  attribute(inline) =
  
  let type sh = shape t in
  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  shape_slice @t @a (idCoercion @sh) indexable repr container sl;


len @(t : bare -> bare) @(a : bare)
  (is_linear : coerce @box (shape t) list_dim)
  (indexable : IndexableDict t)
  (container : t a)
  -> int
  attribute(inline) =
  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  let sh : list_dim = coerce @(shape t) @list_dim (get_shape @a container) in
  case sh of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal @int (n : int). n
  ; nothingVal @int. except @int
  };


width @(t : bare -> bare) @(a : bare)
  (is_2d : coerce @box (shape t) dim2)
  (indexable : IndexableDict t)
  (container : t a)
  -> int
  attribute(inline) =
  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  let sh : dim2 = coerce @(shape t) @dim2 (get_shape @a container) in
  case sh of mk_dim2 (dim_y : dim1) (dim_x : dim1).
  case dim_x of mk_dim1 (iv : Interval) (lm : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case lb of {
    justVal @int (lb_i : int).
      case ub of {
        justVal @int (ub_i : int). ub_i -# lb_i
      ; nothingVal @int. except @int
      }
    ; nothingVal @int. except @int
  };


height @(t : bare -> bare) @(a : bare)
  (is_2d : coerce @box (shape t) dim2)
  (indexable : IndexableDict t)
  (container : t a)
  -> int
  attribute(inline) =
  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  let sh : dim2 = coerce @(shape t) @dim2 (get_shape @a container) in
  case sh of mk_dim2 (dim_y : dim1) (dim_x : dim1).
  case dim_y of mk_dim1 (iv : Interval) (lm : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case lb of {
    justVal @int (lb_i : int).
      case ub of {
        justVal @int (ub_i : int). ub_i -# lb_i
      ; nothingVal @int. except @int
      }
    ; nothingVal @int. except @int
  };


range (length : int) -> Stream list_dim (Stored int)
  attribute(inline) =
  viewStream @(Stored int)
  (view_generate @list_dim ShapeDict_list_dim @(Stored int) repr_int
   (mk_list_dim (justVal @int length))
   (\ (i : Stored int) -> Init (Stored int).
      copy @(Stored int) repr_int i));


arrayRange @(sh : box) (shape : ShapeDict sh) (cartesian : CartesianDict sh)
  (lo : index sh) (hi : index sh)
  -> Stream sh (index sh)
  attribute(inline) =

  let type ix = index sh in
  case cartesian of
    cartesianDict @sh
    (has_shape : coerce @box (cartesianDomain ix) sh)
    (loBound : sh -> Init (Maybe ix))
    (hiBound : sh -> Init (Maybe ix))
    (get_stride : sh -> Init ix)
    (arrayDomain : ix -> ix -> sh)
    (displaceDomain : sh -> ix -> sh)
    (multiplyDomain : sh -> ix -> sh)
    (divideDomain : sh -> ix -> sh)
    (multiplyIndex : ix -> ix -> Init ix)
    (divideIndex : ix -> ix -> Init ix)
    (unbounded : sh).

  fun_indices @sh shape (arrayDomain lo hi);


singletonIter @(a : bare) (repr : Repr a) (w : Init a) -> Stream list_dim a
  attribute(inline) =
  viewStream @a (singleton_list_dim_view @a repr w);


singleton_list_dim_view @(a : bare) (repr : Repr a) (w : Init a)
  -> view list_dim a
  attribute(inline, inline_dimensionality) =
  view_generate @list_dim ShapeDict_list_dim @a repr
  (mk_list_dim (justVal @int 1))
  (\ (i : Stored int) -> Init a. w);


-- Helper function for stream rewriting transformations
peel_generate_bind @(a r : bare)
  (rep_a : Repr a)
  (rep_r : Repr r)
  (dom : list_dim)
  (proceed : int -> list_dim -> Init r -> Init r)
  (failure : Init r)
  (ret : OutPtr r)
  -> Store
  attribute(inline) =

  case dom of mk_list_dim (msize : MaybeVal int).
  case msize of {
    justVal @int (size : int).
      letfun
        -- Loop over each element of the domain
        loop (i : int) (ret : OutPtr r) -> Store =
          if i <# size
          then let new_dom : list_dim =
                     mk_list_dim (justVal @int (size -# i -# 1)) in

               -- Pass the index, leftover domain, and loop continuation
               -- to 'proceed'.  'proceed' will call the continuation or
               -- do its own thing.
               proceed i new_dom (loop (i +# 1)) ret
          else failure ret
      in loop 0 ret

  ; nothingVal @int.
      except @Store
  };


peel_generate @(a r : bare)
  (rep_a : Repr a)
  (rep_r : Repr r)
  (dom : list_dim)
  (proceed : list_dim -> Init r)
  (failure : Init r)
  (ret : OutPtr r)
  -> Store
  attribute(inline) =

  case dom of mk_list_dim (msize : MaybeVal int).
  case msize of {
    justVal @int (size : int).
      if size ==# 0
      then failure ret
      else let new_dom : list_dim = mk_list_dim (justVal @int (size -# 1)) in
           proceed new_dom ret

  ; nothingVal @int.
      except @Store
  };


chain @(a : bare)
  (repr : Repr a) (i1 : Stream list_dim a) (i2 : Stream list_dim a)
  -> Stream list_dim a
  attribute(inline) =
  case i1 of {
    viewStream @a (v1 : view list_dim a).
      case i2 of {
        viewStream @a (v2 : view list_dim a).
          viewStream @a (primitive_list_dim_chain @a repr v1 v2)
      ; sequenceStream @a (s2 : Sequence a).
          sequenceStream @a
          (Sequence_chain @a repr (viewToSequence @a repr v1) s2)
      }
  ; sequenceStream @a (s1 : Sequence a).
      case i2 of {
        viewStream @a (v2 : view list_dim a).
          sequenceStream @a
          (Sequence_chain @a repr s1 (viewToSequence @a repr v2))
      ; sequenceStream @a (s2 : Sequence a).
          sequenceStream @a
          (Sequence_chain @a repr s1 s2)
      }
  };

extend2D @(t : bare -> bare) @(a : bare)
  (indexable : IndexableDict t)
  (is_2d : coerce @box (shape t) dim2)
  (repr : Repr a)
  (container : t a)
  -> view dim2 a
  attribute(inline, inline_sequential) =
  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  case coerce @(shape t) @dim2 (get_shape @a container) of
    mk_dim2 (dim_y : dim1) (dim_x : dim1).
  case dim_y of mk_dim1 (y_interval : Interval) (y_linear_map : LinearMap).
  case y_interval of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case y_linear_map of linearMap (stride_y : int) (alignment_y : int).
  case dim_x of mk_dim1 (x_interval : Interval) (x_linear_map : LinearMap).
  case x_interval of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case x_linear_map of linearMap (stride_x : int) (alignment_x : int).

  -- Input must be nonempty
  if or (case lb_y of {
           justVal @int (lb_y_i : int).
             case ub_y of {
               justVal @int (ub_y_i : int). lb_y_i ==# ub_y_i
             ; nothingVal @int. False
             }
         ; nothingVal @int. False
         })
         (case lb_x of {
           justVal @int (lb_x_i : int).
             case ub_x of {
               justVal @int (ub_x_i : int). lb_x_i ==# ub_x_i
             ; nothingVal @int. False
             }
         ; nothingVal @int. False
         })
  then except @(view dim2 a) else

  -- Create a view with no bounds
  let unbounded_interval : Interval =
        interval (nothingVal @int) (nothingVal @int) in
  let dom : dim2 =
        mk_dim2 (mk_dim1 unbounded_interval y_linear_map)
                (mk_dim1 unbounded_interval x_linear_map) in

  mk_view @dim2 @a dom
  (\ (ix : PyonTuple2 (Stored int) (Stored int)) (ret : OutPtr a)
     -> Store.
     case ix of pyonTuple2 @(Stored int) @(Stored int)
                (sy : Stored int) (sx : Stored int).
     case sy of stored @int (y : int).
     case sx of stored @int (x : int).

     -- Coerce the x and y indices to be in bounds
     letfun
       coerce_to_bounds
         (i : int) (lb : MaybeVal int) (ub : MaybeVal int) (stride : int)
         -> int =
         letfun
           coerce_upper (dummy : NoneType) -> int =
             case ub of {
               justVal @int (ub_i : int).
                 if i >=# ub_i then ub_i -# stride else i
             ; nothingVal @int. i
             } in
         case lb of {
           justVal @int (lb_i : int).
             if i <# lb_i then lb_i else coerce_upper None
         ; nothingVal @int. coerce_upper None
         } in
     let real_y : int = coerce_to_bounds y lb_y ub_y stride_y in
     let real_x : int = coerce_to_bounds x lb_x ub_x stride_x in

     -- Create new index
     case boxed @(PyonTuple2 (Stored int) (Stored int))
          (pyonTuple2 @(Stored int) @(Stored int)
           (stored @int real_y) (stored @int real_x)) of
       boxed @(PyonTuple2 (Stored int) (Stored int))
             (inbounds_ix : PyonTuple2 (Stored int) (Stored int)).
     at_index @a repr container
     (coerce @(index dim2) @(index (shape t)) inbounds_ix)
     ret);


extend3D @(t : bare -> bare) @(a : bare)
  (indexable : IndexableDict t)
  (is_3d : coerce @box (shape t) dim3)
  (repr : Repr a)
  (container : t a)
  -> view dim3 a
  attribute(inline, inline_sequential) =
  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  case coerce @(shape t) @dim3 (get_shape @a container) of
    mk_dim3 (dim_z : dim1) (dim_y : dim1) (dim_x : dim1).
  case dim_z of mk_dim1 (z_interval : Interval) (z_linear_map : LinearMap).
  case z_interval of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).
  case z_linear_map of linearMap (stride_z : int) (alignment_z : int).
  case dim_y of mk_dim1 (y_interval : Interval) (y_linear_map : LinearMap).
  case y_interval of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case y_linear_map of linearMap (stride_y : int) (alignment_y : int).
  case dim_x of mk_dim1 (x_interval : Interval) (x_linear_map : LinearMap).
  case x_interval of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case x_linear_map of linearMap (stride_x : int) (alignment_x : int).

  -- Input must be nonempty
  if or (case lb_z of {
           justVal @int (lb_z_i : int).
             case ub_z of {
               justVal @int (ub_z_i : int). lb_z_i ==# ub_z_i
             ; nothingVal @int. False
             }
         ; nothingVal @int. False
         })
        (or (case lb_y of {
               justVal @int (lb_y_i : int).
                 case ub_y of {
                   justVal @int (ub_y_i : int). lb_y_i ==# ub_y_i
                 ; nothingVal @int. False
                 }
             ; nothingVal @int. False
             })
             (case lb_x of {
               justVal @int (lb_x_i : int).
                 case ub_x of {
                   justVal @int (ub_x_i : int). lb_x_i ==# ub_x_i
                 ; nothingVal @int. False
                 }
             ; nothingVal @int. False
             }))
  then except @(view dim3 a) else

  -- Create a view with no bounds
  let unbounded_interval : Interval =
        interval (nothingVal @int) (nothingVal @int) in
  let dom : dim3 =
        mk_dim3 (mk_dim1 unbounded_interval z_linear_map)
                (mk_dim1 unbounded_interval y_linear_map)
                (mk_dim1 unbounded_interval x_linear_map) in

  let type Sint = Stored int in
  mk_view @dim3 @a dom
  (\ (ix : PyonTuple3 Sint Sint Sint) (ret : OutPtr a)
     -> Store.
     case ix of pyonTuple3 @Sint @Sint @Sint
                (sz : Sint) (sy : Sint) (sx : Sint).
     case sz of stored @int (z : int).
     case sy of stored @int (y : int).
     case sx of stored @int (x : int).

     -- Coerce the indices to be in bounds
     letfun
       coerce_to_bounds
         (i : int) (lb : MaybeVal int) (ub : MaybeVal int) (stride : int)
         -> int =
         letfun
           coerce_upper (dummy : NoneType) -> int =
             case ub of {
               justVal @int (ub_i : int).
                 if i >=# ub_i then ub_i -# stride else i
             ; nothingVal @int. i
             } in
         case lb of {
           justVal @int (lb_i : int).
             if i <# lb_i then lb_i else coerce_upper None
         ; nothingVal @int. coerce_upper None
         } in
     let real_z : int = coerce_to_bounds z lb_z ub_z stride_z in
     let real_y : int = coerce_to_bounds y lb_y ub_y stride_y in
     let real_x : int = coerce_to_bounds x lb_x ub_x stride_x in

     -- Create new index
     case boxed @(PyonTuple3 Sint Sint Sint)
          (pyonTuple3 @Sint @Sint @Sint
           (stored @int real_z) (stored @int real_y) (stored @int real_x)) of
       boxed @(PyonTuple3 Sint Sint Sint)
             (inbounds_ix : PyonTuple3 Sint Sint Sint).
     at_index @a repr container
     (coerce @(index dim3) @(index (shape t)) inbounds_ix)
     ret);


boxedStencil2D @(t : bare -> bare) @(a b : bare)
  (indexable : IndexableDict t)
  (is_2d : coerce @box (shape t) dim2)
  (repr_a : Repr a)
  (repr_b : Repr b)
  (output_dom : dim2)
  (stencil_dom : dim2)
  (gen_f : view dim2 a -> Init b)
  (input : t a)
  (ret: OutPtr (barray2 b))
  -> Store
  attribute(inline, inline_final) =

  -- This function is defined in terms of stencil2D.
  let type boxed_b = StuckRef (BoxedType b) in
  let repr_boxed_b : Repr boxed_b = repr_StuckRef @(BoxedType b) in

  mk_barray2 @b
  (stencil2D @t @a @(StuckRef (BoxedType b))
   indexable is_2d repr_a repr_boxed_b
   output_dom stencil_dom
   (\ (vw : view dim2 a) (ret : OutPtr boxed_b) -> Store.

      -- Call 'gen_f' and re-box the result
      stuckRef @(BoxedType b)
      (convertToBoxed @b repr_b (gen_f vw)) ret)
   input)
  ret;


stencil2D @(t : bare -> bare) @(a b : bare)
  (indexable : IndexableDict t)
  (is_2d : coerce @box (shape t) dim2)
  (repr_a : Repr a)
  (repr_b : Repr b)
  (output_dom : dim2)
  (stencil_dom : dim2)
  (gen_f : view dim2 a -> Init b)
  (input : t a)
  (ret: OutPtr (array2 b))
  -> Store
  attribute(inline, inline_final) =

  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  let input_dom : dim2 = coerce @(shape t) @dim2 (get_shape @a input) in

  case output_dom of mk_dim2 (output_dom_y : dim1) (output_dom_x : dim1).
  case output_dom_y of mk_dim1 (output_y_iv : Interval) (output_y_lm : LinearMap).
  case output_dom_x of mk_dim1 (output_x_iv : Interval) (output_x_lm : LinearMap).
  case output_y_lm of linearMap (output_y_stride : int) (output_y_align : int).
  case output_x_lm of linearMap (output_x_stride : int) (output_x_align : int).

  case input_dom of mk_dim2 (input_dom_y : dim1) (input_dom_x : dim1).
  case input_dom_y of mk_dim1 (input_y_iv : Interval) (input_y_lm : LinearMap).
  case input_dom_x of mk_dim1 (input_x_iv : Interval) (input_x_lm : LinearMap).
  case input_y_lm of linearMap (input_y_stride : int) (input_y_align : int).
  case input_x_lm of linearMap (input_x_stride : int) (input_x_align : int).

  case stencil_dom of mk_dim2 (stencil_dom_y : dim1) (stencil_dom_x : dim1).
  case stencil_dom_y of mk_dim1 (stencil_y_iv : Interval) (stencil_y_lm : LinearMap).
  case stencil_dom_x of mk_dim1 (stencil_x_iv : Interval) (stencil_x_lm : LinearMap).
  case stencil_y_lm of linearMap (stencil_y_stride : int) (stencil_y_align : int).
  case stencil_x_lm of linearMap (stencil_x_stride : int) (stencil_x_align : int).

  -- Verify that all stencil inputs are in the input domain:

  -- 1. any linear combination of output and stencil strides must be a
  -- multiple of the input stride.
  if gcd output_y_stride stencil_y_stride %# input_y_stride /=# 0
  then except @Store else

  if gcd output_x_stride stencil_x_stride %# input_x_stride /=# 0
  then except @Store else

  -- 2. The alignment of the output plus the alignment of the stencil must be
  --    equal to the alignment of the input, modulo the input stride.
  if (output_y_align +# stencil_y_align -# input_y_align) %# input_y_stride /=# 0
  then except @Store else

  if (output_x_align +# stencil_x_align -# input_x_align) %# input_x_stride /=# 0
  then except @Store else

  -- 3. The bounds of the output range plus the bounds of the stencil range
  --    must be within the bounds of the input range.
  if not (subsetInterval (convolveInterval output_y_iv stencil_y_iv) input_y_iv)
  then except @Store else

  if not (subsetInterval (convolveInterval output_x_iv stencil_x_iv) input_x_iv)
  then except @Store else

  -- Loop over all stencil indices
  let output_view : view dim2 b =
        view_generate @dim2 ShapeDict_dim2 @b repr_b output_dom
        (\ (ix : index dim2) (ret : OutPtr b) -> Store.
           case ix of
             pyonTuple2 @(Stored int) @(Stored int)
             (ix_y : Stored int) (ix_x : Stored int).
           case ix_y of stored @int (o_y : int).
           case ix_x of stored @int (o_x : int).

           -- Apply the generator function to a view of the input array
           gen_f
           (view_generate @dim2 ShapeDict_dim2 @a repr_a stencil_dom
            (\ (s_ix : index dim2) (s_ret : OutPtr a) -> Store.
               case s_ix of
                 pyonTuple2 @(Stored int) @(Stored int)
                 (s_ix_y : Stored int) (s_ix_x : Stored int).
               case s_ix_y of stored @int (s_y : int).
               case s_ix_x of stored @int (s_x : int).

               -- The real index is the output index plus the stencil index
               case boxed @(index dim2)
                    (pyonTuple2 @(Stored int) @(Stored int)
                     (stored @int (o_y +# s_y))
                     (stored @int (o_x +# s_x))) of
                 boxed @(index dim2) (i_ix : index dim2).
               at_index @a repr_a input (coerce @(index dim2) @(index (shape t)) i_ix) s_ret))
           ret) in

  TraversableDict_array2_build @b repr_b output_view ret;


stencil3D @(t : bare -> bare) @(a b : bare)
  (indexable : IndexableDict t)
  (is_3d : coerce @box (shape t) dim3)
  (repr_a : Repr a)
  (repr_b : Repr b)
  (output_dom : dim3)
  (stencil_dom : dim3)
  (gen_f : view dim3 a -> Init b)
  (input : t a)
  (ret: OutPtr (array3 b))
  -> Store
  attribute(inline, inline_final) =

  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  let input_dom : dim3 = coerce @(shape t) @dim3 (get_shape @a input) in

  case output_dom of mk_dim3 (output_dom_z : dim1) (output_dom_y : dim1) (output_dom_x : dim1).
  case output_dom_z of mk_dim1 (output_z_iv : Interval) (output_z_lm : LinearMap).
  case output_dom_y of mk_dim1 (output_y_iv : Interval) (output_y_lm : LinearMap).
  case output_dom_x of mk_dim1 (output_x_iv : Interval) (output_x_lm : LinearMap).
  case output_z_lm of linearMap (output_z_stride : int) (output_z_align : int).
  case output_y_lm of linearMap (output_y_stride : int) (output_y_align : int).
  case output_x_lm of linearMap (output_x_stride : int) (output_x_align : int).

  case input_dom of mk_dim3 (input_dom_z : dim1) (input_dom_y : dim1) (input_dom_x : dim1).
  case input_dom_z of mk_dim1 (input_z_iv : Interval) (input_z_lm : LinearMap).
  case input_dom_y of mk_dim1 (input_y_iv : Interval) (input_y_lm : LinearMap).
  case input_dom_x of mk_dim1 (input_x_iv : Interval) (input_x_lm : LinearMap).
  case input_z_lm of linearMap (input_z_stride : int) (input_z_align : int).
  case input_y_lm of linearMap (input_y_stride : int) (input_y_align : int).
  case input_x_lm of linearMap (input_x_stride : int) (input_x_align : int).

  case stencil_dom of mk_dim3 (stencil_dom_z : dim1) (stencil_dom_y : dim1) (stencil_dom_x : dim1).
  case stencil_dom_z of mk_dim1 (stencil_z_iv : Interval) (stencil_z_lm : LinearMap).
  case stencil_dom_y of mk_dim1 (stencil_y_iv : Interval) (stencil_y_lm : LinearMap).
  case stencil_dom_x of mk_dim1 (stencil_x_iv : Interval) (stencil_x_lm : LinearMap).
  case stencil_z_lm of linearMap (stencil_z_stride : int) (stencil_z_align : int).
  case stencil_y_lm of linearMap (stencil_y_stride : int) (stencil_y_align : int).
  case stencil_x_lm of linearMap (stencil_x_stride : int) (stencil_x_align : int).

  -- Verify that all stencil inputs are in the input domain:

  -- 1. any linear combination of output and stencil strides must be a
  -- multiple of the input stride.
  if gcd output_z_stride stencil_z_stride %# input_z_stride /=# 0
  then except @Store else

  if gcd output_y_stride stencil_y_stride %# input_y_stride /=# 0
  then except @Store else

  if gcd output_x_stride stencil_x_stride %# input_x_stride /=# 0
  then except @Store else

  -- 2. The alignment of the output plus the alignment of the stencil must be
  --    equal to the alignment of the input, modulo the input stride.
  if (output_z_align +# stencil_z_align -# input_z_align) %# input_z_stride /=# 0
  then except @Store else

  if (output_y_align +# stencil_y_align -# input_y_align) %# input_y_stride /=# 0
  then except @Store else

  if (output_x_align +# stencil_x_align -# input_x_align) %# input_x_stride /=# 0
  then except @Store else

  -- 3. The bounds of the output range plus the bounds of the stencil range
  --    must be within the bounds of the input range.
  if not (subsetInterval (convolveInterval output_z_iv stencil_z_iv) input_z_iv)
  then except @Store else

  if not (subsetInterval (convolveInterval output_y_iv stencil_y_iv) input_y_iv)
  then except @Store else

  if not (subsetInterval (convolveInterval output_x_iv stencil_x_iv) input_x_iv)
  then except @Store else

  -- Loop over all stencil indices
  let type Sint = Stored int in
  let output_view : view dim3 b =
        view_generate @dim3 ShapeDict_dim3 @b repr_b output_dom
        (\ (ix : index dim3) (ret : OutPtr b) -> Store.
           case ix of
             pyonTuple3 @Sint @Sint @Sint
             (ix_z : Sint) (ix_y : Sint) (ix_x : Sint).
           case ix_z of stored @int (o_z : int).
           case ix_y of stored @int (o_y : int).
           case ix_x of stored @int (o_x : int).

           -- Apply the generator function to a view of the input array
           gen_f
           (view_generate @dim3 ShapeDict_dim3 @a repr_a stencil_dom
            (\ (s_ix : index dim3) (s_ret : OutPtr a) -> Store.
               case s_ix of
                 pyonTuple3 @Sint @Sint @Sint
                 (s_ix_z : Sint) (s_ix_y : Sint) (s_ix_x : Sint).
               case s_ix_z of stored @int (s_z : int).
               case s_ix_y of stored @int (s_y : int).
               case s_ix_x of stored @int (s_x : int).

               -- The real index is the output index plus the stencil index
               case boxed @(index dim3)
                    (pyonTuple3 @Sint @Sint @Sint
                     (stored @int (o_z +# s_z))
                     (stored @int (o_y +# s_y))
                     (stored @int (o_x +# s_x))) of
                 boxed @(index dim3) (i_ix : index dim3).
               at_index @a repr_a input (coerce @(index dim3) @(index (shape t)) i_ix) s_ret))
           ret) in

  TraversableDict_array3_build @b repr_b output_view ret;

-------------------------------------------------------------------------------
-- High-level list comprehension functions

Stream1_empty @(a : bare) (repr : Repr a) -> Stream1 a attribute(inline) =
  sequenceStream @a (Sequence_empty @a repr);


Stream1_return @(a : bare) (repr : Repr a) (w : Init a) -> Stream1 a
  attribute(inline) =
  sequenceStream @a (Sequence_return @a repr w);


Stream1_guard @(a : bare) (repr : Repr a) (condition : bool) (s : Stream1 a)
  -> Stream1 a
  attribute(inline) =
  let sq : Sequence a =
        case s of {
	  viewStream @a (vw : view list_dim a). viewToSequence @a repr vw
	; sequenceStream @a (sq : Sequence a). sq
	} in
  sequenceStream @a (Sequence_guard @a repr condition sq);


Stream1_bind @(a b : bare)
  (repr_a : Repr a)
  (repr_b : Repr b)
  (s : Stream1 a)
  (t : a -> Stream1 b)
  -> Stream1 b
  attribute(inline) =
  let sq : Sequence a =
        case s of {
	  viewStream @a (vw : view list_dim a). viewToSequence @a repr_a vw
	; sequenceStream @a (sq : Sequence a). sq
	} in
  letfun
    sq_t (x : a) -> Sequence b =
      case t x of {
	  viewStream @b (vw : view list_dim b). viewToSequence @b repr_b vw
	; sequenceStream @b (sq : Sequence b). sq
      } in
  
  sequenceStream @b (Sequence_bind @a @b repr_a sq sq_t);


viewToSequence @(a : bare) (repr : Repr a) (vw : view list_dim a)
  -> Sequence a attribute(inline, inline_dimensionality) =
  case vw of
    mk_view @list_dim @a (dom : list_dim) (f : Stored int -> Init a).
      Sequence_generate @a repr dom f;


sequenceToView @(a : bare) (repr : Repr a) (sq : Sequence a)
  -> view list_dim a attribute(inline, inline_dimensionality) =
  -- Write the entire sequence to a list
  case boxed @(list a) (Sequence_list_build @a repr sq)
  of boxed @(list a) (ls : list a).

  -- Then traverse the list
  case ls of make_list @a @(N : intindex)
                       (size : FIInt N) (aref : StuckBox (arr N a)).
  case aref of stuckBox @(arr N a) (ay : arr N a).

  case size of fiInt @N (size_i : int).
  let dom : list_dim = mk_list_dim (justVal @int size_i) in
  view_generate @list_dim ShapeDict_list_dim @a repr dom
  (\ (si : Stored int) (ret : OutPtr a) -> Store.
     case si of stored @int (i : int).
     copy @a repr (subscript @N @a (reprSizeAlign @a repr) ay i) ret);


-- Given a mapping from old to new domains and from new to old indices,
-- transform a view.
view_transform @(sh : box) @(a : bare)
  (repr : Repr a)
  (transform_domain : sh -> sh)
  (transform_index : index sh -> Init (index sh))
  (vw : view sh a)
  -> view sh a
  attribute(inline, inline_dimensionality) =
  case vw of mk_view @sh @a (dom : sh) (f : index sh -> Init a).
  mk_view @sh @a (transform_domain dom)
  (\ (i : index sh) (ret : OutPtr a) -> Store.
     case boxed @(index sh) (transform_index i) of
       boxed @(index sh) (i2 : index sh).
     f i2 ret);


displaceView @(t : bare -> bare) @(a : bare)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (cartesian : CartesianDict (shape t))
  (additive : AdditiveDict (index (shape t)))
  (repr : Repr a)
  (c : t a)
  (disp : index (shape t))
  -> view (shape t) a
  attribute(inline) =

  let type sh = shape t in
  let type ix = index (shape t) in
  case cartesian of
    cartesianDict @sh
    (has_shape : coerce @box (cartesianDomain (index sh)) sh)
    (loBound : sh -> Init (Maybe ix))
    (hiBound : sh -> Init (Maybe ix))
    (get_stride : sh -> Init ix)
    (arrayDomain : ix -> ix -> sh)
    (displaceDomain : sh -> ix -> sh)
    (multiplyDomain : sh -> ix -> sh)
    (divideDomain : sh -> ix -> sh)
    (multiplyIndex : ix -> ix -> Init ix)
    (divideIndex : ix -> ix -> Init ix)
    (unbounded : sh).

  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  case additive of
    additiveDict @ix
    (add : ix -> ix -> Init ix)
    (sub : ix -> ix -> Init ix)
    (negate : ix -> Init ix)
    (zero : ix).

  -- Note that we transform from new index to old index by subtracting the
  -- displacement 
  view_generate @sh shape_dict @a repr (displaceDomain (get_shape @a c) disp)
  (\ (i : ix) (ret : OutPtr a) -> Store.
     case boxed @ix (sub i disp) of boxed @ix (i2 : ix).
     at_index @a repr c i2 ret);


multiplyView @(t : bare -> bare) @(a : bare)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (cartesian : CartesianDict (shape t))
  (additive : AdditiveDict (index (shape t)))
  (repr : Repr a)
  (c : t a)
  (scale : index (shape t))
  -> view (shape t) a
  attribute(inline) =

  let type sh = shape t in
  let type ix = index (shape t) in
  case cartesian of
    cartesianDict @sh
    (has_shape : coerce @box (cartesianDomain (index sh)) sh)
    (loBound : sh -> Init (Maybe ix))
    (hiBound : sh -> Init (Maybe ix))
    (get_stride : sh -> Init ix)
    (arrayDomain : ix -> ix -> sh)
    (displaceDomain : sh -> ix -> sh)
    (multiplyDomain : sh -> ix -> sh)
    (divideDomain : sh -> ix -> sh)
    (multiplyIndex : ix -> ix -> Init ix)
    (divideIndex : ix -> ix -> Init ix)
    (unbounded : sh).

  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  -- Note that we transform from new index to old index by dividing the
  -- scale factor 
  view_generate @sh shape_dict @a repr (multiplyDomain (get_shape @a c) scale)
  (\ (i : ix) (ret : OutPtr a) -> Store.
     case boxed @ix (divideIndex i scale) of boxed @ix (i2 : ix).
     at_index @a repr c i2 ret);


divideView @(t : bare -> bare) @(a : bare)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (cartesian : CartesianDict (shape t))
  (additive : AdditiveDict (index (shape t)))
  (repr : Repr a)
  (c : t a)
  (scale : index (shape t))
  -> view (shape t) a
  attribute(inline) =

  let type sh = shape t in
  let type ix = index (shape t) in
  case cartesian of
    cartesianDict @sh
    (has_shape : coerce @box (cartesianDomain (index sh)) sh)
    (loBound : sh -> Init (Maybe ix))
    (hiBound : sh -> Init (Maybe ix))
    (get_stride : sh -> Init ix)
    (arrayDomain : ix -> ix -> sh)
    (displaceDomain : sh -> ix -> sh)
    (multiplyDomain : sh -> ix -> sh)
    (divideDomain : sh -> ix -> sh)
    (multiplyIndex : ix -> ix -> Init ix)
    (divideIndex : ix -> ix -> Init ix)
    (unbounded : sh).

  case indexable of
    indexableDict @t 
    (at_index : (a : bare) -> Repr a -> t a -> index (shape t) -> Init a)
    (get_shape : (a : bare) -> t a -> shape t).

  -- Note that we transform from new index to old index by multiplying the
  -- scale factor.
  -- 'divideDomain' will throw an error if the scale factor is invalid.
  view_generate @sh shape_dict @a repr (divideDomain (get_shape @a c) scale)
  (\ (i : ix) (ret : OutPtr a) -> Store.
     case boxed @ix (multiplyIndex i scale) of boxed @ix (i2 : ix).
     at_index @a repr c i2 ret);

-------------------------------------------------------------------------------
-- ShapeDict-like internal functions

view_generate @(sh : box) (shape_dict : ShapeDict sh)
  -> (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> view sh a
  attribute(inline, inline_dimensionality) =

  \ @(a : bare) (repr : Repr a) (dom : sh) (f : index sh -> Init a)
    -> view sh a.
    mk_view @sh @a dom f;


view_map @(sh : box) (shape_dict : ShapeDict sh)
  -> (a b : bare) -> Repr a -> Repr b -> (a -> Init b) -> view sh a -> view sh b
  attribute(inline, inline_dimensionality) =

  \ @(a b : bare) (repr_a : Repr a) (repr_a : Repr b) (t : a -> Init b)
    (s1 : view sh a) -> view sh b.

    case s1 of mk_view @sh @a (d : sh) (f : index sh -> Init a).
    mk_view @sh @b d
    (\ (ix : index sh) (ret : OutPtr b) -> Store.
       case boxed @a (f ix) of boxed @a (x : a).
       t x ret);


view_zipWith @(sh : box)
  (shape_dict : ShapeDict sh)
  -> (a b c : bare) -> Repr a -> Repr b -> Repr c ->
     (a -> b -> Init c) ->
     view sh a ->
     view sh b ->
     view sh c
  attribute(inline, inline_dimensionality) =

  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  \ @(a b c : bare) (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c)
     (t : a -> b -> Init c)
     (sa : view sh a)
     (sb : view sh b)
     -> view sh c.
    case sa of mk_view @sh @a (dA : sh) (fA : index sh -> Init a).
    case sb of mk_view @sh @b (dB : sh) (fB : index sh -> Init b).
    let dC : sh = shape_intersect dA dB in
    mk_view @sh @c dC
    (\ (ix : index sh) (ret : OutPtr c) -> Store.
      case boxed @a (fA ix) of boxed @a (x : a).
      case boxed @b (fB ix) of boxed @b (y : b).
      t x y ret);


view_zipWith3 @(sh : box)
  (shape_dict : ShapeDict sh)
  -> (a b c d : bare) -> Repr a -> Repr b -> Repr c -> Repr d ->
     (a -> b -> c -> Init d) ->
     view sh a ->
     view sh b ->
     view sh c ->
     view sh d
  attribute(inline, inline_dimensionality) =

  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  \ @(a b c d : bare) (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
     (t : a -> b -> c -> Init d)
     (sa : view sh a)
     (sb : view sh b)
     (sc : view sh c)
     -> view sh d.
    case sa of mk_view @sh @a (dA : sh) (fA : index sh -> Init a).
    case sb of mk_view @sh @b (dB : sh) (fB : index sh -> Init b).
    case sc of mk_view @sh @c (dC : sh) (fC : index sh -> Init c).
    let dD : sh = shape_intersect (shape_intersect dA dB) dC in
    mk_view @sh @d dD
    (\ (ix : index sh) (ret : OutPtr d) -> Store.
      case boxed @a (fA ix) of boxed @a (x : a).
      case boxed @b (fB ix) of boxed @b (y : b).
      case boxed @c (fC ix) of boxed @c (z : c).
      t x y z ret);


view_zipWith4 @(sh : box)
  (shape_dict : ShapeDict sh)
  -> (a b c d e : bare) -> Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
     (a -> b -> c -> d -> Init e) ->
     view sh a ->
     view sh b ->
     view sh c ->
     view sh d ->
     view sh e
  attribute(inline, inline_dimensionality) =

  case shape_dict of shapeDict @sh
    (index_repr : Repr (index sh))
    (slice_repr : Repr (slice sh))
    (shape_member : sh -> index sh -> bool)
    (shape_intersect : sh -> sh -> sh)
    (shape_flatten : (a : bare) -> Repr a -> Stream sh a -> Stream list_dim a)
    (shape_generate : (a : bare) -> Repr a -> sh -> (index sh -> Init a) -> Stream sh a)
    (shape_map : (a b : bare) ->
                 Repr a -> Repr b ->
		 (a -> Init b) -> Stream sh a -> Stream sh b)
    (shape_zipWith : (a b c : bare) ->
    		     Repr a -> Repr b -> Repr c ->
		     (a -> b -> Init c) ->
		     Stream sh a -> Stream sh b -> Stream sh c)
    (shape_zipWith3 : (a b c d : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d ->
		      (a -> b -> c -> Init d) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d)
    (shape_zipWith4 : (a b c d e : bare) ->
    		      Repr a -> Repr b -> Repr c -> Repr d -> Repr e ->
		      (a -> b -> c -> d -> Init e) ->
		      Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e)
    (shape_slice : (t : bare -> bare) -> (a : bare) ->
    		   coerce @box (shape t) sh ->
		   IndexableDict t -> Repr a -> t a -> slice sh -> view sh a).

  \ @(a b c d e : bare)
     (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d) (repr_e : Repr e)
     (t : a -> b -> c -> d -> Init e)
     (sa : view sh a)
     (sb : view sh b)
     (sc : view sh c)
     (sd : view sh d)
     -> view sh e.
    case sa of mk_view @sh @a (dA : sh) (fA : index sh -> Init a).
    case sb of mk_view @sh @b (dB : sh) (fB : index sh -> Init b).
    case sc of mk_view @sh @c (dC : sh) (fC : index sh -> Init c).
    case sd of mk_view @sh @d (dD : sh) (fD : index sh -> Init d).
    let dE : sh =
          shape_intersect (shape_intersect (shape_intersect dA dB) dC) dD in
    mk_view @sh @e dE
    (\ (ix : index sh) (ret : OutPtr e) -> Store.
      case boxed @a (fA ix) of boxed @a (x : a).
      case boxed @b (fB ix) of boxed @b (y : b).
      case boxed @c (fC ix) of boxed @c (z : c).
      case boxed @d (fD ix) of boxed @d (w : d).
      t x y z w ret);


Sequence_map @(a b : bare) (repr_a : Repr a) (repr_b : Repr b)
          (transformer : a -> Init b) (sq : Sequence a) -> Sequence b
  attribute(inline, inline_final) =
  case sq of
    sequence @a @(st : box) (state : st) (next : st -> StreamNext st a).

  letfun
    go (state : st) -> StreamNext st b =
      case next state of {
        streamValue @st @a (next_state : st) (value : BoxedType a).
          let output_value : BoxedType b =
                case boxed @a (convertToBare @a repr_a value) of boxed @a (x : a).
		convertToBoxed @b repr_b (transformer x)
          in streamValue @st @b next_state output_value;

        streamEmpty @st @a.
          streamEmpty @st @b
      }
  in sequence @b @st state go;


Sequence_zipWith
  @(a b c : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c)
  (transformer : a -> b -> Init c)
  (sqA : Sequence a)
  (sqB : Sequence b)
  -> Sequence c
  attribute(inline, inline_final) =
  case sqA
  of sequence @a @(st_a : box)
     (state_a : st_a) (next_a : st_a -> StreamNext st_a a).
  case sqB
  of sequence @b @(st_b : box)
     (state_b : st_b) (next_b : st_b -> StreamNext st_b b).

  let type st_c = Stored (st_a, st_b) in
  
  letfun
    go (state : Boxed st_c) -> StreamNext (Boxed st_c) c =
      -- Unpack the state
      case state of boxed @st_c (u_state : st_c).
      case u_state of stored @(st_a, st_b) (i_state : (st_a, st_b)).
      case i_state of (state_a : st_a, state_b : st_b).

      -- Get next value of stream A
      case next_a state_a of {
        streamValue @st_a @a
          (next_state_a : st_a) (value_a : BoxedType a).
          
	  -- Get next value of stream B
	  case next_b state_b of {
            streamValue @st_b @b
	      (next_state_b : st_b) (value_b : BoxedType b).

	      -- Create output value
	      let value : BoxedType c =
	            case boxed @a (convertToBare @a repr_a value_a) of boxed @a (x : a).
	            case boxed @b (convertToBare @b repr_b value_b) of boxed @b (y : b).
		    convertToBoxed @c repr_c (transformer x y) in
	      let next_state : Boxed st_c =
	            boxed @st_c (stored @(st_a, st_b) (next_state_a, next_state_b)) in
	      streamValue @(Boxed st_c) @c next_state value;

	    streamEmpty @st_b @b.
	      streamEmpty @(Boxed st_c) @c
          };

	streamEmpty @st_a @a.
	  streamEmpty @(Boxed st_c) @c
      }
  in sequence @c @(Boxed st_c)
       (boxed @st_c (stored @(st_a, st_b) (state_a, state_b)))
       go;


Sequence_zipWith3
  @(a b c d : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (transformer : a -> b -> c -> Init d)
  (sqA : Sequence a)
  (sqB : Sequence b)
  (sqC : Sequence c)
  -> Sequence d
  attribute(inline, inline_final) =
  case sqA
  of sequence @a @(st_a : box)
     (state_a : st_a) (next_a : st_a -> StreamNext st_a a).
  case sqB
  of sequence @b @(st_b : box)
     (state_b : st_b) (next_b : st_b -> StreamNext st_b b).
  case sqC
  of sequence @c @(st_c : box)
     (state_c : st_c) (next_c : st_c -> StreamNext st_c c).

  let type st_d = Stored (st_a, st_b, st_c) in
  
  letfun
    go (state : Boxed st_d) -> StreamNext (Boxed st_d) d =
      -- Unpack the state
      case state of boxed @st_d (u_state : st_d).
      case u_state of stored @(st_a, st_b, st_c) (i_state : (st_a, st_b, st_c)).
      case i_state of (state_a : st_a, state_b : st_b, state_c : st_c).

      -- Get next value of stream A
      case next_a state_a of {
        streamValue @st_a @a
          (next_state_a : st_a) (value_a : BoxedType a).

	  -- Get next value of stream B
	  case next_b state_b of {
            streamValue @st_b @b
	      (next_state_b : st_b) (value_b : BoxedType b).

              -- Get next value of stream C
              case next_c state_c of {
                streamValue @st_c @c
                  (next_state_c : st_c) (value_c : BoxedType c).

                  -- Create output value
                  let value : BoxedType d =
                        case boxed @a (convertToBare @a repr_a value_a) of boxed @a (x : a).
                        case boxed @b (convertToBare @b repr_b value_b) of boxed @b (y : b).
                        case boxed @c (convertToBare @c repr_c value_c) of boxed @c (z : c).
                        convertToBoxed @d repr_d (transformer x y z) in
                  let next_state : Boxed st_d =
                        boxed @st_d (stored @(st_a, st_b, st_c) (next_state_a, next_state_b, next_state_c)) in
                  streamValue @(Boxed st_d) @d next_state value;

                  streamEmpty @st_c @c.
                    streamEmpty @(Boxed st_d) @d
                };

              streamEmpty @st_b @b.
                streamEmpty @(Boxed st_d) @d
            };

        streamEmpty @st_a @a.
          streamEmpty @(Boxed st_d) @d
      }
  in sequence @d @(Boxed st_d)
       (boxed @st_d (stored @(st_a, st_b, st_c) (state_a, state_b, state_c)))
       go;


Sequence_zipWith4
  @(a b c d e : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d) (repr_e : Repr e)
  (transformer : a -> b -> c -> d -> Init e)
  (sqA : Sequence a)
  (sqB : Sequence b)
  (sqC : Sequence c)
  (sqD : Sequence d)
  -> Sequence e
  attribute(inline, inline_final) =
  case sqA
  of sequence @a @(st_a : box)
     (state_a : st_a) (next_a : st_a -> StreamNext st_a a).
  case sqB
  of sequence @b @(st_b : box)
     (state_b : st_b) (next_b : st_b -> StreamNext st_b b).
  case sqC
  of sequence @c @(st_c : box)
     (state_c : st_c) (next_c : st_c -> StreamNext st_c c).
  case sqD
  of sequence @d @(st_d : box)
     (state_d : st_d) (next_d : st_d -> StreamNext st_d d).

  let type st_e = Stored (st_a, st_b, st_c, st_d) in
  
  letfun
    go (state : Boxed st_e) -> StreamNext (Boxed st_e) e =
      -- Unpack the state
      case state of boxed @st_e (u_state : st_e).
      case u_state of stored @(st_a, st_b, st_c, st_d) (i_state : (st_a, st_b, st_c, st_d)).
      case i_state of (state_a : st_a, state_b : st_b, state_c : st_c, state_d : st_d).

      -- Get next value of stream A
      case next_a state_a of {
        streamValue @st_a @a
          (next_state_a : st_a) (value_a : BoxedType a).

	  -- Get next value of stream B
	  case next_b state_b of {
            streamValue @st_b @b
	      (next_state_b : st_b) (value_b : BoxedType b).

              -- Get next value of stream C
              case next_c state_c of {
                streamValue @st_c @c
                  (next_state_c : st_c) (value_c : BoxedType c).

                  -- Get next value of stream D
                  case next_d state_d of {
                    streamValue @st_d @d
                      (next_state_d : st_d) (value_d : BoxedType d).

                      -- Create output value
                      let value : BoxedType e =
                            case boxed @a (convertToBare @a repr_a value_a) of boxed @a (x : a).
                            case boxed @b (convertToBare @b repr_b value_b) of boxed @b (y : b).
                            case boxed @c (convertToBare @c repr_c value_c) of boxed @c (z : c).
                            case boxed @d (convertToBare @d repr_d value_d) of boxed @d (w : d).
                            convertToBoxed @e repr_e (transformer x y z w) in
                      let next_state : Boxed st_e =
                            boxed @st_e (stored @(st_a, st_b, st_c, st_d) (next_state_a, next_state_b, next_state_c, next_state_d)) in
                      streamValue @(Boxed st_e) @e next_state value;

                      streamEmpty @st_d @d.
                        streamEmpty @(Boxed st_e) @e
                    };

                  streamEmpty @st_c @c.
                    streamEmpty @(Boxed st_e) @e
                };

              streamEmpty @st_b @b.
                streamEmpty @(Boxed st_e) @e
            };

        streamEmpty @st_a @a.
          streamEmpty @(Boxed st_e) @e
      }
  in sequence @e @(Boxed st_e)
       (boxed @st_e (stored @(st_a, st_b, st_c, st_d) (state_a, state_b, state_c, state_d)))
       go;



-------------------------------------------------------------------------------
-- View layer stream consumers

build_list_dim_list @(a : bare)
  (repr : Repr a) (vw : view list_dim a) (ret : OutPtr (list a))
  -> Store
  attribute(inline, inline_sequential) =
  case vw of
    mk_view @list_dim @a (dom : list_dim) (f : Stored int -> Init a).
  case dom of mk_list_dim (m_size : MaybeVal int).
  case m_size of {
    justVal @int (size : int).
      -- Finite view
      case defineIntIndex size of someIInt @(N : intindex) (sz : FIInt N).
      make_list @a @N sz
      (stuckBox @(arr N a)
       (arr1D_build @N @a repr sz
        (\ (i : int) (ret : OutPtr a) -> Store.
           case boxed @(Stored int) (stored @int i) of
             boxed @(Stored int) (s_i : Stored int).
           f s_i ret)))
      ret

  ; nothingVal @int.
      -- Infinte views can't be turned into lists
      except @Store
  };


build_dim1_array @(a : bare)
  (repr : Repr a) (vw : view dim1 a)
  (ret : OutPtr (array1 a))
  -> Store
  attribute(inline, inline_sequential) =

  case vw of mk_view @dim1 @a (dom : dim1) (f : Stored int -> Init a).
  dim1ToArrayDesc @(array1 a) dom
  (\ @(N : intindex)
     (lb : int) (stride : int) (size : FIInt N) (ret : OutPtr (array1 a))
     -> Store.

     let linear_map : LinearMap = linearMap stride lb in

     mk_array1 @a @N lb stride size
     (stuckBox @(arr N a)
      (arr1D_build @N @a repr size
       (\ (i : int) (ret : OutPtr a) -> Store.
           -- Compute the logical index corresponding to array index 'i'
           let logical_i : int = evalLM i linear_map in
           case boxed @(Stored int) (stored @int logical_i) of
             boxed @(Stored int) (s_i : Stored int).
           f s_i ret)))
      ret)
  ret;


reduce_list_dim @(a : bare)
  (repr : Repr a)
  (f : a -> a -> Init a)
  (init : a)
  (vw : view list_dim a)
  -> Init a
  attribute(inline, inline_dimensionality) =
  case vw of
    mk_view @list_dim @a (dom : list_dim) (gen : Stored int -> Init a).

  primitive_list_dim_reduce @a repr dom gen f init;


reduce1_list_dim @(a : bare)
  (repr : Repr a)
  (f : a -> a -> Init a)
  (vw : view list_dim a)
  -> Init a
  attribute(inline, inline_dimensionality) =
  case vw of
    mk_view @list_dim @a (dom : list_dim) (gen : Stored int -> Init a).

  primitive_list_dim_reduce1 @a repr dom gen f;


scatter_list_dim @(i r : bare)
  (repr_i : Repr i)
  (repr_r : Repr r)
  (op : Scatter r i)
  (src : view list_dim i)
  (ret : OutPtr r)
  -> Store
  attribute(inline, inline_sequential) =

  case op of
    mk_scatter @r @i @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s r)
    (make_updater : i -> updF)
    (make_init : iniF).

  letfun
    use_finalizer (w : Init s) (ret : OutPtr r) -> Store =
      case finalizer of {
        mutateInPlace @s @r (co : coerce @bare s r).
          (coerce @(Init s) @(Init r) w) ret

      ; mutateAndCopy @s @r (f : s -> Init r).
          case boxed @s w of boxed @s (tmp : s).
          f tmp ret
      } in

  -- Perform the computation; copy to output if required
  use_finalizer
  (\ (local_ret : OutPtr s) -> Store.
   -- Initialize the output
   case boxed @(Stored EffTok)
        (stored @EffTok (initializer make_init local_ret)) of
     boxed @(Stored EffTok) (init_eff_tok : Stored EffTok).

   -- Sequential in-place update
   case boxed @(Stored EffTok)
        (fold_list_dim @i @(Stored EffTok)
         repr_i repr_EffTok
         (\ (x : Stored EffTok) (y : i) (loop_ret : OutPtr (Stored EffTok))
            -> Store.
            case x of stored @EffTok (x_u : EffTok).
            stored @EffTok (updater (make_updater y) y x_u local_ret) loop_ret)
         init_eff_tok
         src) of
     boxed @(Stored EffTok) (s_final_eff_tok : Stored EffTok).

   -- Translate to a return value
   case s_final_eff_tok of stored @EffTok (final_eff_tok : EffTok).
     fromEffTok @s final_eff_tok)
  ret;


fold_list_dim @(a acc : bare)
  (repr_a : Repr a)
  (repr_acc : Repr acc)
  (f : acc -> a -> Init acc)
  (init : acc)
  (vw : view list_dim a)
  (ret : OutPtr acc)
  -> Store
  attribute(inline, inline_dimensionality) =

  case vw of
    mk_view @list_dim @a (dom : list_dim) (g : index list_dim -> Init a).

  primitive_list_dim_fold @acc repr_acc dom
  (\ (ix : index list_dim) (x : acc) (ret : OutPtr acc) -> Store.
     case boxed @a (g ix) of boxed @a (y : a).
     f x y ret)
  init
  ret;

-------------------------------------------------------------------------------
-- Sequence layer

Sequence_guard @(a : bare)
  (repr : Repr a) (condition : bool) (s : Sequence a) -> Sequence a
  attribute(inline) =
  if condition then s else Sequence_empty @a repr;


Sequence_empty @(a : bare) (repr : Repr a) -> Sequence a
  attribute(inline, inline_final) =
  let type st = Boxed (Stored NoneType) in
  sequence @a @st
  (boxed @(Stored NoneType) (stored @NoneType None))
  (\ (x : st) -> StreamNext st a. streamEmpty @st @a);


Sequence_return @(a : bare)
  (repr : Repr a)
  (ret : Init a)
  -> Sequence a
  attribute(inline, inline_final) =
  let type st = Boxed (Stored bool) in
  sequence @a @st
  (boxed @(Stored bool) (stored @bool False))
  (\ (depleted : st) -> StreamNext st a.
     case depleted of boxed @(Stored bool) (depleted_s : Stored bool).
     case depleted_s of stored @bool (depleted_u : bool).
     if depleted_u
     then streamEmpty @st @a
     else streamValue @st @a
     	  (boxed @(Stored bool) (stored @bool True))
	  (convertToBoxed @a repr ret));

Sequence_chain @(a : bare)
  (repr : Repr a)
  (s1 : Sequence a)
  (s2 : Sequence a)
  -> Sequence a
  attribute(inline, inline_final) =
  -- Create a stream consisting of all contents of s1 followed by all contents
  -- of s2
  case s1 of sequence @a @(state1 : box)
             (s1 : state1) (f1 : state1 -> StreamNext state1 a).
  case s2 of sequence @a @(state2 : box)
             (s2 : state2) (f2 : state2 -> StreamNext state2 a).

  let type state = ChainState state1 state2 in
  sequence @a @state (chainFromFirst @state1 @state2 s1 s2)
  (\ (s : state) -> StreamNext state a.
     letfun
       pull_from_second (s2 : state2) -> StreamNext state a =
         -- Pull from second stream
         case f2 s2 of {
           streamValue @state2 @a (new_s2 : state2) (result : BoxedType a).
             streamValue @state @a (chainFromNext @state1 @state2 new_s2) result
         ; streamEmpty @state2 @a.
             streamEmpty @state @a
         } in
     case s of {
       chainFromFirst @state1 @state2 (s1 : state1) (s2 : state2).
         -- Pull from first stream
         case f1 s1 of {
           streamValue @state1 @a (new_s1 : state1) (result : BoxedType a).
             streamValue @state @a (chainFromFirst @state1 @state2 new_s1 s2) result
         ; streamEmpty @state1 @a.
             pull_from_second s2
         }
     ; chainFromNext @state1 @state2 (s2 : state2).
         pull_from_second s2
     });

Sequence_reduce @(a : bare)
  (repr : Repr a)
  (f : a -> a -> Init a)
  (init : a)
  (sq : Sequence a)
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_final) =
  Sequence_fold @a @a repr repr f init sq ret;


Sequence_reduce1 @(a : bare)
  (repr : Repr a)
  (f : a -> a -> Init a)
  (sq : Sequence a)
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_final) =
  -- Use the stream's first element as the initial value
  case sq of
    sequence @a @(st : box) (state : st) (next : st -> StreamNext st a).

  case next state of {
    streamValue @st @a (next_state : st) (init : BoxedType a).
      case boxed @a (convertToBare @a repr init) of boxed @a (u_init : a).
      let new_sequence : Sequence a =
            sequence @a @st next_state next in
      Sequence_fold @a @a repr repr f u_init new_sequence ret;

    streamEmpty @st @a.
      except @Store
  };


Sequence_scatter @(i r : bare)
  (repr_i : Repr i)
  (repr_r : Repr r)
  (op : Scatter r i)
  (src : Sequence i)
  (ret : OutPtr r)
  -> Store
  attribute(inline, inline_sequential) =

  case op of
    mk_scatter @r @i @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s r)
    (make_updater : i -> updF)
    (make_init : iniF).

  letfun
    use_finalizer (w : Init s) (ret : OutPtr r) -> Store =
      case finalizer of {
        mutateInPlace @s @r (co : coerce @bare s r).
          (coerce @(Init s) @(Init r) w) ret

      ; mutateAndCopy @s @r (f : s -> Init r).
          case boxed @s w of boxed @s (tmp : s).
          f tmp ret
      } in

  use_finalizer
  (\ (local_ret : OutPtr s) -> Store.
   -- Initialize the output
   case boxed @(Stored EffTok)
        (stored @EffTok (initializer make_init local_ret)) of
     boxed @(Stored EffTok) (init_eff_tok : Stored EffTok).

       case boxed @(Stored EffTok)
            (Sequence_fold @i @(Stored EffTok)
             repr_i repr_EffTok
             (\ (x : Stored EffTok) (y : i) (loop_ret : OutPtr (Stored EffTok))
                -> Store.
                case x of stored @EffTok (x_u : EffTok).
                stored @EffTok (updater (make_updater y) y x_u local_ret) loop_ret)
             init_eff_tok
             src) of
         boxed @(Stored EffTok) (s_final_eff_tok : Stored EffTok).

   -- Translate to a return value
   case s_final_eff_tok of stored @EffTok (final_eff_tok : EffTok).
     fromEffTok @s final_eff_tok)
  ret;


Sequence_fold @(a acc : bare)
  (repr_a : Repr a)
  (repr_acc : Repr acc)
  (f : acc -> a -> Init acc)
  (init : acc)
  (src : Sequence a)
  (ret : OutPtr acc)
  -> Store
  attribute(inline, inline_final) =
  case src of
    sequence @a @(st : box) (state : st) (next : st -> StreamNext st a).

  letfun
    go (state : st) (accumulator : BoxedType acc) (ret : OutPtr acc)
      -> Store =
      case next state of {

        -- Obtain value from stream
        streamValue @st @a (next_state : st) (result : BoxedType a).
          -- Compute the new value
          let new_accumulator : BoxedType acc =
                case boxed @a (convertToBare @a repr_a result)
                of boxed @a (y : a).
                case boxed @acc (convertToBare @acc repr_acc accumulator)
                of boxed @acc (x : acc).
                convertToBoxed @acc repr_acc (f x y)

          in go next_state new_accumulator ret;

	-- Stream is depleted
	streamEmpty @st @a.
	  convertToBare @acc repr_acc accumulator ret
      }
  in go state (convertToBoxed @acc repr_acc (copy @acc repr_acc init)) ret;


Sequence_generate @(a : bare)
  (repr : Repr a) (size : list_dim) (f : index list_dim -> Init a)
  -> Sequence a
  attribute(inline, inline_final) =

  let type Sint = Stored int in
  let type st = Boxed Sint in
  case size of mk_list_dim (m_list_size : MaybeVal int).
  case m_list_size of {
    justVal @int (list_size : int).
      -- Finite stream
      letfun
        next (state : st) -> StreamNext st a =
	  case state of boxed @Sint (state_s : Sint).
	  case state_s of stored @int (state_u : int).
	  if state_u <# list_size
	  then let next_value : BoxedType a =
	             convertToBoxed @a repr (f state_s) in
	       let next_state : st =
	             boxed @Sint (stored @int (state_u +# 1)) in
	       streamValue @st @a next_state next_value
	  else streamEmpty @st @a
      in
      sequence @a @st (boxed @Sint (stored @int 0)) next

  ; nothingVal @int.
      -- Infinite stream
      letfun
        next (state : st) -> StreamNext st a =
	  case state of boxed @Sint (state_s : Stored int).
	  case state_s of stored @int (state_u : int).
	  let next_value : BoxedType a =
	        convertToBoxed @a repr (f state_s) in
	  let next_state : st =
	        boxed @Sint (stored @int (state_u +# 1)) in
	  streamValue @st @a next_state next_value
      in
      sequence @a @st (boxed @Sint (stored @int 0)) next
  };


Sequence_bind @(a b : bare)
  (repr : Repr a)
  (src : Sequence a)
  (trans : a -> Sequence b)
  -> Sequence b
  attribute(inline, inline_final) =
  case src of
    sequence @a @(src_st : box)
    (src_state : src_st)
    (src_next : src_st -> StreamNext src_st a).

  let type bind_state = BindState src_st a b in

  letfun {
    next_from_source (src_state : src_st) -> StreamNext bind_state b =
      case src_next src_state of {
        streamValue @src_st @a (src_next_state : src_st) (src_value : BoxedType a).
          case boxed @a (convertToBare @a repr src_value) of boxed @a (x : a).
	  case trans x of
	    sequence @b @(trans_st : box)
	    (trans_state : trans_st)
	    (trans_next : trans_st -> StreamNext trans_st b).
	  next_from_trans @trans_st src_next_state trans_state trans_next
      ; streamEmpty @src_st @a.
	  streamEmpty @bind_state @b
      };

    next_from_trans @(trans_st : box)
      (src_state : src_st)
      (trans_state : trans_st)
      (trans_next : trans_st -> StreamNext trans_st b)
      -> StreamNext bind_state b =
      case trans_next trans_state of {
        streamValue @trans_st @b (trans_next_state : trans_st) (trans_value : BoxedType b).
          let next_state : bind_state =
	        bindFromTrans @src_st @a @b @trans_st
		src_state trans_next_state trans_next in
          streamValue @bind_state @b next_state trans_value
      ; streamEmpty @trans_st @b.
	  next_from_source src_state
      };

    next (state : bind_state) -> StreamNext bind_state b =
      case state of {
        bindFromSource @src_st @a @b (src_state : src_st).
	  next_from_source src_state
      ; bindFromTrans @src_st @a @b @(trans_st : box)
      	(src_state : src_st)
	(trans_state : trans_st)
	(trans_next : trans_st -> StreamNext trans_st b).
	  next_from_trans @trans_st src_state trans_state trans_next
      }
  } in

  sequence @b @bind_state (bindFromSource @src_st @a @b src_state) next;


Sequence_generate_bind @(a : bare)
  (shp : list_dim) (transformer : Stored int -> Sequence a)
  -> Sequence a
  attribute(inline, inline_final) =
  Sequence_bind @(Stored int) @a repr_int
  (Sequence_generate @(Stored int) repr_int shp (copy @(Stored int) repr_int))
  transformer;


Sequence_parallel_reduce @(a : bare)
  (repr : Repr a)
  (dom : list_dim)
  (f : a -> a -> Init a)
  (init : a)
  (g : Stored int -> Sequence a)
  (ret : OutPtr a)
  -> Store =
  case dom of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal @int (size : int).
      -- Create combiner and reducer functions using 'f' and 'g'
      let type b = BoxedType a in
      letfun
        combiner (x : b) (y : b) -> b =
          case boxed @a (convertToBare @a repr x) of boxed @a (bx : a).
          case boxed @a (convertToBare @a repr y) of boxed @a (by : a).
          convertToBoxed @a repr (f bx by)
      in
      letfun
        reducer @(range_N : intindex)
          (lb : int) (count : FIInt range_N) (acc_in : b) -> b =

          -- Reduce over the sequence [lb, lb + count)
          case boxed @a (convertToBare @a repr acc_in) of boxed @a (acc : a).
          case count of fiInt @range_N (count_i : int).
          convertToBoxed @a repr
          (Sequence_reduce @a repr f acc
           (Sequence_generate_bind @a (mk_list_dim (justVal @int count_i))
            (\ (si : Stored int) -> Sequence a.
               -- Add 'lb' to the index
               case si of stored @int (i : int).
               case boxed @(Stored int) (stored @int (lb +# i)) of
                 boxed @(Stored int) (real_si : Stored int).
               g real_si)))
      in
      case defineIntIndex size of someIInt @(N : intindex) (count : FIInt N).
      let boxed_init : b = convertToBoxed @a repr (copy @a repr init) in
      convertToBare @a repr
      (blocked_1d_reduce @N @b count combiner boxed_init reducer)
      ret

  ; nothingVal @int.
      except @Store
  };

-------------------------------------------------------------------------------
-- Helper functions over the basic loop layer

arr1D_build @(N : intindex) @(a : bare)
  (repr : Repr a) (size : FIInt N) (f : int -> Init a)
  (arr_ptr : OutPtr (arr N a))
  -> Store
  attribute(inline) =

  doall @N @(arr N a) @a size
  (\ (i : int) -> Store.
     f i (subscript_out @N @a (reprSizeAlign @a repr) arr_ptr i));


arr2D_build @(M N : intindex) @(a : bare)
  (repr : Repr a)
  (size_y : FIInt M) (size_x : FIInt N) (f : int -> int -> Init a)
  (arr_ptr : OutPtr (arr M (arr N a)))
  -> Store
  attribute(inline) =

  let row_repr : Repr (arr N a) = repr_arr @N @a size_x repr in
  doall @M @(arr M (arr N a)) @(arr N a) size_y
  (\ (y : int) -> Store.
     doall @N @(arr N a) @a size_x
     (\ (x : int) -> Store.
        f y x
        (subscript_out @N @a (reprSizeAlign @a repr)
         (subscript_out @M @(arr N a) (reprSizeAlign @(arr N a) row_repr)
          arr_ptr y) x)));


arr3D_build @(L M N : intindex) @(a : bare)
  (repr : Repr a)
  (size_z : FIInt L)
  (size_y : FIInt M)
  (size_x : FIInt N)
  (f : int -> int -> int -> Init a)
  (arr_ptr : OutPtr (arr L (arr M (arr N a))))
  -> Store
  attribute(inline) =

  let row_repr : Repr (arr N a) = repr_arr @N @a size_x repr in
  let plane_repr : Repr (arr M (arr N a)) =
        repr_arr @M @(arr N a) size_y row_repr in
  doall @L @(arr L (arr M (arr N a))) @(arr M (arr N a)) size_z
  (\ (z : int) -> Store.
     doall @M @(arr M (arr N a)) @(arr N a) size_y
     (\ (y : int) -> Store.
        doall @N @(arr N a) @a size_x
        (\ (x : int) -> Store.
           f z y x
           (subscript_out @N @a (reprSizeAlign @a repr)
            (subscript_out @M @(arr N a) (reprSizeAlign @(arr N a) row_repr)
             (subscript_out @L @(arr M (arr N a)) (reprSizeAlign @(arr M (arr N a)) plane_repr)
              arr_ptr z) y) x))));

-------------------------------------------------------------------------------
-- Domain loops (sequential)

primitive_list_dim_chain @(a : bare) (repr : Repr a)
  (v1 : view list_dim a)
  (v2 : view list_dim a)
  -> view list_dim a
  attribute(inline, inline_final) =
  case v1 of
    mk_view @list_dim @a (dom1 : list_dim) (f1 : Stored int -> Init a).
  case v2 of
    mk_view @list_dim @a (dom2 : list_dim) (f2 : Stored int -> Init a).

  case dom1 of mk_list_dim (size1 : MaybeVal int).
  case dom2 of mk_list_dim (size2 : MaybeVal int).
  case size1 of {
    justVal @int (sz : int).
      let dom : list_dim =
            mk_list_dim (case size2 of {
                           justVal @int (sz2 : int). justVal @int (sz +# sz2)
                         ; nothingVal @int. nothingVal @int}) in
      mk_view @list_dim @a dom
      (\ (ix : Stored int) (ret : OutPtr a) -> Store.
         -- Get a value from the first or the second view
         case ix of stored @int (i : int).
         if i <# sz
         then f1 ix ret
         else case boxed @(Stored int) (stored @int (i -# sz)) of
                boxed @(Stored int) (ix2 : Stored int).
              f2 ix2 ret)

  ; nothingVal @int.
      -- The first domain is infinite, so the second is unreachable
      mk_view @list_dim @a dom1 f1
  };


primitive_list_dim_reduce @(a : bare)
  (repr : Repr a)
  (dom : list_dim)
  (generator : Stored int -> Init a)
  (reducer : a -> a -> Init a)
  (init : a)
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_final) =
  case dom of mk_list_dim (m_size : MaybeVal int).
  case m_size of {
    justVal @int (size : int).
      case defineIntIndex size of someIInt @(N : intindex) (sz : FIInt N).

      for @N @a repr sz init
      (\ (i : int) (x : a) (loop_ret : OutPtr a) -> Store.
         case boxed @(Stored int) (stored @int i) of
           boxed @(Stored int) (s_i : Stored int).
         case boxed @a (generator s_i) of boxed @a (y : a).
         reducer x y loop_ret)
      ret

  ; nothingVal @int.
      -- Can't evaluate on an infinite domain
      except @Store
  };


primitive_list_dim_reduce1 @(a : bare)
  (repr : Repr a)
  (dom : list_dim)
  (generator : Stored int -> Init a)
  (reducer : a -> a -> Init a)
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_final) =
  case dom of mk_list_dim (m_size : MaybeVal int).
  case m_size of {
    justVal @int (size : int).
      -- Can't reduce on empty range
      if size ==# 0 then except @Store else

      -- Evaluate at index 0 to get initial value
      case boxed @(Stored int) (stored @int 0) of
        boxed @(Stored int) (s_zero : Stored int).
      case boxed @a (generator s_zero) of
        boxed @a (init : a).

      -- Reduce remaining values
      case defineIntIndex (size -# 1) of
        someIInt @(N : intindex) (sz : FIInt N).

      for @N @a repr sz init
      (\ (i : int) (x : a) (loop_ret : OutPtr a) -> Store.
         case boxed @(Stored int) (stored @int (i +# 1)) of
           boxed @(Stored int) (s_i : Stored int).
         case boxed @a (generator s_i) of boxed @a (y : a).
         reducer x y loop_ret)
      ret

  ; nothingVal @int.
      -- Can't evaluate on an infinite domain
      except @Store
  };


primitive_list_dim_fold @(acc : bare)
  (repr : Repr acc)
  (d : list_dim)
  (f : index list_dim -> acc -> Init acc)
  (init : acc)
  (ret : OutPtr acc)
  -> Store
  attribute(inline) =

  case d of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal @int (size : int).
      case defineIntIndex size of someIInt @(N : intindex) (count : FIInt N).
      
      for @N @acc repr count init
      (\ (i : int) (loop_acc : acc) (ret : OutPtr acc) -> Store.
         case boxed @(Stored int) (stored @int i) of
           boxed @(Stored int) (real_index : Stored int).

         -- Accumulate value
         f real_index loop_acc ret)
      ret

  ; nothingVal @int.
      except @Store
  };


primitive_dim1_reduce @(a : bare)
  (repr : Repr a)
  (dom : dim1)
  (generator : Stored int -> Init a)
  (reducer : a -> a -> Init a)
  (init : a)
  -> Init a
  attribute(inline, inline_final) =

  dim1ToArrayDesc @a dom
  (\ @(N : intindex)
     (lb : int) (stride : int) (size : FIInt N) (ret : OutPtr a)
     -> Store.

     let linear_map : LinearMap = linearMap stride lb in

     for @N @a repr size init
     (\ (i : int) (x : a) (loop_ret : OutPtr a) -> Store.
        let logical_i : int = evalLM i linear_map in
        case boxed @(Stored int) (stored @int logical_i) of
           boxed @(Stored int) (s_i : Stored int).
         case boxed @a (generator s_i) of boxed @a (y : a).
         reducer x y loop_ret)
     ret);


primitive_dim1_fold @(acc : bare)
  (repr : Repr acc)
  (d : dim1)
  (f : index dim1 -> acc -> Init acc)
  (init : acc)
  -> Init acc
  attribute(inline) =

  -- Loop over the domain
  dim1ToArrayDesc @acc d
  (\ @(N : intindex)
     (lb : int) (stride : int) (count : FIInt N) (ret : OutPtr acc)
     -> Store.

     for @N @acc repr count init
     (\ (i : int) (loop_acc : acc) (ret : OutPtr acc) -> Store.

        -- Compute the real index in this loop iteration
        case boxed @(Stored int) (stored @int (lb +# i *# stride)) of
          boxed @(Stored int) (real_index : Stored int).

        -- Accumulate value
        f real_index loop_acc ret)
     ret);

-------------------------------------------------------------------------------
-- Domain loops (parallel)

parallel_list_dim_reduce @(a : bare)
  (repr : Repr a)
  (dom : list_dim)
  (g : Stored int -> Init a)
  (f : a -> a -> Init a)
  (init : a)
  (ret : OutPtr a)
  -> Store =

  case dom of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal @int (size : int).
      -- Create combiner and reducer functions using 'f' and 'g'
      let type b = BoxedType a in
      letfun
        combiner (x : b) (y : b) -> b =
          case boxed @a (convertToBare @a repr x) of boxed @a (bx : a).
          case boxed @a (convertToBare @a repr y) of boxed @a (by : a).
          convertToBoxed @a repr (f bx by)
      in
      letfun
        reducer @(range_N : intindex)
          (lb : int) (count : FIInt range_N) (acc_in : b) -> b =
          for_box @range_N @b count acc_in
          (\ (i : int) (acc_loop : b) -> b.
            -- Add the lower bound to get the real index
            case boxed @(Stored int) (stored @int (i +# lb)) of
              boxed @(Stored int) (real_index : Stored int).

            -- Call 'g' to compute a value, and 'f' to combine it
            case boxed @a (convertToBare @a repr acc_loop) of
              boxed @a (x : a).
            case boxed @a (g real_index) of boxed @a (y : a).
            convertToBoxed @a repr (f x y))
      in
      case defineIntIndex size of someIInt @(N : intindex) (count : FIInt N).
      let boxed_init : b = convertToBoxed @a repr (copy @a repr init) in
      convertToBare @a repr
      (blocked_1d_reduce @N @b count combiner boxed_init reducer)
      ret

  ; nothingVal @int.
      except @Store
  };


parallel_dim1_reduce @(a : bare)
  (repr : Repr a)
  (dom : dim1)
  (g : Stored int -> Init a)
  (f : a -> a -> Init a)
  (init : a)
  (ret : OutPtr a)
  -> Store
  attribute(inline) =

  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case lm of linearMap (stride : int) (alignemnt : int).
  case iv of
    interval (lower_bound : MaybeVal int) (upper_bound : MaybeVal int).
  case lower_bound of {
    justVal @int (lb : int).
      case upper_bound of {
        justVal @int (ub : int).          
          -- Create combiner and reducer functions using 'f' and 'g'
          let type b = BoxedType a in
          letfun
            combiner (x : b) (y : b) -> b =
              case boxed @a (convertToBare @a repr x) of boxed @a (bx : a).
              case boxed @a (convertToBare @a repr y) of boxed @a (by : a).
              convertToBoxed @a repr (f bx by)
          in
          letfun
            reducer @(range_N : intindex)
              (lb : int) (count : FIInt range_N) (acc_in : b) -> b =
              for_box @range_N @b count acc_in
              (\ (i : int) (acc_loop : b) -> b.
                -- Compute the real index from iteration 'i'
                let real_index_u : int = lb +# i *# stride in
                case boxed @(Stored int) (stored @int real_index_u) of
                  boxed @(Stored int) (real_index : Stored int).

                -- Call 'g' to compute a value, and 'f' to combine it
                case boxed @a (convertToBare @a repr acc_loop) of
                  boxed @a (x : a).
                case boxed @a (g real_index) of boxed @a (y : a).
                convertToBoxed @a repr (f x y))
          in
          let size : int = (ub -# lb) //# stride in
          case defineIntIndex size of
            someIInt @(N : intindex) (count : FIInt N).
          let boxed_init : b = convertToBoxed @a repr (copy @a repr init) in
          convertToBare @a repr
          (blocked_1d_reduce @N @b count combiner boxed_init reducer)
          ret

      ; nothingVal @int.
          except @Store
      }
  ; nothingVal @int.
      except @Store
  };


parallel_list_dim_reduce1 @(a : bare)
  (repr : Repr a)
  (dom : list_dim)
  (g : Stored int -> Init a)
  (f : a -> a -> Init a)
  (ret : OutPtr a)
  -> Store =

  let mrepr : Repr (Maybe a) = repr_Maybe @a repr in
  case dom of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal @int (size : int).
      -- Create combiner and reducer functions using 'f' and 'g'
      let type ma = Maybe a in
      let type b = BoxedType ma in
      letfun
        combiner (x : b) (y : b) -> b =
          -- Combine 'Maybe' values.  Use 'f' if both values are 'Just'.
          case boxed @ma (convertToBare @ma mrepr x) of
            boxed @ma (maybe_x : ma).
          case maybe_x of {
            just @a (bx : a).
              case boxed @ma (convertToBare @ma mrepr y) of
                boxed @ma (maybe_y : ma).
              case maybe_y of {
                just @a (by : a). convertToBoxed @ma mrepr (just @a (f bx by))
              ; nothing @a. x
            }
          ; nothing @a. y
          }
      in
      letfun
        reducer @(range_N : intindex)
          (lb : int) (count : FIInt range_N) (acc_in : b) -> b =
          case boxed @ma (convertToBare @ma mrepr acc_in) of
            boxed @ma (m_acc_in : ma).

          letfun
            reduce_with_initial_value @(subrange_N : intindex)
              (subrange_lb : int)
              (subrange_count : FIInt subrange_N)
              (subrange_acc : a)
              -> b =
            convertToBoxed @ma mrepr
            (just @a
             (for @subrange_N @a repr subrange_count subrange_acc
              (\ (i : int) (x : a) (ret : OutPtr a) -> Store.
                 -- Add the lower bound to get the real index
                 case boxed @(Stored int) (stored @int (i +# subrange_lb)) of
                   boxed @(Stored int) (real_index : Stored int).
               
                 -- Call 'g' to compute a value, and 'f' to combine it
                 case boxed @a (g real_index) of boxed @a (y : a).
                 f x y ret)))
          in
          -- Get an initial value.  The value comes from either
          -- the given accumulator or the beginning of the range.
          -- We know the range is nonempty.
          case m_acc_in of {
            just @a (b_acc_in : a).
              reduce_with_initial_value @range_N lb count b_acc_in
          ; nothing @a.
              case boxed @(Stored int) (stored @int lb) of
                boxed @(Stored int) (first_index : Stored int).
              case boxed @a (g first_index) of boxed @a (b_acc_in : a).

              reduce_with_initial_value @(minus_i range_N 1)
              (lb +# 1)
              (minus_fii @range_N @1 count one_fii)
              b_acc_in
          }
      in
      case defineIntIndex size of someIInt @(N : intindex) (count : FIInt N).
      let boxed_init : b = convertToBoxed @ma mrepr (nothing @a) in
      case boxed @ma
           (convertToBare @ma mrepr
            (blocked_1d_reduce @N @b count combiner boxed_init reducer)) of
        boxed @ma (m_result : Maybe a).
      case m_result of {
        just @a (result : a). copy @a repr result ret
      ; nothing @a. except @Store
      }

  ; nothingVal @int.
      except @Store
  };


-------------------------------------------------------------------------------
-- Sequential loops

for @(N : intindex) @(acc : bare)
  (repr : Repr acc) (count : FIInt N) (init : acc)
  (f : int -> acc -> Init acc) (ret : OutPtr acc)
  -> Store
  attribute(inline, inline_final) =

  -- Unpack the indexed int
  case count of fiInt @N (bound : int).

  -- Main loop
  letfun
    loop (i : int) (x : acc) (r : OutPtr acc) -> Store =
      if EqDict_int_eq i bound
      then copy @acc repr x r
      else case boxed @acc (f i x) of boxed @acc (y : acc).
           loop (AdditiveDict_int_add i 1) y r
  in loop 0 init ret;


for_box @(N : intindex) @(acc : box)
  (count : FIInt N)
  (init : acc)
  (f : int -> acc -> acc)
  -> acc
  attribute(inline, inline_final) =

  -- Unpack the indexed int
  case count of fiInt @N (bound : int).

  -- Main loop
  letfun
    loop (i : int) (x : acc) -> acc =
      if EqDict_int_eq i bound
      then x
      else loop (AdditiveDict_int_add i 1) (f i x)
  in loop 0 init;

-------------------------------------------------------------------------------
-- Parallel loops

parallel_doall @(N : intindex) @(a b : bare)
  (count : FIInt N)
  (f : int -> Store)
  -> Store
  attribute(inline, inline_sequential) =

  letfun
    do_range @(M : intindex)
      (lb : int) (range_count : FIInt M)
      -> Store =
    doall @M @b @b range_count
    (\ (range_i : int) -> Store. f (range_i +# lb))
  in
  blocked_doall @N @a @b count do_range;


-------------------------------------------------------------------------------
-- Data structure functions

fun_list_dim (size : Maybe (Stored int)) -> list_dim
  attribute(inline) =
  mk_list_dim (case size of {
                 just @(Stored int) (si : Stored int).
                   case si of stored @int (i : int).
                   justVal @int i
               ; nothing @(Stored int).
                   nothingVal @int
               });


fun_dim1 (lo_bound : Maybe (Stored int)) (hi_bound : Maybe (Stored int))
         (stride : int) (alignment : int) -> dim1
  attribute(inline) =

  letfun
    cvt_Maybe (x : Maybe (Stored int)) -> MaybeVal int =
      case x of {
        just @(Stored int) (si : Stored int).
          case si of stored @int (i : int).
          justVal @int i
      ; nothing @(Stored int).
          nothingVal @int
      } in

  if stride <=# 0 then except @dim1 else

  -- Create an interval from the given bounds.  If the low bound is
  -- greater than the high bound, use an empty interval.
  let iv : Interval =
        case lo_bound of {
          just @(Stored int) (lb : Stored int).
            case lb of stored @int (lb_i : int).
            case hi_bound of {
              just @(Stored int) (ub : Stored int).
                case ub of stored @int (ub_i : int).
                if lb_i ># ub_i
                then interval (justVal @int 0) (justVal @int 0)
                else interval (justVal @int lb_i) (justVal @int ub_i)
            ; nothing @(Stored int).
                interval (justVal @int lb_i) (nothingVal @int)
            }
        ; nothing @(Stored int).
          case hi_bound of {
            just @(Stored int) (ub : Stored int).
              case ub of stored @int (ub_i : int).
              interval (nothingVal @int) (justVal @int ub_i)
          ; nothing @(Stored int).
              interval (nothingVal @int) (nothingVal @int)
          }
        } in
  let m : LinearMap = linearMap stride (alignment %# stride) in
  mk_dim1 (trimInterval iv m) m;


make_sliceObject
  (has_lower : bool)
  (lower : int)
  (has_upper : bool)
  (upper : int)
  (has_has_stride : bool)
  (has_stride : bool)
  (stride : int)
  (ret : OutPtr SliceObject)
  -> Store
  attribute(inline) =

  sliceObject
  (if has_lower then justVal @int lower else nothingVal @int)
  (if has_upper then justVal @int upper else nothingVal @int)
  (if has_has_stride
   then justVal @(MaybeVal int)
   (if has_stride then justVal @int stride else nothingVal @int)
   else nothingVal @(MaybeVal int))
  ret;


fun_isNothing @(a : bare) (repr : Repr a) (x : Maybe a)
  -> bool attribute(inline) =
  case x of {
    just @a (value : a). False
  ; nothing @a. True
  };


fun_isJust @(a : bare) (repr : Repr a) (x : Maybe a)
  -> bool attribute(inline) =
  case x of {
    just @a (value : a). True
  ; nothing @a. False
  };
  

fun_fromJust @(a : bare) (repr : Repr a) (x : Maybe a) (ret : OutPtr a)
  -> Store attribute(inline) =
  case x of {
    just @a (value : a). copy @a repr value ret
  ; nothing @a. except @Store
  };


fun_undefined @(a : box) -> a = except @a;

