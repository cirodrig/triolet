
-- Data types

data val bool : val pure
{
  True : val bool,
  () () () : val bool;
  False : val bool,
  () () () : val bool;
};

data val int : val pure {};
data val float : val pure {};
data val NoneType : val pure
{
  None : val NoneType,
  () () () : val NoneType;
};

-- An indexed singleton integer type.
-- Invariant: The type index gives up the integer value.
data val IndexedInt : val (val intindex -> val pure)
{
  indexedInt : (val n : intindex) -> val int -> val (IndexedInt n),
  (val n : intindex) () (val int) : val (IndexedInt n);
};

data ref array : val (val intindex -> val pure -> val pure) {};

data box Repr : val (val pure -> val pure) {};
data box Stream : val (val pure -> val pure) {};
data ref list : val (val pure -> val pure)
{
  make_list : (val a : pure)
           -> (val n : intindex)
           -> val IndexedInt n
           -> write Referenced (array n a)
           -> write list a,
  (val a : pure) (val n : intindex)
  (val IndexedInt n,
   read Referenced (array n a)) : read list a;
};

-- This data structure has a special representation
data box Boxed : val (val pure -> val pure)
{
  boxed : (val a : pure) -> write a -> box Boxed a,
  (val a : pure) () (read a) : box Boxed a;
};

-- This data structure has a special representation
data ref Referenced : val (val pure -> val pure)
{
  referenced : (val a : pure) -> write a -> write Referenced a,
  (val a : pure) () (read a) : read Referenced a;
};

data ref PyonTuple2 : val (val pure -> val pure -> val pure)
{
  pyonTuple2 : (val a : pure) -> (val b : pure)
            -> write a -> write b -> write PyonTuple2 a b,
  (val a : pure, val b : pure) () (read a, read b) : read PyonTuple2 a b;
};

data box AdditiveDict : val (val pure -> val pure)
{
  additiveDict : (val a : pure)
               -> box (read a -> read a -> write a)
              -> box (read a -> read a -> write a)
              -> box (read a -> write a)
              -> write a
              -> box AdditiveDict a,
  (val a : pure) ()
  (box (read a -> read a -> write a),
   box (read a -> read a -> write a),
   box (read a -> write a),
   read a) : box AdditiveDict a;
};

data box MultiplicativeDict : val (val pure -> val pure)
{
  multiplicativeDict : (val a : pure)
                    -> box AdditiveDict a
                    -> box (read a -> read a -> write a)
                    -> box (val int -> write a)
                    -> write a
                    -> box MultiplicativeDict a,
  (val a : pure) ()
  (box AdditiveDict a,
   box (read a -> read a -> write a),
   box (val int -> write a),
   read a) : box MultiplicativeDict a;
};

data box TraversableDict : val (val (val pure -> val pure) -> val pure)
{
  traversableDict :
      (val t : val pure -> val pure)
   -> box ((val a : pure) -> box Repr a -> read t a -> box Stream a)
   -> box ((val a : pure) -> box Repr a -> box Stream a -> write t a)
   -> box TraversableDict t,
  (val t : val pure -> val pure) ()
  (box ((val a : pure) -> box Repr a -> read t a -> box Stream a),
   box ((val a : pure) -> box Repr a -> box Stream a -> write t a))
  : box TraversableDict t;
};

-------------------------------------------------------------------------------
-- Representation dictionaries

load : (val a : pure) -> box Repr a -> read a -> val a;
store : (val a : pure) -> box Repr a -> val a -> write a;
copy : (val a : pure) -> box Repr a -> read a -> write a;

loadBox : (val a : pure) -> read a -> box a;
storeBox : (val a : pure) -> box a -> write a;

repr_int : box Repr int;
repr_float : box Repr float;
repr_bool : box Repr bool;

repr_list : (val a : pure) -> box Repr a -> box Repr (list a);

repr_PyonTuple2 :
    (val a : pure) -> (val b : pure) -> box Repr a -> box Repr b
 -> box Repr (PyonTuple2 a b);

-- This always returns the same, global object
repr_Box : (val a : pure) -> box Repr a;

repr_Boxed : (val a : pure) -> box Repr (Boxed a);
repr_Stream : (val a : pure) -> box Repr (Stream a);

OpaqueTraversableDict_list : box TraversableDict list;

TraversableDict_Stream_build :
  (val a : pure) -> box Repr a -> box Stream a -> box Stream a;

TraversableDict_Stream_traverse :
  (val a : pure) -> box Repr a -> box Stream a -> box Stream a;

TraversableDict_list_build :
  (val a : pure) -> box Repr a -> box Stream a -> write list a;

TraversableDict_list_traverse :
  (val a : pure) -> box Repr a -> read list a -> box Stream a;

-------------------------------------------------------------------------------
-- Comparison dictionaries

EqDict_int_eq : val int -> val int -> val bool;
EqDict_int_ne : val int -> val int -> val bool;

EqDict_float_eq : val float -> val float -> val bool;
EqDict_float_ne : val float -> val float -> val bool;

OrdDict_int_lt : val int -> val int -> val bool;
OrdDict_int_le : val int -> val int -> val bool;
OrdDict_int_gt : val int -> val int -> val bool;
OrdDict_int_ge : val int -> val int -> val bool;

OrdDict_float_lt : val float -> val float -> val bool;
OrdDict_float_le : val float -> val float -> val bool;
OrdDict_float_gt : val float -> val float -> val bool;
OrdDict_float_ge : val float -> val float -> val bool;

-------------------------------------------------------------------------------
-- Numeric dictionaries

AdditiveDict_int_add : val int -> val int -> val int;
AdditiveDict_int_sub : val int -> val int -> val int;
AdditiveDict_int_negate : val int -> val int;
AdditiveDict_int_zero : val int;

AdditiveDict_float_add : val float -> val float -> val float;
AdditiveDict_float_sub : val float -> val float -> val float;
AdditiveDict_float_negate : val float -> val float;
AdditiveDict_float_zero : val float;


MultiplicativeDict_int_mul : val int -> val int -> val int;
MultiplicativeDict_int_fromInt : val int -> val int;

MultiplicativeDict_float_mul : val float -> val float -> val float;
MultiplicativeDict_float_fromInt : val int -> val float;

-------------------------------------------------------------------------------
-- integer index arithmetic

zero_i : val intindex;
plus_i : val (val intindex -> val intindex -> val intindex);
minus_i : val (val intindex -> val intindex -> val intindex);

zero_ii : val (IndexedInt zero_i);
plus_ii : (val m : intindex)
       -> (val n : intindex)
       -> val (IndexedInt m)
       -> val (IndexedInt n)
       -> val (IndexedInt (plus_i m n));

minus_ii : (val m : intindex)
        -> (val n : intindex)
        -> val (IndexedInt m)
        -> val (IndexedInt n)
        -> val (IndexedInt (minus_i m n));

-------------------------------------------------------------------------------
-- Other functions

oper_DO : (val a : pure) -> box Repr a -> write a -> box Stream a;

oper_CAT_MAP :
    (val a : pure) -> (val b : pure) -> box Repr a -> box Repr b
 -> box Stream a
 -> box (read a -> box Stream b)
 -> box Stream b;

