
-- Data types

data val bool : val pure
{
  True : val bool,
  () () : val bool;
  False : val bool,
  () () : val bool;
};

data val int : val pure {};
data val float : val pure {};
data val NoneType : val pure
{
  None : val NoneType,
  () () : val NoneType;
};

data ref Repr : val (val pure -> val pure) {};
data box Stream : val (val pure -> val pure) {};
data ref list : val (val pure -> val pure) {};

-- This data structure has a special representation
data box Boxed : val (val pure -> val pure)
{
  boxed : (val a : pure) -> write a -> box Boxed a,
  (val a : pure) (read a) : box Boxed a;
};

-- This data structure has a special representation
data ref Referenced : val (val pure -> val pure)
{
  referenced : (val a : pure) -> write a -> write Referenced a,
  (val a : pure) (read a) : read Referenced a;
};

data ref PyonTuple2 : val (val pure -> val pure -> val pure)
{
  pyonTuple2 : (val a : pure) -> (val b : pure)
            -> write a -> write b -> write PyonTuple2 a b,
  (val a : pure, val b : pure) (read a, read b) : read PyonTuple2 a b;
};

data ref AdditiveDict : val (val pure -> val pure)
{
  additiveDict : (val a : pure)
               -> box (read a -> read a -> write a)
              -> box (read a -> read a -> write a)
              -> box (read a -> write a)
              -> write a
              -> write AdditiveDict a,
  (val a : pure) (box (read a -> read a -> write a),
       	   	  box (read a -> read a -> write a),
		  box (read a -> write a),
		  read a) : read AdditiveDict a;
};

data ref MultiplicativeDict : val (val pure -> val pure)
{
  multiplicativeDict : (val a : pure)
                    -> write AdditiveDict a
                    -> box (read a -> read a -> write a)
                    -> box (val int -> write a)
                    -> write a
                    -> write MultiplicativeDict a,
  (val a : pure) (read AdditiveDict a,
                  box (read a -> read a -> write a),
                  box (val int -> write a),
                  read a) : read MultiplicativeDict a;
};

data ref TraversableDict : val (val (val pure -> val pure) -> val pure)
{
  traversableDict :
      (val t : val pure -> val pure)
   -> box ((val a : pure) -> read Repr a -> read t a -> box Stream a)
   -> box ((val a : pure) -> read Repr a -> box Stream a -> write t a)
   -> write TraversableDict t,
  (val t : val pure -> val pure)
  (box ((val a : pure) -> read Repr a -> read t a -> box Stream a),
   box ((val a : pure) -> read Repr a -> box Stream a -> write t a))
  : read TraversableDict t;
};

-------------------------------------------------------------------------------
-- Representation dictionaries

load : (val a : pure) -> read Repr a -> read a -> val a;
store : (val a : pure) -> read Repr a -> val a -> write a;
copy : (val a : pure) -> read Repr a -> read a -> write a;

loadBox : (val a : pure) -> read a -> box a;
storeBox : (val a : pure) -> box a -> write a;

repr_int : read Repr int;
repr_float : read Repr float;

repr_list : (val a : pure) -> read Repr a -> write Repr (list a);

repr_PyonTuple2 :
    (val a : pure) -> (val b : pure) -> read Repr a -> read Repr b
 -> write Repr (PyonTuple2 a b);

repr_AdditiveDict :
    (val a : pure) -> read Repr a -> write Repr (AdditiveDict a);

repr_MultiplicativeDict :
    (val a : pure) -> read Repr a -> write Repr (MultiplicativeDict a);

-- This always returns the same, global object
repr_Repr : (val a : pure) -> read Repr a;

-- This always returns the same, global object
repr_Box : (val a : pure) -> read Repr a;

OpaqueTraversableDict_list : read TraversableDict list;

TraversableDict_Stream_build :
  (val a : pure) -> read Repr a -> box Stream a -> box Stream a;

TraversableDict_Stream_traverse :
  (val a : pure) -> read Repr a -> box Stream a -> box Stream a;

-------------------------------------------------------------------------------
-- Comparison dictionaries

EqDict_int_eq : val int -> val int -> val bool;
EqDict_int_ne : val int -> val int -> val bool;

EqDict_float_eq : val float -> val float -> val bool;
EqDict_float_ne : val float -> val float -> val bool;

OrdDict_int_lt : val int -> val int -> val bool;
OrdDict_int_le : val int -> val int -> val bool;
OrdDict_int_gt : val int -> val int -> val bool;
OrdDict_int_ge : val int -> val int -> val bool;

OrdDict_float_lt : val float -> val float -> val bool;
OrdDict_float_le : val float -> val float -> val bool;
OrdDict_float_gt : val float -> val float -> val bool;
OrdDict_float_ge : val float -> val float -> val bool;

-------------------------------------------------------------------------------
-- Numeric dictionaries

AdditiveDict_int_add : val int -> val int -> val int;
AdditiveDict_int_sub : val int -> val int -> val int;
AdditiveDict_int_negate : val int -> val int;
AdditiveDict_int_zero : val int;

AdditiveDict_float_add : val float -> val float -> val float;
AdditiveDict_float_sub : val float -> val float -> val float;
AdditiveDict_float_negate : val float -> val float;
AdditiveDict_float_zero : val float;


MultiplicativeDict_int_mul : val int -> val int -> val int;
MultiplicativeDict_int_fromInt : val int -> val int;

MultiplicativeDict_float_mul : val float -> val float -> val float;
MultiplicativeDict_float_fromInt : val int -> val float;

-------------------------------------------------------------------------------
-- Other functions

oper_DO : (val a : pure) -> read Repr a -> read a -> box Stream a;

oper_CAT_MAP :
    (val a : pure) -> (val b : pure) -> read Repr a -> read Repr b
 -> box Stream a
 -> box (read a -> box Stream b)
 -> box Stream b;