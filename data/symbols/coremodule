
type ReprBox = \ (a : box). Repr (AsBare a);

{- This data type definition should be caught as an error, because its
   memory layout depends on an existential type parameter.
data ErroneousType : bare
{
  erroneousType @(a : bare) (a);
};
-}

-- Data types

data Stored (a : val) : bare attribute(builtin)
{
  stored (a) attribute(builtin);
};

-- Definition is builtin
-- data Ref (a : box) : bare
-- {
--   ref (a);
-- };

-- A stuck reference is like a 'Ref' but doesn't get unwrapped
-- by 'asbare'.
data StuckRef (a : box) : bare
{
  stuckRef (a);
};

data Boxed (a : bare) : box
{
  boxed (a);
};

-- A stuck box is like a 'boxed' but doesn't get unwrapped
-- by 'asbox'.
data StuckBox (a : bare) : box
{
  stuckBox (a);
};

-- An unspecified data type
data Any : box
{
};

-- Type functions to convert between representations
type AsBox : bare -> box;
type AsBare : box -> bare;

-- Normal data types

data bool : val
  attribute(builtin)
{
  True () attribute(builtin);
  False () attribute(builtin);
};

data NoneType : val
{
  None ();
};

data Maybe (a : bare) : bare
{
  just (a);
  nothing ();
};

-- A value-form of 'Maybe'.  It must be used with statically known arguments.
data MaybeVal (a : val) : val
{
  justVal (a);
  nothingVal ();
};

-- A linked list
data llist (a : bare) : box
{
  cons (a, llist a);
  nil ();
};

-- An integer interval, given by inclusive lower and exclusive upper bounds.
-- The upper bound must be greater or equal to the lower bound.
-- 'Nothing' means that the interval is unbounded at that end.
data Interval : val
{
  interval (MaybeVal int, MaybeVal int);
};

-- | A linear map, representing the function y = s*x + a.
--   The stride 's' must be nonzero.
--
--   Negative strides are valid; however, note that many functions expect
--   linear maps with positive strides.
data LinearMap : val
{
  linearMap (int, int);
};

-- A finite indexed integer 
data FIInt (n : intindex) : val
  attribute(builtin)
{
  fiInt (int) attribute(builtin);
};

-- An indexed singleton integer type.
-- Invariant: The type index gives up the integer value.
data IInt (n : intindex) : val
{
  -- Finite value
  iInt (FIInt n);

  -- Positive and negative infinity
  iPosInfty ();
  iNegInfty ();
};

-- An existential indexed singleton integer type.
-- We can convert int to this type.
data SomeIInt : val
{
  someIInt @(n : intindex) (FIInt n);
};

-- A user-specified slice.
--
-- If the third field is Nothing, the slice specifies a contiguous range.
-- Otherwise it specifies a triple.
data SliceObject : bare
{
  sliceObject
  (MaybeVal int, MaybeVal int, MaybeVal (MaybeVal int));
};

data Complex (a : bare) : bare
{
  complex (a, a);
};

data Tuple0 : bare
{
  tuple0 ();
};

data Tuple1 (a : bare) : bare
{
  tuple1 (a);
};


data Tuple2 (a b : bare) : bare
{
  tuple2 (a, b);
};

data Tuple3 (a b c : bare) : bare
{
  tuple3 (a, b, c);
};

data Tuple4 (a b c d : bare) : bare
{
  tuple4 (a, b, c, d);
};

-- Dictionaries

-- Size and alignment used by a data constructor/deconstructor
data SizeAlign (a : bare) : val
  attribute(builtin)
{
  sizeAlign (uint, uint) attribute(builtin);
};

-- Size and alignment used by a data constructor/deconstructor
data SizeAlignVal (a : val) : val
  attribute(builtin)
{
  sizeAlignVal (uint, uint) attribute(builtin);
};

data Repr (a : bare) : box
  attribute(abstract, builtin)
{
  repr
  (SizeAlign a,       -- Size and alignment
   a -> Init a,	      -- Copy
   Init a -> AsBox a, -- Convert to boxed
   AsBox a -> Init a, -- Convert to bare
   bool)              -- Pointerlessness
                      -- (True if an 'a' definitely doesn't contain pointers)
  attribute(builtin);
};

data ReprVal (a : val) : box
  attribute(builtin)
{
  reprVal
  (SizeAlignVal a,              -- Size and alignment
   bool)                        -- Pointerlessness
  attribute(builtin);
};

-- Run-time type info for boxed objects
data TypeObject (a : box) : box
  attribute(builtin)
{
  typeObject
  ()                  -- No fields
  attribute(builtin);
};

data EqDict (a : box) : box
{
  eqDict
  (a -> a -> Boxed (Stored bool), a -> a -> Boxed (Stored bool));
};

data OrdDict (a : box) : box
{
  ordDict
  (EqDict a,
   a -> a -> Boxed (Stored bool),   -- Less than
   a -> a -> Boxed (Stored bool),   -- Less or equal
   a -> a -> Boxed (Stored bool),   -- Greater than
   a -> a -> Boxed (Stored bool));  -- Greater or equal
};

data AdditiveDict (a : box) : box
{
  additiveDict
  (a -> a -> a,                 -- add
   a -> a -> a,                 -- subtract
   a -> a,                      -- negate
   a);                          -- zero
};

data MultiplicativeDict (a : box) : box
{
  multiplicativeDict
  (AdditiveDict a,
   a -> a -> a,                 -- multiply
   Boxed (Stored int) -> a,     -- from integer
   a);                          -- one
};

data RemainderDict (a : box) : box
{
  remainderDict
  (MultiplicativeDict a,
   a -> a -> Boxed (Stored int), -- floor division
   a -> a -> a);                 -- remainder
};

data FractionalDict (a : box) : box
{
  fractionalDict
  (MultiplicativeDict a, a -> a -> a); -- true division
};

data FloatingDict (a : box) : box
{
  floatingDict
  (Boxed (Stored float) -> a,   -- from float
   a -> a -> a,                 -- power
   a -> a,                      -- exp
   a -> a,                      -- log
   a -> a,                      -- sqrt
   a -> a,                      -- sin
   a -> a,                      -- cos
   a -> a,                      -- tan
   a);                          -- pi
};

data VectorDict (a : box) : box
{
  vectorDict
  (AdditiveDict a,
   a -> Boxed (Stored float) -> a,
   a -> Boxed (Stored float),
   a -> a -> Boxed (Stored float));
};

-- Cartesian domains, indexed by their index type.
--
-- The methods are:
-- 1. Get lower bound of finite range
-- 2. Get upper bound of finite range
-- 3. Get strides
-- 4. Create a finite range
-- 5. Displace a domain by an offset
-- 6. Scale a domain by a scale factor
-- 7. Scale a domain by an inverse scale factor
-- 8. Scale an index by a scale factor
-- 9. Scale an index by an inverse scale factor
-- 10.The largest domain
data CartesianDict (sh : box) : box
{
  cartesianDict
  (coerce @box (cartesianDomain (index sh)) sh,
   sh -> Boxed (Maybe (index sh)),
   sh -> Boxed (Maybe (index sh)),
   sh -> AsBox (index sh),
   AsBox (index sh) -> AsBox (index sh) -> sh,
   sh -> AsBox (index sh) -> sh,
   sh -> AsBox (index sh) -> sh,
   sh -> AsBox (index sh) -> sh,
   AsBox (index sh) -> AsBox (index sh) -> AsBox (index sh),
   AsBox (index sh) -> AsBox (index sh) -> AsBox (index sh),
   sh);
};

data TraversableDict (t : box -> box) : box
{
  traversableDict
  (forall a : box. ReprBox a -> t a -> Stream (shape t) a,
   forall a : box. ReprBox a -> Stream (shape t) a -> t a);
};

-- Operations related to data domains and traversals over them.
-- The operations are flatten-to-list, generate, map, zipWith{2..4},
-- range checking for integers, and slicing.
data ShapeDict (sh : box) : box
{
  shapeDict
  (Repr (index sh),
   Repr (slice sh),

   -- Member
   sh -> AsBox (index sh) -> Boxed (Stored bool),

   -- Intersect
   sh -> sh -> sh,

   -- Flatten
   forall a : box. Repr (AsBare a) -> Stream sh a -> Stream list_dim a,

   -- Generate
   forall a : box. Repr (AsBare a) -> sh -> (AsBox (index sh) -> a) -> Stream sh a,

   -- Map and zips
   forall a b : box.
   Repr (AsBare a) -> Repr (AsBare b) ->
   (a -> b) -> Stream sh a -> Stream sh b,

   forall a b c : box.
   Repr (AsBare a) -> Repr (AsBare b) -> Repr (AsBare c) ->
   (a -> b -> c) -> Stream sh a -> Stream sh b -> Stream sh c,

   forall a b c d : box.
   Repr (AsBare a) -> Repr (AsBare b) -> Repr (AsBare c) -> Repr (AsBare d) ->
   (a -> b -> c -> d) ->
   Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d,

   forall a b c d e : box.
   Repr (AsBare a) -> Repr (AsBare b) -> Repr (AsBare c) -> Repr (AsBare d) -> Repr (AsBare e) ->
   (a -> b -> c -> d -> e) ->
   Stream sh a -> Stream sh b -> Stream sh c -> Stream sh d -> Stream sh e,

   -- Slice
   forall t : box -> box, a : box.
   coerce @box (shape t) sh ->
   IndexableDict t -> Repr (AsBare a) -> t a -> AsBox (slice sh) -> view sh a
   );
};

-- Class methods for one-dimensional, array-like container types
-- that can be indexed into.
-- Methods should not perform bounds checking.
data IndexableDict (t : box -> box) : box
{
  indexableDict
  (forall a : box. Repr (AsBare a) -> t a -> AsBox (index (shape t)) -> a,
   forall a : box. t a -> shape t);
};

-- The cartesian domain corresponding to an index type
type cartesianDomain : bare -> box;
type index : box -> bare;
type slice : box -> bare;

-------------------------------------------------------------------------------
-- Imperative computation support

-- A dummy token that we use to stand in for dependences due to
-- imperative computation that is inserted by the compiler.
--
-- We take advantage of the fact that EffTok is a unit value, and therefore
-- it is not accessed by load or store instructions when reading or writing it,
-- and therefore we can safely masquerade NULL pointers as EffTok references.
data EffTok : val
  attribute(abstract)
{
  -- We never use the constructor 'effTok' in code, because it could be
  -- optimized away.  We don't want the optimizer to mess with this data type
  -- because it stands in for real dependences.
  -- Instead, use 'emptyEffTok' to produce an EffTok value.
  effTok ();
};

-- An empty side effect.
-- This function is translated specially when converting from Core to LowLevel.
emptyEffTok : EffTok;

-- Translate to a side effect.
-- This function is translated specially when converting from Core to LowLevel.
toEffTok : forall a : bare. Store -> EffTok;

-- Perform two side-effecting operations in sequence.
seqEffTok : EffTok -> EffTok -> EffTok;

fromEffTok : forall a : bare. EffTok -> Store;

-- An opaque reference to mutable data.
data OpaqueRef : box
  attribute(abstract, nonalgebraic)
{};

-- The state of a list-building computation.
-- This is used when constructing a list from a sequence.
data ListBuilder (a : bare) : val
{
  listBuilder (int, int, OpaqueRef);
};

-- Primitive function for building a list by appending to it.
-- Defined in low-level.
append_build_list : forall a : bare.
                    Repr a
                 -> ((Init a -> ListBuilder a -> ListBuilder a) ->
                     ListBuilder a -> ListBuilder a)
                 -> Init (list a);

-- The finalizer of an in-place update operation.
-- A finalizer performs a one-time computation to convert the updatable
-- data structure to a read-only data structure.  In some cases, a finalizer
-- is not required, in which case the update is really performed in-place.
data UpdateInPlaceFinalizer (mutable immutable : bare) : box
{
  -- The data can be mutated in place if the mutable and immutable data formats
  -- are the same
  mutateInPlace (coerce @bare mutable immutable);

  -- Data should be mutated out-of-place, then written to the output
  mutateAndCopy (mutable -> Init immutable);
};

-- A scatter-reduce operation.  Reductions are performed with a combination of
-- sequential in-place updates and parallel reduction.
--
-- The type parameters and existential types are:
-- * a return type 'r', which is the result type of a scatter reduction
-- * an index type 'i', which is the type of inputs to a scatter reduction
-- * a state type 's', which is the memory representation that's modified by
--   in-place upate
-- * a scalar type 'a', which is the data type that's loaded and stored
--   (or atomically updated) during an in-place update
--
-- The code is organized such that only function types are parameterized on
-- 'a'.  There are no values of type 'a', because values can only have ground
-- types.  By organizing functions this way, we can generally ensure that the
-- low-level API does not need to perform memory allocation.
--
-- Token passing is used to represent dependences during the in-place part of
-- the reduction.
data Scatter (r i : bare) : box
{
  mk_scatter @(s : bare) @(iniF updF : box)
  (Repr s,
   iniF -> OutPtr s -> EffTok,                -- Initializer
   updF -> i -> EffTok -> OutPtr s -> EffTok, -- Updater
   s -> s -> Init s,                          -- Combining function
   UpdateInPlaceFinalizer s r,                -- Final value constructor
   i -> updF,                                 -- Update function
   iniF                                       -- Initial value
  );
};


-- These functions are implemented in low-level code.
intUpdateInPlace_initializer : (NoneType -> int)
                            -> OutPtr (Stored int)
                            -> EffTok;
intUpdateInPlace_updater : (int -> int) -> EffTok
                        -> OutPtr (Stored int)
                        -> EffTok;
floatUpdateInPlace_initializer : (NoneType -> float)
                              -> OutPtr (Stored float)
                              -> EffTok;
floatUpdateInPlace_updater : (float -> float) -> EffTok
                          -> OutPtr (Stored float)
                          -> EffTok;
boolUpdateInPlace_initializer : (NoneType -> bool)
                              -> OutPtr (Stored bool)
                              -> EffTok;
boolUpdateInPlace_updater : (bool -> bool) -> EffTok
                          -> OutPtr (Stored bool)
                          -> EffTok;

-- Helper functions for scatter reductions

intUpdateInPlace_int_coercion : coerce @bare (Stored int) (Stored int) =
  idBareCoercion @(Stored int);


intUpdateInPlace_finalizer : UpdateInPlaceFinalizer (Stored int) (Stored int) =
  mutateInPlace @(Stored int) @(Stored int)
  intUpdateInPlace_int_coercion;


intUpdateInPlace_combiner (x : Stored int) (y : Stored int)
  (ret : OutPtr (Stored int))
  -> Store =
  case x of stored ux.
  case y of stored uy.
  stored @int (ux +# uy) ret;


floatUpdateInPlace_float_coercion : coerce @bare (Stored float) (Stored float) =
  idBareCoercion @(Stored float);


floatUpdateInPlace_finalizer : UpdateInPlaceFinalizer (Stored float) (Stored float) =
  mutateInPlace @(Stored float) @(Stored float)
  floatUpdateInPlace_float_coercion;


floatUpdateInPlace_combiner (x : Stored float) (y : Stored float)
  (ret : OutPtr (Stored float))
  -> Store =
  case x of stored ux.
  case y of stored uy.
  stored @float (addF ux uy) ret;


boolUpdateInPlace_bool_coercion : coerce @bare (Stored bool) (Stored bool) =
  idBareCoercion @(Stored bool);


boolUpdateInPlace_finalizer : UpdateInPlaceFinalizer (Stored bool) (Stored bool) =
  mutateInPlace @(Stored bool) @(Stored bool)
  boolUpdateInPlace_bool_coercion;

-- Scatter reduction algorithms

intScatter @(a : box) (rep : Repr (AsBare a))
  (f : a -> Boxed (Stored int) -> Boxed (Stored int))
  (g : Boxed (Stored int) -> Boxed (Stored int) -> Boxed (Stored int))
  (init : Boxed (Stored int))
  -> Scatter (Stored int) (AsBare a)
  attribute(inline) =
  let type Sint = Stored int in

  let u_init = unboxIntValue init in

  mk_scatter @Sint @(AsBare a) @Sint @(NoneType -> int) @(int -> int)
  repr_int
  intUpdateInPlace_initializer
  (\ (modify : int -> int) (ix : AsBare a)
     (tok_in : EffTok) (ret : OutPtr Sint) -> EffTok.
     intUpdateInPlace_updater modify tok_in ret)
  (\ (x : Sint) (y : Sint) (r : OutPtr Sint) -> Store.
    case x of stored ux.
    case y of stored uy.
    let z = unboxIntValue (g (boxIntValue ux) (boxIntValue uy)) in
    stored @int z r)
  intUpdateInPlace_finalizer
  (\ (x : AsBare a) (y : int) -> int.
     unboxIntValue (f (bareToBox @(AsBare a) rep x) (boxIntValue y)))
  (\ (dummy : NoneType) -> int. u_init);


floatScatter @(a : box) (rep : Repr (AsBare a))
  (f : a -> Boxed (Stored float) -> Boxed (Stored float))
  (g : Boxed (Stored float) -> Boxed (Stored float) -> Boxed (Stored float))
  (init : Boxed (Stored float))
  -> Scatter (Stored float) (AsBare a)
  attribute(inline) =
  let type Sfloat = Stored float in
  let u_init = unboxFloatValue init in

  mk_scatter @Sfloat @(AsBare a) @Sfloat @(NoneType -> float) @(float -> float)
  repr_float
  floatUpdateInPlace_initializer
  (\ (modify : float -> float) (ix : AsBare a)
     (tok_in : EffTok) (ret : OutPtr Sfloat) -> EffTok.
     floatUpdateInPlace_updater modify tok_in ret)
  (\ (x : Sfloat) (y : Sfloat) (r : OutPtr Sfloat) -> Store.
    case x of stored ux.
    case y of stored uy.
    let z = unboxFloatValue (g (boxFloatValue ux) (boxFloatValue uy)) in
    stored @float z r)
  floatUpdateInPlace_finalizer
  (\ (x : AsBare a) (y : float) -> float.
     unboxFloatValue (f (bareToBox @(AsBare a) rep x) (boxFloatValue y)))
  (\ (dummy : NoneType) -> float. u_init);


boolScatter @(a : box) (rep : Repr (AsBare a))
  (f : a -> Boxed (Stored bool) -> Boxed (Stored bool))
  (g : Boxed (Stored bool) -> Boxed (Stored bool) -> Boxed (Stored bool))
  (init : Boxed (Stored bool))
  -> Scatter (Stored bool) (AsBare a)
  attribute(inline) =
  let type Sbool = Stored bool in
  let u_init = unboxBoolValue init in

  mk_scatter @Sbool @(AsBare a) @Sbool @(NoneType -> bool) @(bool -> bool)
  repr_bool
  boolUpdateInPlace_initializer
  (\ (modify : bool -> bool) (ix : AsBare a)
     (tok_in : EffTok) (ret : OutPtr Sbool) -> EffTok.
     boolUpdateInPlace_updater modify tok_in ret)
  (\ (x : Sbool) (y : Sbool) (r : OutPtr (Sbool)) -> Store.
    case x of stored ux.
    case y of stored uy.
    let z = unboxBoolValue (g (boxBoolValue ux) (boxBoolValue uy)) in
    stored @bool z r)
  boolUpdateInPlace_finalizer
  (\ (x : AsBare a) (y : bool) -> bool.
     unboxBoolValue (f (bareToBox @(AsBare a) rep x) (boxBoolValue y)))
  (\ (dummy : NoneType) -> bool. u_init);


intSumScatter : Scatter (Stored int) (Stored int) =
  let type Sint = Stored int in
  mk_scatter @Sint @Sint @Sint @(NoneType -> int) @(int -> int)
  repr_int
  intUpdateInPlace_initializer
  intSumScatter_updater
  intUpdateInPlace_combiner
  intUpdateInPlace_finalizer
  intSumScatter_make_update
  intSumScatter_make_init;


intSumScatter_updater (modify : int -> int) (ix : Stored int)
  (tok_in : EffTok) (ret : OutPtr (Stored int)) -> EffTok =
  intUpdateInPlace_updater modify tok_in ret;


intSumScatter_make_update (i : Stored int) -> int -> int =
  case i of stored ui.
  (\ (n : int) -> int. ui +# n);


intSumScatter_make_init (dummy : NoneType) -> int = 0;


floatSumScatter : Scatter (Stored float) (Stored float) =
  let type Sfloat = Stored float in
  mk_scatter @Sfloat @Sfloat @Sfloat @(NoneType -> float) @(float -> float)
  repr_float
  floatUpdateInPlace_initializer
  floatSumScatter_updater
  floatUpdateInPlace_combiner
  floatUpdateInPlace_finalizer
  floatSumScatter_make_update
  floatSumScatter_make_init;


floatSumScatter_updater
  (modify : float -> float) (ix : Stored float)
  (tok_in : EffTok) (ret : OutPtr (Stored float)) -> EffTok =
  floatUpdateInPlace_updater modify tok_in ret;


floatSumScatter_make_update (i : Stored float) -> float -> float =
  case i of stored ui.
  (\ (n : float) -> float. addF ui n);


floatSumScatter_make_init (dummy : NoneType) -> float = 0.0;


countingScatter : Scatter (Stored int) (Stored NoneType) =

  mk_scatter @(Stored int) @(Stored NoneType) @(Stored int)
             @(NoneType -> int) @(int -> int)
  repr_int
  intUpdateInPlace_initializer
  countingScatter_updater
  intUpdateInPlace_combiner
  intUpdateInPlace_finalizer
  countingScatter_make_update
  countingScatter_make_init;


countingScatter_updater (modify : int -> int) (ix : Stored NoneType)
  (tok_in : EffTok) (ret : OutPtr (Stored int)) -> EffTok =
  intUpdateInPlace_updater modify tok_in ret;


countingScatter_make_update (i : Stored NoneType) -> int -> int =
  (\ (n : int) -> int. n +# 1);


countingScatter_make_init (dummy : NoneType) -> int = 0;


boxedScatter @(a b : box) (rep : Repr (AsBare b))
  (f : b -> a -> a)
  (g : a -> a -> a)
  (init : a)
  -> Scatter (StuckRef a) (AsBare b) =
  mk_scatter @(StuckRef a) @(AsBare b) @(StuckRef a) @(NoneType -> a) @(a -> a)
  (repr_StuckRef @a)
  -- Initializer
  (\ (init_f : NoneType -> a) (p : OutPtr (StuckRef a)) -> EffTok.
     toEffTok @(StuckRef a) (stuckRef @a (init_f None) p))
  -- Updater
  (\ (modify : a -> a) (ix : AsBare b) (eff_in : EffTok)
     (p : OutPtr (StuckRef a)) -> EffTok.
     boxedScatter_updater @a modify eff_in p)
  (\ (x : StuckRef a) (y : StuckRef a) (ret : OutPtr (StuckRef a))
     -> Store.
     case x of stuckRef ux.
     case y of stuckRef uy.
     stuckRef @a (g ux uy) ret)
  (mutateInPlace @(StuckRef a) @(StuckRef a) (idBareCoercion @(StuckRef a)))
  (\ (x : AsBare b) (old : a) -> a. f (bareToBox @(AsBare b) rep x) old)
  (\ (dummy : NoneType) -> a. init);


boxedScatter_updater : forall a : box.
                       (a -> a)
                    -> EffTok
                    -> OutPtr (StuckRef a)
                    -> EffTok;


appendScatter @(box_a : box) (rep : Repr (AsBare box_a))
  -> Scatter (list (AsBare box_a)) (AsBare box_a) =
  let type a = AsBare box_a in
  mk_scatter @(list a) @a @(append_list a)
             @(NoneType -> NoneType)
             @(OutPtr a -> Store)
  (repr_append_list @a rep)
  (appendScatter_initializer @a (reprSizeAlign @a rep))
  (appendScatter_updater @a rep)
  (appendScatter_concatenate @a rep)
  (mutateAndCopy @(append_list a) @(list a)
   (\ (x : append_list a) (ret : OutPtr (list a)) -> Store.

      -- Create a copy of the list that contains no unused array elements.

      -- Inspect the old value
      case x of
        make_append_list @(M : intindex)
        (ls_count : FIInt M) (real_length : int) (ls_data : StuckBox (arr M a)).
      case ls_data of stuckBox (ls_arr : arr M a).

      -- Construct the new list; copy from the old list
      case defineIntIndex real_length of
        someIInt @(N : intindex) (count : FIInt N).
      make_list @a @N count
      (stuckBox @(arr N a)
       (\ (ret : OutPtr (arr N a)) -> Store.
          doall @N @a @a count
          (\ (i : int) -> Store.
             copy @a rep
             (subscript @M @a (reprSizeAlign @a rep) ls_arr i)
             (subscript_out @N @a (reprSizeAlign @a rep) ret i))))
      ret))
  (copy @a rep)
  (\ (dummy : NoneType) -> NoneType. dummy);


appendScatter_updater @(a : bare)
  (rep : Repr a)
  (writer : OutPtr a -> Store)
  (arg : a)
  (tok_in : EffTok)
  (update_list : OutPtr (append_list a))
  -> EffTok =
  appendScatter_update_real @a
  (reprSizeAlign @a rep) writer tok_in update_list;


appendScatter_concatenate @(a : bare)
  (rep : Repr a)
  (l1 : append_list a)
  (l2 : append_list a)
  (ret : OutPtr (append_list a))
  -> Store
  attribute(inline) =

  case l1 of make_append_list @N (s1 : FIInt N) (n1 : int) (stuckBox arr1).
  case l2 of make_append_list @M (s2 : FIInt M) (n2 : int) (stuckBox arr2).

  -- Concatenate both lists
  -- TODO: This function may be called repeatedly, but we shouldn't copy
  -- more than once.  Avoid excess copying by building a cord, then
  -- flattening the cord later.
  case defineIntIndex n1 of someIInt @(Np : intindex) (count1 : FIInt Np).
  case defineIntIndex n2 of someIInt @(Mp : intindex) (count2 : FIInt Mp).

  case defineIntIndex (n1 +# n2) of someIInt @(P : intindex) (s3 : FIInt P).
  case s3 of fiInt (n3 : int).

  let sizealign : SizeAlign a = reprSizeAlign @a rep in

  make_append_list @a @P s3 n3
  (stuckBox @(arr P a)
   (\ (ret : OutPtr (arr P a)) -> Store.

      -- Copy data from l1 and l2 into the output
      fromEffTok @(arr P a)
      (seqEffTok
       (toEffTok @(arr P a)
        (sequential_doall @Np @a @a count1
         (\ (i : int) -> Store.
            -- Copy l1 into the beginning of the list
            copy @a rep
            (subscript @N @a sizealign arr1 i)
            (subscript_out @P @a sizealign ret i))))
       (toEffTok @(arr P a)
        (sequential_doall @Mp @a @a count2
         (\ (i : int) -> Store.
            -- Copy l2 into the end of the list
            copy @a rep
            (subscript @M @a sizealign arr2 i)
            (subscript_out @P @a sizealign ret (i +# n1))))))))
  ret;


appendScatter_initializer : forall a : bare.
                            SizeAlign a -> (NoneType -> NoneType)
                         -> OutPtr (append_list a) -> EffTok;

appendScatter_update_real : forall a : bare.
                        SizeAlign a
                     -> (OutPtr a -> Store)
                     -> EffTok
                     -> OutPtr (append_list a)
                     -> EffTok;


arrScatter @(N : intindex) @(e i : bare)
  (repr_i : Repr i)
  (repr_e : Repr e)
  (count : FIInt N)
  (reduction_op : Scatter e i)
  -> Scatter (arr N e) (Tuple2 (Stored int) i)
  attribute(inline, inline_final) =

  case reduction_op of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s e)
    (update_f : i -> updF)
    (init_f : iniF).

  let type arr_t = arr N e in
  let type i2 = Tuple2 (Stored int) i in

  case count of fiInt (u_count : int).

  case repr_s of
    repr
    (sa_s : SizeAlign s)
    (copy_s : s -> Init s)
    (to_boxed_s : Init s -> AsBox s)
    (to_bare_s : AsBox s -> Init s)
    (pointerless_s : bool).

  mk_scatter @arr_t @i2 @(arr N s) @iniF @updF
  (repr_arr @N @s count repr_s)
  (\ (f : iniF) (p : OutPtr (arr N s)) -> EffTok.
     -- Initialize all array elements
     toEffTok @(arr N s)
     (arr1D_build @N @s repr_s count
      (\ (i : int) (ret : OutPtr s) -> Store.
         fromEffTok @s (initializer f ret)) p))
  (\ (f : updF) (ix : i2) (in_tok : EffTok) (p : OutPtr (arr N s))
     -> EffTok.
     case ix of tuple2 (arr_index : Stored int) (elt_index : i).
     case arr_index of stored (u_arr_index : int).

     -- If index is out of bounds, do nothing
     if or (u_arr_index <# 0) (u_arr_index >=# u_count)
     then in_tok
     else updater f elt_index in_tok
          (subscript_out @N @s sa_s p u_arr_index))

  -- Combine arrays elementwise
  (\ (x : arr N s) (y : arr N s) (ret : OutPtr (arr N s)) -> Store.
     arr1D_build @N @s repr_s count
     (\ (i : int) (local_ret : OutPtr s) -> Store.
        combiner (subscript @N @s sa_s x i) (subscript @N @s sa_s y i)
        local_ret)
     ret)

  -- Update in place if array elements can be updated in place
  -- Otherwise, make a copy
  (case finalizer of {
     mutateInPlace (co : coerce @bare s e).
       mutateInPlace @(arr N s) @(arr N e)
       (unsafeMakeBareCoercion @(arr N s) @(arr N e))
   ; mutateAndCopy (f : s -> Init e).
       mutateAndCopy @(arr N s) @(arr N e)
       (\ (accumulator : arr N s) (ret : OutPtr (arr N e))
          -> Store.
          arr1D_build @N @e repr_e count
          (\ (i : int) (ret : OutPtr e) -> Store.
             f (subscript @N @s sa_s accumulator i) ret)
          ret)
   })
   (\ (ix : i2) -> updF.
      case ix of tuple2 (arr_index : Stored int) (elt_index : i).
      update_f elt_index)
   init_f;


comapScatterIndex @(r i1 i2 : bare)
  (repr_i1 : Repr i1)
  (repr_i2 : Repr i2)
  (repr_r : Repr r)
  (transform : i2 -> Init i1)
  (sr : Scatter r i1)
  -> Scatter r i2
  attribute(inline, inline_final) =

  case sr of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i1 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s r)
    (update_f : i1 -> updF)
    (init_f : iniF).

  letfun
    updater2 (f : updF) (ix : i2) (tok_in : EffTok) (out_ptr : OutPtr s)
      -> EffTok =
      case boxed @i1 (transform ix) of boxed index1.
      updater f index1 tok_in out_ptr in

  letfun
    update_f2 (ix : i2) -> updF =
      case boxed @i1 (transform ix) of boxed index1.
      update_f index1 in

  mk_scatter @r @i2 @s @iniF @updF repr_s initializer
  updater2 combiner finalizer update_f2 init_f;


blistScatter @(box_a i : box)
  (repr_i : Repr (AsBare i))
  (repr_a : Repr (AsBare box_a))
  (dom : list_dim)
  (reduction_op : Scatter (StuckRef box_a) (AsBare i))
  -> Scatter (blist (AsBare box_a)) (Tuple2 (Stored int) (AsBare i)) =
  let type a = AsBare box_a in
  let type boxed_a = StuckRef box_a in
  let type i2 = Tuple2 (Stored int) (AsBare i) in

  -- Use listScatter
  case listScatter @(AsBox boxed_a) @i
       repr_i (repr_StuckRef @(AsBox a)) dom reduction_op of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s (list boxed_a))
    (make_updater : i2 -> updF)
    (make_init : iniF).

  -- Wrap with blist
  let repr_list_a : Repr (list boxed_a) = repr_list @boxed_a in

  let blist_finalizer : UpdateInPlaceFinalizer s (blist a) =
        case finalizer of {
          mutateInPlace
          (co : coerce @bare s (list boxed_a)).
            mutateAndCopy @s @(blist a)
            (\ (x : s) -> Init (blist a).
               make_blist @a
               (copy @(list boxed_a) repr_list_a
                (coerce @s @(list boxed_a) x)))
        ; mutateAndCopy (f : s -> Init (list boxed_a)).
            mutateAndCopy @s @(blist a)
            (\ (x : s) -> Init (blist a). make_blist @a (f x))
        } in

  mk_scatter @(blist a) @i2 @s @iniF @updF repr_s initializer updater combiner
  blist_finalizer make_updater make_init;


listScatter @(box_e i : box)
  (repr_i : Repr (AsBare i))
  (repr_e : Repr (AsBare box_e))
  (dom : list_dim)
  (reduction_op : Scatter (AsBare box_e) (AsBare i))
  -> Scatter (list (AsBare box_e)) (Tuple2 (Stored int) (AsBare i)) =

  let type e = AsBare box_e in
  let type i2 = Tuple2 (Stored int) (AsBare i) in
  let type ret_type = Scatter (list e) i2 in

  case dom of mk_list_dim (mlist_size : MaybeVal int).
  case mlist_size of {
    justVal list_size.
      case defineIntIndex list_size of
        someIInt @(N : intindex) (count : FIInt N).

      -- Create a plain array scatter reducer.
      case arrScatter @N @e @(AsBare i) repr_i repr_e count reduction_op of
        mk_scatter @(s : bare) @(iniF : box) @(updF : box)
        (repr_s : Repr s)
        (initializer : iniF -> OutPtr s -> EffTok)
        (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
        (combiner : s -> s -> Init s)
        (finalizer : UpdateInPlaceFinalizer s (arr N e))
        (make_updater : i2 -> updF)
        (make_init : iniF).

      -- Create a scatter reducer that wraps it in a list
      let list_finalizer : UpdateInPlaceFinalizer s (list e) =
            mutateAndCopy @s @(list e)
            (\ (accumulator : s) (ret : OutPtr (list e)) -> Store.
               make_list @e @N count
               (stuckBox @(arr N e)
                (case finalizer of {
                   mutateInPlace (co : coerce @bare s (arr N e)).
                     copy @(arr N e) (repr_arr @N @e count repr_e)
                     (coerce @s @(arr N e) accumulator)
                 ; mutateAndCopy (f : s -> Init (arr N e)).
                     f accumulator
                 }))
               ret) in

      mk_scatter @(list e) @i2 @s @iniF @updF
      repr_s
      initializer
      updater
      combiner
      list_finalizer
      make_updater
      make_init

  ; nothingVal.
      except @(Scatter (list e) i2)
  };


array1Scatter @(box_e i : box)
  (repr_i : Repr (AsBare i))
  (repr_e : Repr (AsBare box_e))
  (dom : dim1)
  (reduction_op : Scatter (AsBare box_e) (AsBare i))
  -> Scatter (array1 (AsBare box_e)) (Tuple2 (Stored int) (AsBare i)) =

  let type e = AsBare box_e in
  let type i2 = Tuple2 (Stored int) (AsBare i) in
  let type ret_type = Scatter (array1 e) i2 in

  -- Compute array size
  case dim1ToArraySize dom of arraySize @(N : intindex) lb stride count.

  -- Create a plain array scatter reducer.
  case arrScatter @N @e @(AsBare i) repr_i repr_e count reduction_op of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s (arr N e))
    (make_updater : i2 -> updF)
    (make_init : iniF).

  -- Create a scatter reducer that wraps it in an array
  let array_finalizer : UpdateInPlaceFinalizer s (array1 e) =
        mutateAndCopy @s @(array1 e)
        (\ (accumulator : s) (ret : OutPtr (array1 e))
           -> Store.
           mk_array1 @e @N lb stride count
           (stuckBox @(arr N e)
            (case finalizer of {
               mutateInPlace (co : coerce @bare s (arr N e)).
                 copy @(arr N e) (repr_arr @N @e count repr_e)
                 (coerce @s @(arr N e) accumulator)
             ; mutateAndCopy (f : s -> Init (arr N e)).
                 f accumulator
             }))
           ret) in

  -- Transform dim1 indices to linear indices
  letfun
    linearized_updater
      (f : updF) (ix : i2) (tok_in : EffTok) (ret : OutPtr s)
      -> EffTok =
      case ix of tuple2 (arr_ix : Stored int) (val : AsBare i).
      case arr_ix of stored (u_arr_ix : int).

      -- Drop values whose indices are out of bounds due to alignment
      let zeroed_ix : int = u_arr_ix -# lb in
      if zeroed_ix %# stride /=# 0 then tok_in else
      let linearized_ix : int = zeroed_ix //# stride in
      case boxed @i2 (tuple2 @(Stored int) @(AsBare i)
                      (stored @int linearized_ix) (copy @(AsBare i) repr_i val)) of
        boxed new_ix.
      updater f new_ix tok_in ret
  in

  mk_scatter @(array1 e) @i2 @s @iniF @updF
   repr_s
   initializer
   linearized_updater
   combiner
   array_finalizer
   make_updater
   make_init;


barray1Scatter @(box_a i : box)
  (repr_i : Repr (AsBare i))
  (repr_a : Repr (AsBare box_a))
  (dom : dim1)
  (reduction_op : Scatter (StuckRef box_a) (AsBare i))
  -> Scatter (barray1 (AsBare box_a)) (Tuple2 (Stored int) (AsBare i)) =
  let type a = AsBare box_a in
  let type boxed_a = StuckRef (AsBox a) in
  let type i2 = Tuple2 (Stored int) (AsBare i) in

  -- Use array1Scatter
  case array1Scatter @(AsBox boxed_a) @i
       repr_i (repr_StuckRef @(AsBox a)) dom reduction_op of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s (array1 boxed_a))
    (make_updater : i2 -> updF)
    (make_init : iniF).

  -- Wrap with barray1
  let repr_array_a : Repr (array1 boxed_a) = repr_array1 @boxed_a in

  let barray_finalizer : UpdateInPlaceFinalizer s (barray1 a) =
        case finalizer of {
          mutateInPlace
          (co : coerce @bare s (array1 boxed_a)).
            mutateAndCopy @s @(barray1 a)
            (\ (x : s) -> Init (barray1 a).
               mk_barray1 @a
               (copy @(array1 boxed_a) repr_array_a
                (coerce @s @(array1 boxed_a) x)))
        ; mutateAndCopy (f : s -> Init (array1 boxed_a)).
            mutateAndCopy @s @(barray1 a)
            (\ (x : s) -> Init (barray1 a). mk_barray1 @a (f x))
        } in

  mk_scatter @(barray1 a) @i2 @s @iniF @updF repr_s initializer updater combiner
  barray_finalizer make_updater make_init;


array2Scatter @(box_e i : box)
  (repr_i : Repr (AsBare i))
  (repr_e : Repr (AsBare box_e))
  (dom : dim2)
  (reduction_op : Scatter (AsBare box_e) (AsBare i))
  -> Scatter (array2 (AsBare box_e)) (Tuple2 (index dim2) (AsBare i)) =

  let type e = AsBare box_e in
  let type i2 = (Tuple2 (index dim2) (AsBare i)) in
  let type ret_type = Scatter (array2 e) i2 in

  let repr_i2 = repr_Tuple2 @(index dim2) @(AsBare i) repr_index2 repr_i in


  -- Compute array size
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case dim1ToArraySize dom_y of arraySize @(M : intindex) lb_y stride_y count_y.
  case dim1ToArraySize dom_x of arraySize @(N : intindex) lb_x stride_x count_x.

  let type index_1d = Tuple2 (Stored int) (AsBare i) in
  let type index_2d = Tuple2 (Stored int) index_1d in

  let repr_inner_array : Repr (arr N e) =
        repr_arr @N @e count_x repr_e in
  let repr_array : Repr (arr M (arr N e)) =
        repr_arr @M @(arr N e) count_y repr_inner_array in
  let repr_inner_index : Repr index_1d =
        repr_Tuple2 @(Stored int) @(AsBare i) repr_int repr_i in
  let repr_index : Repr index_2d =
        repr_Tuple2 @(Stored int) @index_1d repr_int repr_inner_index in


  -- Create a plain array scatter reducer using two calls to
  -- 'arrScatter'
  let x_scatter_reduction : Scatter (arr N e) index_1d  =
        arrScatter @N @e @(AsBare i) repr_i repr_e count_x reduction_op in
  let xy_scatter_reduction : Scatter (arr M (arr N e)) index_2d =
        arrScatter @M @(arr N e) @index_1d
        repr_inner_index repr_inner_array count_y x_scatter_reduction in

  -- Change the index to the expected data type
  -- Deconstruct the result.
  let arr_scatter_reduction : Scatter (arr M (arr N e)) i2 =
       comapScatterIndex @(arr M (arr N e)) @index_2d @i2
       repr_index repr_i2 repr_array
       (\ (index_in : i2) (ret : OutPtr index_2d) -> Store.
          case index_in of tuple2 (yx : index dim2) (z : AsBare i).
          case yx of tuple2 y x.
          case x of stored u_x.
          case y of stored u_y.

          tuple2 @(Stored int) @index_1d
          (stored @int u_y)
          (tuple2 @(Stored int) @(AsBare i)
           (stored @int u_x) (copy @(AsBare i) repr_i z))
          ret)
       xy_scatter_reduction in
  case arr_scatter_reduction of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s (arr M (arr N e)))
    (make_updater : i2 -> updF)
    (make_init : iniF).

  -- Create a scatter reducer that wraps it in an array
  let array_finalizer : UpdateInPlaceFinalizer s (array2 e) =
        mutateAndCopy @s @(array2 e)
        (\ (accumulator : s) (ret : OutPtr (array2 e))
           -> Store.
           mk_array2 @e @M @N
           lb_y stride_y count_y lb_x stride_x count_x
           (stuckBox @(arr M (arr N e))
            (case finalizer of {
               mutateInPlace (co : coerce @bare s (arr M (arr N e))).
                 copy @(arr M (arr N e)) repr_array
                 (coerce @s @(arr M (arr N e)) accumulator)
             ; mutateAndCopy (f : s -> Init (arr M (arr N e))).
                 f accumulator
             }))
           ret) in

  -- Transform dim2 indices to linear indices
  letfun
    linearized_updater
      (f : updF) (ix : i2) (tok_in : EffTok) (ret : OutPtr s)
      -> EffTok =
      case ix of tuple2 (arr_ix : index dim2) (val : AsBare i).
      case arr_ix of tuple2 (ix_y : Stored int) (ix_x : Stored int).
      case ix_y of stored u_ix_y.
      case ix_x of stored u_ix_x.

      -- Drop values whose indices are out of bounds due to alignment
      let zeroed_ix_y : int = u_ix_y -# lb_y in
      let zeroed_ix_x : int = u_ix_x -# lb_x in
      if zeroed_ix_y %# stride_y /=# 0 then tok_in else
      if zeroed_ix_x %# stride_x /=# 0 then tok_in else
      let linearized_ix_y : int = zeroed_ix_y //# stride_y in
      let linearized_ix_x : int = zeroed_ix_x //# stride_x in
      case boxed @i2 (tuple2 @(index dim2) @(AsBare i)
                      (tuple2 @(Stored int) @(Stored int)
                       (stored @int linearized_ix_y) (stored @int linearized_ix_x))
                      (copy @(AsBare i) repr_i val)) of
        boxed new_ix.
      updater f new_ix tok_in ret
  in

  mk_scatter @(array2 e) @i2 @s @iniF @updF
   repr_s
   initializer
   linearized_updater
   combiner
   array_finalizer
   make_updater
   make_init;


barray2Scatter @(box_a i : box)
  (repr_i : Repr (AsBare i))
  (repr_a : Repr (AsBare box_a))
  (dom : dim2)
  (reduction_op : Scatter (StuckRef box_a) (AsBare i))
  -> Scatter (barray2 (AsBare box_a)) (Tuple2 (index dim2) (AsBare i)) =
  let type a = AsBare box_a in
  let type boxed_a = StuckRef (AsBox a) in
  let type i2 = Tuple2 (index dim2) (AsBare i) in

  -- Use array2Scatter
  case array2Scatter @(AsBox boxed_a) @i
       repr_i (repr_StuckRef @(AsBox a)) dom reduction_op of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s (array2 boxed_a))
    (make_updater : i2 -> updF)
    (make_init : iniF).

  -- Wrap with barray2
  let repr_array_a : Repr (array2 boxed_a) = repr_array2 @boxed_a in

  let barray_finalizer : UpdateInPlaceFinalizer s (barray2 a) =
        case finalizer of {
          mutateInPlace (co : coerce @bare s (array2 boxed_a)).
            mutateAndCopy @s @(barray2 a)
            (\ (x : s) -> Init (barray2 a).
               mk_barray2 @a
               (copy @(array2 boxed_a) repr_array_a
                (coerce @s @(array2 boxed_a) x)))
        ; mutateAndCopy (f : s -> Init (array2 boxed_a)).
            mutateAndCopy @s @(barray2 a)
            (\ (x : s) -> Init (barray2 a). mk_barray2 @a (f x))
        } in

  mk_scatter @(barray2 a) @i2 @s @iniF @updF repr_s initializer updater combiner
  barray_finalizer make_updater make_init;


array3Scatter @(box_e i : box)
  (repr_i : Repr (AsBare i))
  (repr_e : Repr (AsBare box_e))
  (dom : dim3)
  (reduction_op : Scatter (AsBare box_e) (AsBare i))
  -> Scatter (array3 (AsBare box_e)) (Tuple2 (index dim3) (AsBare i)) =

  let type e = AsBare box_e in
  let type i3 = (Tuple2 (index dim3) (AsBare i)) in
  let type ret_type = Scatter (array3 e) i3 in

  let repr_i3 = repr_Tuple2 @(index dim3) @(AsBare i) repr_index3 repr_i in

  -- Compute array size
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case dim1ToArraySize dom_z of arraySize @(L : intindex) lb_z stride_z count_z.
  case dim1ToArraySize dom_y of arraySize @(M : intindex) lb_y stride_y count_y.
  case dim1ToArraySize dom_x of arraySize @(N : intindex) lb_x stride_x count_x.

  let type index_1d = Tuple2 (Stored int) (AsBare i) in
  let type index_2d = Tuple2 (Stored int) index_1d in
  let type index_3d = Tuple2 (Stored int) index_2d in
  let type arr1d = arr N e in
  let type arr2d = arr M arr1d in
  let type arr3d = arr L arr2d in

  let repr_inner_array : Repr arr1d =
        repr_arr @N @e count_x repr_e in
  let repr_plane : Repr arr2d =
        repr_arr @M @arr1d count_y repr_inner_array in
  let repr_array : Repr arr3d =
        repr_arr @L @arr2d count_z repr_plane in
  let repr_inner_index : Repr index_1d =
        repr_Tuple2 @(Stored int) @(AsBare i) repr_int repr_i in
  let repr_plane_index : Repr index_2d =
        repr_Tuple2 @(Stored int) @index_1d repr_int repr_inner_index in
  let repr_index : Repr index_3d =
        repr_Tuple2 @(Stored int) @index_2d repr_int repr_plane_index in

  -- Create a plain array scatter reducer using three calls to
  -- 'arrScatter'
  let x_scatter_reduction : Scatter arr1d index_1d  =
        arrScatter @N @e @(AsBare i) repr_i repr_e count_x reduction_op in
  let xy_scatter_reduction : Scatter arr2d index_2d =
        arrScatter @M @arr1d @index_1d
        repr_inner_index repr_inner_array count_y x_scatter_reduction in
  let xyz_scatter_reduction : Scatter arr3d index_3d =
        arrScatter @L @arr2d @index_2d
        repr_plane_index repr_plane count_z xy_scatter_reduction in

  -- Change the index to the expected data type
  -- Deconstruct the result.
  let arr_scatter_reduction : Scatter arr3d i3 =
       comapScatterIndex @arr3d @index_3d @i3
       repr_index repr_i3 repr_array
       (\ (index_in : i3) (ret : OutPtr index_3d) -> Store.
          case index_in of
            tuple2 (zyx : index dim3) (val : AsBare i).
          case zyx of tuple3 z y x.
          case z of stored u_z.
          case y of stored u_y.
          case x of stored u_x.

          tuple2 @(Stored int) @index_2d
          (stored @int u_z)
          (tuple2 @(Stored int) @index_1d
           (stored @int u_y)
           (tuple2 @(Stored int) @(AsBare i)
            (stored @int u_x) (copy @(AsBare i) repr_i val)))
          ret)
       xyz_scatter_reduction in
  case arr_scatter_reduction of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i3 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s arr3d)
    (make_updater : i3 -> updF)
    (make_init : iniF).

  -- Create a scatter reducer that wraps it in an array
  let array_finalizer : UpdateInPlaceFinalizer s (array3 e) =
        mutateAndCopy @s @(array3 e)
        (\ (accumulator : s) (ret : OutPtr (array3 e))
           -> Store.
           mk_array3 @e @L @M @N
           lb_z stride_z count_z
           lb_y stride_y count_y
           lb_x stride_x count_x
           (stuckBox @arr3d
            (case finalizer of {
               mutateInPlace (co : coerce @bare s arr3d).
                 copy @arr3d repr_array
                 (coerce @s @arr3d accumulator)
             ; mutateAndCopy (f : s -> Init arr3d).
                 f accumulator
             }))
           ret) in

  -- Transform dim3 indices to linear indices
  letfun
    linearized_updater
      (f : updF) (ix : i3) (tok_in : EffTok) (ret : OutPtr s)
      -> EffTok =
      case ix of tuple2 (arr_ix : index dim3) (val : AsBare i).
      case arr_ix of tuple3 ix_z ix_y ix_x.
      case ix_z of stored u_ix_z.
      case ix_y of stored u_ix_y.
      case ix_x of stored u_ix_x.

      -- Drop values whose indices are out of bounds due to alignment
      let zeroed_ix_z : int = u_ix_z -# lb_z in
      let zeroed_ix_y : int = u_ix_y -# lb_y in
      let zeroed_ix_x : int = u_ix_x -# lb_x in
      if zeroed_ix_z %# stride_z /=# 0 then tok_in else
      if zeroed_ix_y %# stride_y /=# 0 then tok_in else
      if zeroed_ix_x %# stride_x /=# 0 then tok_in else
      let linearized_ix_z : int = zeroed_ix_z //# stride_z in
      let linearized_ix_y : int = zeroed_ix_y //# stride_y in
      let linearized_ix_x : int = zeroed_ix_x //# stride_x in
      case boxed @i3 (tuple2 @(index dim3) @(AsBare i)
                      (tuple3 @(Stored int) @(Stored int) @(Stored int)
                       (stored @int linearized_ix_z)
                       (stored @int linearized_ix_y)
                       (stored @int linearized_ix_x))
                      (copy @(AsBare i) repr_i val)) of
        boxed new_ix.
      updater f new_ix tok_in ret
  in

  mk_scatter @(array3 e) @i3 @s @iniF @updF
   repr_s
   initializer
   linearized_updater
   combiner
   array_finalizer
   make_updater
   make_init;


barray3Scatter @(box_a i : box)
  (repr_i : Repr (AsBare i))
  (repr_a : Repr (AsBare box_a))
  (dom : dim3)
  (reduction_op : Scatter (StuckRef box_a) (AsBare i))
  -> Scatter (barray3 (AsBare box_a)) (Tuple2 (index dim3) (AsBare i)) =

  let type a = AsBare box_a in
  let type boxed_a = StuckRef (AsBox a) in
  let type i2 = Tuple2 (index dim3) (AsBare i) in

  -- Use array3Scatter
  case array3Scatter @(AsBox boxed_a) @i
       repr_i (repr_StuckRef @(AsBox a)) dom reduction_op of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i2 -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s (array3 boxed_a))
    (make_updater : i2 -> updF)
    (make_init : iniF).

  -- Wrap with barray3
  let repr_array_a : Repr (array3 boxed_a) = repr_array3 @boxed_a in

  let barray_finalizer : UpdateInPlaceFinalizer s (barray3 a) =
        case finalizer of {
          mutateInPlace
          (co : coerce @bare s (array3 boxed_a)).
            mutateAndCopy @s @(barray3 a)
            (\ (x : s) -> Init (barray3 a).
               mk_barray3 @a
               (copy @(array3 boxed_a) repr_array_a
                (coerce @s @(array3 boxed_a) x)))
        ; mutateAndCopy (f : s -> Init (array3 boxed_a)).
            mutateAndCopy @s @(barray3 a)
            (\ (x : s) -> Init (barray3 a). mk_barray3 @a (f x))
        } in

  mk_scatter @(barray3 a) @i2 @s @iniF @updF repr_s initializer updater combiner
  barray_finalizer make_updater make_init;


-- Using the contents of a 'Scatter' object, perform part of a scatter
-- operation sequentially on a list_dim.  Return the scatter state.

Sequence_partial_scatter @(i s : bare) @(iniF updF : box)
  (repr_i : Repr i) (repr_s : Repr s)
  (initializer : iniF -> OutPtr s -> EffTok)
  (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
  (make_updater : i -> updF)
  (make_init : iniF)
  (src : Sequence (AsBox i))
  (ret : OutPtr s)
  -> Store
  attribute(inline, inline_sequential) =

  let type SEff = Stored EffTok in

   -- Initialize the output
   case boxed @SEff (stored @EffTok (initializer make_init ret)) of
     boxed init_eff_tok.

   case boxed @SEff
        (Sequence_fold @i @SEff
         repr_i repr_EffTok
         (\ (x : SEff) (y : i) (loop_ret : OutPtr SEff) -> Store.
            case x of stored x_u.
            stored @EffTok (updater (make_updater y) y x_u ret) loop_ret)
            init_eff_tok
            src) of
     boxed s_final_eff_tok.

   -- Translate to a return value
   case s_final_eff_tok of stored final_eff_tok.
   fromEffTok @s final_eff_tok;


-- Using the contents of a 'Scatter' object, perform part of a scatter
-- operation sequentially on a list_dim.  Return the scatter state.

partial_list_dim_scatter @(i s : bare) @(iniF updF : box)
  (repr_i : Repr i) (repr_s : Repr s)
  (initializer : iniF -> OutPtr s -> EffTok)
  (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
  (make_updater : i -> updF)
  (make_init : iniF)
  (dom : list_dim)
  (f : Stored int -> Init i)
  (ret : OutPtr s)
  -> Store
  attribute(inline, inline_sequential) =

  let type SEff = Stored EffTok in

  -- Initialize the output
  case boxed @SEff (stored @EffTok (initializer make_init ret)) of
     boxed init_eff_tok.

   -- Sequential in-place update
   case boxed @SEff
        (primitive_list_dim_fold @SEff
         repr_EffTok dom
         (\ (ix : Stored int) (x : SEff) (loop_ret : OutPtr SEff) -> Store.
            case x of stored x_u.

            -- Compute a value
            case stuckBox @i (f ix) of stuckBox y.

            -- Perform an update
            stored @EffTok (updater (make_updater y) y x_u ret) loop_ret)
         init_eff_tok) of
     boxed s_final_eff_tok.

   -- Translate to a return value
   case s_final_eff_tok of stored final_eff_tok.
   fromEffTok @s final_eff_tok;


finish_scatter @(r s : bare) 
  (rep_r : Repr r)
  (rep_s : Repr s)
  (finalizer : UpdateInPlaceFinalizer s r)
  (w : Init s)
  (ret : OutPtr r)
  -> Store
  attribute(inline, inline_sequential) =

  case finalizer of {
    mutateInPlace (co : coerce @bare s r).
      (coerce @(Init s) @(Init r) w) ret

  ; mutateAndCopy (f : s -> Init r).
      case boxed @s w of boxed tmp.
      f tmp ret
  };

-------------------------------------------------------------------------------
-- Sets of integers

-- A set of integers, represented as a hash table.
-- The hash table consists of an array of integers and an array
-- of linked list indices (used for collisions).
data intset : bare
{
  mk_intset @(N : intindex) (FIInt N,
                             StuckBox (Tuple2 (arr N (Stored int))
                                              (arr N (Stored uint))));
};

build_intset (ls : Boxed (list (Stored int)))
  -> Boxed intset attribute(inline) =
  case ls of boxed u_ls.
  case u_ls of make_list @(N : intindex) (list_size : FIInt N) barr.
  case barr of stuckBox (a : arr N (Stored int)).

  -- Compute size of hash table
  let table_count : int = compute_hash_table_size @N list_size in

  case defineIntIndex table_count of
    someIInt @(M : intindex) (table_size : FIInt M).

  -- Create hash table
  let type HT = Tuple2 (arr M (Stored int)) (arr M (Stored uint)) in
  let hash_table =
   stuckBox @HT (build_hash_table @N @M list_size table_size a) in

  boxed @intset (mk_intset @M table_size hash_table);


compute_hash_table_size : forall N : intindex. FIInt N -> int;
build_hash_table : forall N M : intindex.
                   FIInt N -> FIInt M
                -> arr N (Stored int)
                -> Init (Tuple2 (arr M (Stored int)) (arr M (Stored uint)));

intsetLookup (set : Boxed intset) (key : Boxed (Stored int))
  -> Boxed (Maybe (Stored int)) attribute(inline) =

  case set of boxed u_set.
  case u_set of mk_intset @(N : intindex) (size : FIInt N) contents.
  case contents of stuckBox tuple.
  case tuple of tuple2 keys_array inds_array.

  let ix =
        lookup_hash_table @N size keys_array inds_array (unboxIntValue key) in
  if ix ==# -1
  then boxed @(Maybe (Stored int)) (nothing @(Stored int))
  else boxed @(Maybe (Stored int)) (just @(Stored int) (stored @int ix));


lookup_hash_table : forall N : intindex.
                    FIInt N
                 -> arr N (Stored int)
                 -> arr N (Stored uint)
                 -> int
                 -> int;

intsetElements (set : Boxed intset)
  -> Stream1 (Boxed (Stored int)) attribute(inline) =
  case set of boxed u_set.
  case u_set of mk_intset @(N : intindex) (size : FIInt N) contents.
  case size of fiInt (count : int).
  case contents of stuckBox tuple.
  case tuple of tuple2 keys_array inds_array.

  -- For each array element
  let dom : list_dim = mk_list_dim (justVal @int count) in

  sequenceStream @(Boxed (Stored int))
  (Sequence_generate_bind @(Stored int) dom
   (\ (si : Boxed (Stored int)) -> Sequence (Boxed (Stored int)).

     let i = unboxIntValue si in

     -- Check inds_array to determine if the i_th element of keys_array
     -- holds a key
     case subscript @N @(Stored uint)
          (reprSizeAlign @(Stored uint) repr_uint) inds_array i
       of stored indirection.

     if oper_BITWISEAND (uintToInt indirection) 1 ==# 1
     then case subscript @N @(Stored int)
          (reprSizeAlign @(Stored int) repr_int) keys_array i
            of stored key.
          Sequence_return @(Stored int) repr_int (stored @int key)
     else Sequence_empty @(Stored int) repr_int));

-------------------------------------------------------------------------------
-- Trees of lists

-- Trees of lists.  These are used as temporary data structures
-- when constructing irregular arrays.
--
-- Invariant: 'pbBranch' never contains 'pbEmpty'.
data PBTree (a : bare) : box
{
  -- A branch with two children.
  -- The 'int' is the total number of list elements in its leaves.
  pbBranch (int, PBTree a, PBTree a);
  pbLeaf (list a);
  pbEmpty ();
};


-- Get the number of 'a's in a PBtree 
PBTree_size @(a : bare) (t : PBTree a) -> int =
  case t of {
    pbLeaf l.
      case l of make_list @(n : intindex) (len : FIInt n) b.
      case len of fiInt i. i
  ; pbBranch i t1 t2.
      i
  ; pbEmpty.
      0
  };


-- Create a new branch, computing the number of 'a's in the branch.
-- Do not create a branch if one of the leaves is empty.
PBTree_branch @(a : bare) (ta : PBTree a) (tb : PBTree a) -> PBTree a =
  let tot_sz : int = PBTree_size @a ta +# PBTree_size @a tb in
  letfun both (x : NoneType) -> PBTree a = pbBranch @a tot_sz ta tb in
  letfun
    k1 (empty : NoneType) -> PBTree a =
      case tb of {
        pbEmpty. ta
      ; pbLeaf l. both None
      ; pbBranch n e_ta e_tb. both None
      } in
  case ta of {
    pbEmpty. tb
  ; pbLeaf l. k1 None
  ; pbBranch n e_ta e_tb. k1 None
  };


-- Flatten a PBTree to a list.  The list contains the elements of the PBTree
-- in the same order.
PBTree_flatten @(a : bare)
  (rep : Repr a) (tree : PBTree a) (ret : OutPtr (list a)) -> Store
  attribute(inline) =
  -- Get the list size
  case defineIntIndex (PBTree_size @a tree) of
    someIInt @(n : intindex) (out_list_dim : FIInt n).

  letfun
    -- Copy the given subtree to the output, at the given offset
    storeTreeVal (new_ind : int) (t : PBTree a) (ret_p : OutPtr (arr n a)) -> Store =
      let ind : int = new_ind in
      case t of {
        pbEmpty.
          fromEffTok @a emptyEffTok

      ; pbBranch e_i ta tb.
          let ta_sz : int = PBTree_size @a ta in
          fromEffTok @a
          (seqEffTok (toEffTok @a (storeTreeVal new_ind ta ret_p))
                     (toEffTok @a (storeTreeVal (new_ind +# ta_sz) tb ret_p)))

      ; pbLeaf tree_list.
          case tree_list of make_list @(m : intindex) (tree_list_dim : FIInt m) list_sb.
          case list_sb of stuckBox (tree_list_array : (arr m a)).
          case rep of
            repr
            (sa : SizeAlign a)
            (copy_a : a -> Init a)
            (to_boxed_a : Init a -> AsBox a)
            (to_bare_a : AsBox a -> Init a)
            (pointerless_a : bool).

          doall @m @a @a tree_list_dim
          (\ (i : int) -> Store.
            copy @a rep
            (subscript @m @a sa tree_list_array i)
            (subscript_out @n @a sa ret_p (i +# ind)))
      } in

  -- Create a new list.
  -- In parallel, copy results into the list.
  make_list @a @n out_list_dim
  (stuckBox @(arr n a)
   (\ (ret_p : OutPtr (arr n a)) -> Store.
     blocked_PBTree_doall @a @(list a) tree
     (\ (i : int) (t : PBTree a) -> Store.
     storeTreeVal i t ret_p)))
  ret;
  
  

-------------------------------------------------------------------------------
-- Streams

-- A dynamically computed sequence of values, possibly with run-time
-- shape information.
type Stream : box -> box -> box;

-- A 1-dimensional stream of values, represented either as a
-- view or as a linear stream.
data Stream1 (a : box) : box
{
  sequenceStream (Sequence a);
  viewStream (view list_dim a);
};

-- A dynamically computed sequence of values.
data Sequence (a : box) : box
{
  -- A stream is a (state, generator) pair.
  sequence @(st : box) (st, st -> StreamNext st a);
};

-- The result of attempting to pull a value from a stream.
data StreamNext (st : box) (a : box) : val
{
  streamEmpty ();
  streamValue (st, a);
};

-- The state of the stream 'bind' operator
data BindState (src_st : box) (src_elt trans_elt : box) : box
{
  -- Pull the next value from the source stream
  -- (Also represents a depleted stream)
  bindFromSource (src_st);

  -- Pull the next value from the stream transformer
  bindFromTrans @(trans_st : box)
    (src_st,
     trans_st,
     trans_st -> StreamNext trans_st trans_elt);
};

-- State of a chained stream
data ChainState (a b : box) : box
{
  chainFromFirst (a, b);
  chainFromNext (b);
};



-------------------------------------------------------------------------------
-- Views

--  A view is a container represented by a function
data view (sh : box) (a : box) : box
{
  mk_view (sh, AsBox (index sh) -> a);
};

-------------------------------------------------------------------------------
-- Storage

data list (a : bare) : bare
{
  make_list @(n : intindex)
  (FIInt n, StuckBox (arr n a));
};

-- A list of boxed objects
data blist (a : bare): bare
{
  make_blist (list (StuckRef (AsBox a)));
};

-- A list with extra fields supporting a mutable "append" operation.
-- The 'FIInt n' field is the actual array size.
-- The int field is the number of valid array elements.  Other elements are
-- zeroed.
-- Mutable operations are implemented in low-level code.
data append_list (a : bare) : bare
{
  make_append_list @(n : intindex)
  (FIInt n, int, StuckBox (arr n a));
};

-- An array type, parameterized over its dimension.
-- The array type contains its bounds.
type array : bare -> bare -> bare;

-- A singleton container
data array0 (a : bare) : bare
{
  mk_array0 (StuckBox a);
};

-- A 1D array.
-- The array's domain is described by a lower bound, stride, and size.
data array1 (a : bare) : bare
{
  mk_array1 @(N : intindex)
  (int, int, FIInt N, StuckBox (arr N a));
};

-- A 2D array.
-- The array's domain is described by a lower bound, stride, and size in
-- the Y dimension, and a lower bound, stride, and size in the X dimension.
data array2 (a : bare) : bare
{
  mk_array2 @(M N : intindex)
  (int, int, FIInt M, int, int, FIInt N, StuckBox (arr M (arr N a)));
};

-- A 3D array.
-- The array's domain is described by a lower bound, stride, and size in
-- the Z, Y, and X dimensions.
data array3 (a : bare) : bare
{
  mk_array3 @(L M N : intindex)
  (int, int, FIInt L,
   int, int, FIInt M,
   int, int, FIInt N,
   StuckBox (arr L (arr M (arr N a))));
};

-- A 1D boxed array.
data barray1 (a : bare) : bare
{
  mk_barray1 (array1 (StuckRef (AsBox a)));
};

-- A 2D boxed array.
data barray2 (a : bare) : bare
{
  mk_barray2 (array2 (StuckRef (AsBox a)));
};

-- A 3D boxed array.
data barray3 (a : bare) : bare
{
  mk_barray3 (array3 (StuckRef (AsBox a)));
};

-- Array size, computed from a 'dim1'.  These values are more
-- convenient for constructing loops.  
data ArraySize : val
{
  -- The fields are a lower bound, stride, and size.
  arraySize @(N : intindex) (int, int, FIInt N);
};

-- Convert the "size" fields of an array to an equivalent dim1.
arrayDescToDim1 @(N : intindex) (lb : int) (stride : int) (size : FIInt N)
  -> dim1 attribute(inline) =
  case size of fiInt (size_i : int).

  let ub : int = lb +# stride *# size_i in
  mk_dim1 (interval (justVal @int lb) (justVal @int ub)) (linearMap stride lb);


-- Convert a dim1 to the equivalent "size" fields of an array.
dim1ToArraySize (shp : dim1) -> ArraySize attribute(inline) =
  case shp of mk_dim1 (iv : Interval) (m : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case lb of {
    justVal lb_i.
      case ub of {
        justVal ub_i.
          case m of linearMap (stride : int) (alignment : int).
          let size_i : int = (ub_i -# lb_i) //# stride in
          case defineIntIndex size_i of
            someIInt @(N : intindex) (size : FIInt N).
          arraySize @N lb_i stride size
      ; nothingVal.
          except @ArraySize
      }
  ; nothingVal.
      except @ArraySize
  };


-------------------------------------------------------------------------------
-- Shapes

-- Get the stream shape corresponding to a container
type shape : (box -> box) -> box;

-- The shape of a list stream.
-- 'Nothing' is an infinite stream; otherwise the shape is the length.
data list_dim : box
{
  mk_list_dim (MaybeVal int);
};

-- The shape of a singleton stream
data dim0 : box
{
  mk_dim0 ();
};

-- A one-dimensional domain.
-- The domain is the intersection of an interval and a linear map's range.
--
-- Invariants:
-- The interval's lower and upper bounds are in the range of the linear map.
-- The linear map's stride is positive.
-- The linear map's alignment may be anything; it's not constrained to be a
-- small positive number.
data dim1 : box
{
  mk_dim1 (Interval, LinearMap);
};

-- A two-dimensional domain.  The cross product of two domains.
data dim2 : box
{
  mk_dim2 (dim1, dim1);
};

-- A three-dimensional domain.  The cross product of three domains.
data dim3 : box
{
  mk_dim3 (dim1, dim1, dim1);
};

-- The shape of an array stream.
-- Array streams are zero-indexed.
data arr_shape (n : intindex) (sh : box) : box
{
  mk_arr_shape (sh);
};

shapeIndexRepr : forall sh : box. ShapeDict sh -> Repr (index sh);
shapeSliceRepr : forall sh : box. ShapeDict sh -> Repr (slice sh);

-------------------------------------------------------------------------------
-- Representation dictionaries

copy @(a : bare) (rep : Repr a) (src : a) (dst : OutPtr a) -> Store
  attribute(conlike, inline, inline_postfinal) =

  case rep of repr sa copy_a to_boxed_a to_bare_a pointerless_a.

  copy_a src dst;

asbox : forall a : bare. Repr a -> Init a -> AsBox a;
asbare : forall a : bare. Repr a -> AsBox a -> Init a;


bareToBox @(a : bare) (rep : Repr a) (x : a) -> AsBox a attribute(inline) =
  asbox @a rep (copy @a rep x);


boxToBare @(a : bare) (rep : Repr a) (x : AsBox a) -> a attribute(inline) =
  case stuckBox @a (asbare @a rep x) of stuckBox y. y;


reprSizeAlign @(a : bare) (rep : Repr a) -> SizeAlign a
  attribute(inline) =

  case rep of repr sa copy_a to_boxed_a to_bare_a pointerless_a.

  sa;


dynamicCopyError @(a : bare) (x : a) (ret : OutPtr a) -> Store
  attribute(inline) =
  except @Store;

-- Copy an array.  Use a loop to copy individual array elements.
copyArray @(N : intindex) @(a : bare)
  (rep : Repr a) (size : IInt N) (src : arr N a) (ret : OutPtr (arr N a))
  -> Store
  attribute(inline) =
  case rep of repr sa copy_a to_boxed_a to_bare_a pointerless_a.

  case size of {
    iInt (fsize : FIInt N).
      -- Copy each item in a loop
      doall @N @a @a fsize
      (\ (i : int) -> Store.
        copy @a rep
        (subscript @N @a sa src i)
        (subscript_out @N @a sa ret i))
  ; iPosInfty. except @Store
  ; iNegInfty. except @Store
  };

-- This function is inserted by the simplifier to convert data constructor
-- applications to values
reify : forall a : bare. Repr a -> Init a -> a;

reprVal_store : ReprVal Store attribute(builtin) =
  reprVal @Store (sizeAlignVal @Store 0U 1U) True;

-- Platform-dependent sizes and alignments
reprVal_int : ReprVal int attribute(inline, builtin) =
  reprVal @int (sizeAlignVal @int 4U 4U) True;

reprVal_uint : ReprVal uint attribute(inline, builtin) =
  reprVal @uint (sizeAlignVal @uint 4U 4U) True;

reprVal_float : ReprVal float attribute(inline, builtin) =
  reprVal @float (sizeAlignVal @float 4U 4U) True;

sizealign_store : SizeAlign (Stored Store);
sizealign_int : SizeAlign (Stored int);
sizealign_uint : SizeAlign (Stored uint);
sizealign_float : SizeAlign (Stored float);
sizealign_bool : SizeAlign (Stored bool);
sizealign_NoneType : SizeAlign (Stored NoneType);
sizealign_EffTok : SizeAlign (Stored EffTok);
sizealign_Ref : forall a : box. SizeAlign (Ref a);
sizealign_StuckRef : forall a : box. SizeAlign (StuckRef a);

defaultAsBox @(a : bare) (x : Init a) -> Boxed a
  attribute(inline, inline_postfinal, builtin) =
  boxed @a x;

defaultAsBare @(a : bare) (c : a -> Init a) (x : Boxed a) (r : OutPtr a)
  -> Store
  attribute(inline, inline_postfinal, builtin) =
  case x of boxed ux. c ux r;

copy_int (src : Stored int) (ret : OutPtr (Stored int)) -> Store
  attribute(inline) =
  case src of stored x. stored @int x ret;

box_int (x : Init (Stored int)) -> Boxed (Stored int)
  attribute(inline) =
  boxed @(Stored int) x;

unbox_int (x : Boxed (Stored int)) (ret : OutPtr (Stored int)) -> Store
  attribute(inline) =
  case x of boxed sf.
  case sf of stored x. stored @int x ret;

repr_int : Repr (Stored int) attribute(inline, inline_final) =
  repr @(Stored int) sizealign_int copy_int box_int unbox_int True;

copy_uint (src : Stored uint) (ret : OutPtr (Stored uint)) -> Store
  attribute(inline) =
  case src of stored x. stored @uint x ret;

box_uint (x : Init (Stored uint)) -> Boxed (Stored uint)
  attribute(inline) =
  boxed @(Stored uint) x;

unbox_uint (x : Boxed (Stored uint)) (ret : OutPtr (Stored uint)) -> Store
  attribute(inline) =
  case x of boxed sf.
  case sf of stored x. stored @uint x ret;

repr_uint : Repr (Stored uint) attribute(inline, inline_final) =
  repr @(Stored uint) sizealign_uint copy_uint box_uint unbox_uint True;

copy_float (src : Stored float) (ret : OutPtr (Stored float)) -> Store
  attribute(inline) =
  case src of stored x. stored @float x ret;

box_float (x : Init (Stored float)) -> Boxed (Stored float)
  attribute(inline) =
  boxed @(Stored float) x;

unbox_float (x : Boxed (Stored float)) (ret : OutPtr (Stored float)) -> Store
  attribute(inline) =
  case x of boxed sf.
  case sf of stored x. stored @float x ret;

repr_float : Repr (Stored float) attribute(inline, inline_final) =
  repr @(Stored float) sizealign_float copy_float box_float unbox_float True;

repr_bool : Repr (Stored bool);
repr_NoneType : Repr (Stored NoneType);
repr_FIInt : forall n : intindex. Repr (Stored (FIInt n));
repr_SliceObject : Repr SliceObject;
repr_list_dim : Repr (Ref list_dim);
repr_dim0 : Repr (Ref dim0);
repr_dim1 : Repr (Ref dim1);
repr_dim2 : Repr (Ref dim2);
repr_dim3 : Repr (Ref dim3);

repr_index2 : Repr (Tuple2 (Stored int) (Stored int)) =
  repr_Tuple2 @(Stored int) @(Stored int) repr_int repr_int;

repr_slice2 : Repr (Tuple2 SliceObject SliceObject) =
  repr_Tuple2 @SliceObject @SliceObject repr_SliceObject repr_SliceObject;

repr_index3 : Repr (Tuple3 (Stored int) (Stored int) (Stored int)) =
  repr_Tuple3 @(Stored int) @(Stored int) @(Stored int)
  repr_int repr_int repr_int;

repr_slice3 : Repr (Tuple3 SliceObject SliceObject SliceObject) =
  repr_Tuple3 @SliceObject @SliceObject @SliceObject
  repr_SliceObject repr_SliceObject repr_SliceObject;

repr_append_list @(a : bare) (rep : Repr a) -> Repr (append_list a)
  attribute(inline, inline_postfinal) =

  letfun
    copy_append_list (src : append_list a) (dst : OutPtr (append_list a)) -> Store =
      case src of
        make_append_list @(N : intindex)
        (capacity : FIInt N) (size : int) (arr : StuckBox (arr N a)).

      make_append_list @a @N capacity size arr dst
  in

  repr @(append_list a) (sizealign_append_list @a)
  copy_append_list
  (\ (x : Init (append_list a)) -> Boxed (append_list a).
    boxed @(append_list a) x)
  (\ (x : Boxed (append_list a)) (ret : OutPtr (append_list a)) -> Store.
    case x of boxed (y : append_list a). copy_append_list y ret)
  False;

copy_ListBuilder @(a : bare)
  (src : Stored (ListBuilder a)) (ret : OutPtr (Stored (ListBuilder a))) -> Store
  attribute(inline) =
  case src of stored x. stored @(ListBuilder a) x ret;

box_ListBuilder @(a : bare) (x : Init (Stored (ListBuilder a)))
  -> Boxed (Stored (ListBuilder a))
  attribute(inline) =
  boxed @(Stored (ListBuilder a)) x;

unbox_ListBuilder @(a : bare) (x : Boxed (Stored (ListBuilder a)))
  (ret : OutPtr (Stored (ListBuilder a))) -> Store
  attribute(inline) =
  case x of boxed sf.
  case sf of stored x. stored @(ListBuilder a) x ret;

repr_ListBuilder @(a : bare) -> Repr (Stored (ListBuilder a))
  attribute(inline, inline_postfinal) =
  repr @(Stored (ListBuilder a))
  (sizealign_ListBuilder @a)
  (copy_ListBuilder @a)
  (box_ListBuilder @a)
  (unbox_ListBuilder @a)
  False;

repr_array0 @(a : bare) -> Repr (array0 a)
  attribute(inline, inline_postfinal) =

  letfun copy_array (x : array0 a) (ret : OutPtr (array0 a)) -> Store =
    case x of mk_array0 arr_ref. mk_array0 @a arr_ref ret
  in

  repr @(array0 a) (sizealign_array0 @a) copy_array
  (\ (x : Init (array0 a)) -> Boxed (array0 a).
    boxed @(array0 a) x)
  (\ (x : Boxed (array0 a)) (ret : OutPtr (array0 a)) -> Store.
     case x of boxed ux. copy_array ux ret)
  False;


repr_array1 @(a : bare) -> Repr (array1 a)
  attribute(inline, inline_postfinal) =

  letfun copy_array (x : array1 a) (ret : OutPtr (array1 a)) -> Store =
     case x of mk_array1 @(N : intindex) lb stride count arr_ref.

     mk_array1 @a @N lb stride count arr_ref ret
  in

  repr @(array1 a) (sizealign_array1 @a) copy_array
  (\ (x : Init (array1 a)) -> Boxed (array1 a).
    boxed @(array1 a) x)
  (\ (x : Boxed (array1 a)) (ret : OutPtr (array1 a)) -> Store.
     case x of boxed ux. copy_array ux ret)
  False;


repr_array2 @(a : bare) -> Repr (array2 a)
  attribute(inline, inline_postfinal) =

  letfun copy_array (x : array2 a) (ret : OutPtr (array2 a)) -> Store =
     case x of
       mk_array2 @(M N : intindex)
       lb_y stride_y count_y lb_x stride_x count_x arr_ref.

     mk_array2 @a @M @N lb_y stride_y count_y lb_x stride_x count_x arr_ref ret
  in

  repr @(array2 a) (sizealign_array2 @a) copy_array
  (\ (x : Init (array2 a)) -> Boxed (array2 a).
    boxed @(array2 a) x)
  (\ (x : Boxed (array2 a)) (ret : OutPtr (array2 a)) -> Store.
     case x of boxed ux. copy_array ux ret)
  False;


repr_array3 @(a : bare) -> Repr (array3 a)
  attribute(inline, inline_postfinal) =

  letfun copy_array (x : array3 a) (ret : OutPtr (array3 a)) -> Store =
     case x of
       mk_array3 @(L M N : intindex)
       lb_z stride_z count_z lb_y stride_y count_y lb_x stride_x count_x
       arr_ref.

     mk_array3 @a @L @M @N lb_z stride_z count_z lb_y stride_y count_y lb_x stride_x count_x arr_ref ret
  in

  repr @(array3 a) (sizealign_array3 @a) copy_array
  (\ (x : Init (array3 a)) -> Boxed (array3 a).
    boxed @(array3 a) x)
  (\ (x : Boxed (array3 a)) (ret : OutPtr (array3 a)) -> Store.
     case x of boxed ux. copy_array ux ret)
  False;


repr_list @(a : bare) -> Repr (list a)
  attribute(inline, inline_postfinal) =

  letfun copy_list (x : list a) (ret : OutPtr (list a)) -> Store =
     case x of make_list @(N : intindex) count arr_ref.

     make_list @a @N count arr_ref ret
  in

  repr @(list a) (sizealign_list @a) copy_list
  (\ (x : Init (list a)) -> Boxed (list a). boxed @(list a) x)
  (\ (x : Boxed (list a)) (ret : OutPtr (list a)) -> Store.
     case x of boxed ux. copy_list ux ret)
  False;
  

repr_llist : forall a : bare. Repr (Ref (llist a));


repr_barray1 @(a : bare) -> Repr (barray1 a)
  attribute(inline, inline_postfinal) =

  let type a_ref = StuckRef (AsBox a) in

  letfun copy_array (x : barray1 a) (ret : OutPtr (barray1 a)) -> Store =
     case x of mk_barray1 (y : array1 a_ref).
     case y of
       mk_array1 @(N : intindex) lb stride count arr_ref.

     mk_barray1 @a (mk_array1 @a_ref @N lb stride count arr_ref) ret
  in

  repr @(barray1 a) (sizealign_barray1 @a) copy_array
  (\ (x : Init (barray1 a)) -> Boxed (barray1 a).
    boxed @(barray1 a) x)
  (\ (x : Boxed (barray1 a)) (ret : OutPtr (barray1 a)) -> Store.
     case x of boxed ux. copy_array ux ret)
  False;


repr_barray2 @(a : bare) -> Repr (barray2 a)
  attribute(inline, inline_postfinal) =

  let type a_ref = StuckRef (AsBox a) in

  letfun copy_barray (x : barray2 a) (ret : OutPtr (barray2 a)) -> Store =
     case x of mk_barray2 (y : array2 a_ref).
     case y of
       mk_array2 @(M N : intindex)
       lb_y stride_y count_y lb_x stride_x count_x arr_ref.

     mk_barray2 @a
     (mk_array2 @a_ref @M @N lb_y stride_y count_y lb_x stride_x count_x arr_ref)
     ret
  in

  repr @(barray2 a) (sizealign_barray2 @a) copy_barray
  (\ (x : Init (barray2 a)) -> Boxed (barray2 a).
    boxed @(barray2 a) x)
  (\ (x : Boxed (barray2 a)) (ret : OutPtr (barray2 a)) -> Store.
     case x of boxed ux. copy_barray ux ret)
  False;


repr_barray3 @(a : bare) -> Repr (barray3 a)
  attribute(inline, inline_postfinal) =

  let type a_ref = StuckRef (AsBox a) in

  letfun copy_barray (x : barray3 a) (ret : OutPtr (barray3 a)) -> Store =
     case x of mk_barray3 (y : array3 a_ref).
     case y of
       mk_array3 @(L M N : intindex)
       lb_z stride_z count_z
       lb_y stride_y count_y
       lb_x stride_x count_x
       arr_ref.

     mk_barray3 @a
     (mk_array3 @a_ref @L @M @N lb_z stride_z count_z lb_y stride_y count_y lb_x stride_x count_x arr_ref)
     ret
  in

  repr @(barray3 a) (sizealign_barray3 @a) copy_barray
  (\ (x : Init (barray3 a)) -> Boxed (barray3 a).
    boxed @(barray3 a) x)
  (\ (x : Boxed (barray3 a)) (ret : OutPtr (barray3 a)) -> Store.
     case x of boxed ux. copy_barray ux ret)
  False;


repr_blist @(a : bare) -> Repr (blist a)
  attribute(inline, inline_postfinal) =

  let type ref_a = StuckRef (AsBox a) in

  letfun copy_list (x : blist a) (ret : OutPtr (blist a)) -> Store =
     case x of make_blist l.
     case l of
       make_list @(N : intindex) count arr_ref.

     make_blist @a (make_list @ref_a @N count arr_ref) ret
  in

  repr @(blist a) (sizealign_blist @a) copy_list
  (\ (x : Init (blist a)) -> Boxed (blist a). boxed @(blist a) x)
  (\ (x : Boxed (blist a)) (ret : OutPtr (blist a)) -> Store.
     case x of boxed ux. copy_list ux ret)
  False;

repr_Complex : forall a : bare. Repr a -> Repr (Complex a);

repr_Maybe : forall a : bare. Repr a -> Repr (Maybe a);
-- repr_MaybeVal_int : Repr (MaybeVal int);
-- repr_MaybeVal_MaybeVal_int : Repr (MaybeVal (MaybeVal int));

-- This is only used for coercions.  Since we don't have
-- kind polymorphism, we cheat a bit on the type.
repr_Coercion : forall a : val. Repr (Stored a);

repr_Tuple0 : Repr Tuple0;

repr_Tuple1 :
    forall a : bare. Repr a -> Repr (Tuple1 a);

repr_Tuple2 @(a b : bare) (rep_a : Repr a) (rep_b : Repr b)
  -> Repr (Tuple2 a b)
  attribute(inline, inline_postfinal) =

  case rep_a of repr sa_a copy_a tboxed_a fboxed_a pl_a.
  case rep_b of repr sa_b copy_b tboxed_b fboxed_b pl_b.

  letfun
    copy_tuple (x : Tuple2 a b) (ret : OutPtr (Tuple2 a b)) -> Store =
      case x of tuple2 fa fb.
      tuple2 @a @b (copy @a rep_a fa) (copy @b rep_b fb) ret
  in

  repr @(Tuple2 a b)

  (sizealign_Tuple2 @a @b sa_a sa_b)

  copy_tuple

  (\ (f : Init (Tuple2 a b)) -> Boxed (Tuple2 a b). boxed @(Tuple2 a b) f)

  (\ (i : Boxed (Tuple2 a b)) (ret : OutPtr (Tuple2 a b)) -> Store.
    case i of boxed tup. copy_tuple tup ret)

  (and pl_a pl_b);


repr_Tuple3 @(a b c : bare) (rep_a : Repr a) (rep_b : Repr b) (rep_c : Repr c)
 -> Repr (Tuple3 a b c)
 attribute(inline, inline_postfinal) =

  case rep_a of repr sa_a copy_a tboxed_a fboxed_a pl_a.
  case rep_b of repr sa_b copy_b tboxed_b fboxed_b pl_b.
  case rep_c of repr sa_c copy_c tboxed_c fboxed_c pl_c.

  letfun
    copy_tuple (x : Tuple3 a b c) (ret : OutPtr (Tuple3 a b c)) -> Store =
      case x of tuple3 fa fb fc.
      tuple3 @a @b @c (copy @a rep_a fa) (copy @b rep_b fb) (copy @c rep_c fc) ret
  in

  repr @(Tuple3 a b c)

  (sizealign_Tuple3 @a @b @c sa_a sa_b sa_c)

  copy_tuple

  (\ (f : Init (Tuple3 a b c)) -> Boxed (Tuple3 a b c).
    boxed @(Tuple3 a b c) f)

  (\ (i : Boxed (Tuple3 a b c)) (ret : OutPtr (Tuple3 a b c)) -> Store.
    case i of boxed tup. copy_tuple tup ret)

  (and pl_a (and pl_b pl_c));


repr_Tuple4 @(a b c d : bare)
  (rep_a : Repr a) (rep_b : Repr b) (rep_c : Repr c) (rep_d : Repr d)
  -> Repr (Tuple4 a b c d)
  attribute(inline, inline_postfinal) =

  case rep_a of repr sa_a copy_a tboxed_a fboxed_a pl_a.
  case rep_b of repr sa_b copy_b tboxed_b fboxed_b pl_b.
  case rep_c of repr sa_c copy_c tboxed_c fboxed_c pl_c.
  case rep_d of repr sa_d copy_d tboxed_d fboxed_d pl_d.

  letfun
    copy_tuple (x : Tuple4 a b c d) (ret : OutPtr (Tuple4 a b c d)) -> Store =
      case x of tuple4 fa fb fc fd.
      tuple4 @a @b @c @d (copy @a rep_a fa) (copy @b rep_b fb) (copy @c rep_c fc) (copy @d rep_d fd) ret
  in

  repr @(Tuple4 a b c d)

  (sizealign_Tuple4 @a @b @c @d sa_a sa_b sa_c sa_d)

  copy_tuple

  (\ (f : Init (Tuple4 a b c d)) -> Boxed (Tuple4 a b c d).
    boxed @(Tuple4 a b c d) f)

  (\ (i : Boxed (Tuple4 a b c d)) (ret : OutPtr (Tuple4 a b c d)) -> Store.
    case i of boxed tup. copy_tuple tup ret)

  (and pl_a (and pl_b (and pl_c pl_d)));


repr_intset : Repr intset;

-- Representation of any boxed object
repr_Box : forall a : box. Repr (AsBare a);

repr_Ref @(a : box) -> Repr (Ref a)
  attribute(inline, inline_postfinal, builtin) =

  repr @(Ref a) (sizealign_Ref @a)
  (\ (x : Ref a) (r : OutPtr (Ref a)) -> Store.
    case x of ref bx. ref @a bx r)
  (unboxRefInit @a)
  (\ (x : a) (r : OutPtr (Ref a)) -> Store. ref @a x r)
  False;

copy_StuckRef @(a : box) (x : StuckRef a) (r : OutPtr (StuckRef a)) -> Store =
  case x of stuckRef bx. stuckRef @a bx r;

repr_StuckRef @(a : box) -> Repr (StuckRef a)
  attribute(inline, inline_postfinal) =

  repr @(StuckRef a) (sizealign_StuckRef @a) (copy_StuckRef @a)
  (\ (x : Init (StuckRef a)) -> Boxed (StuckRef a). boxed @(StuckRef a) x)
  (\ (x : Boxed (StuckRef a)) (r : OutPtr (StuckRef a)) -> Store.
    case x of boxed rx. copy_StuckRef @a rx r)
  False;

repr_Any : Repr (AsBare Any);
repr_Stream : forall sh a: box. Repr (AsBare (Stream sh a));
repr_view : forall sh a : box. Repr (AsBare (view sh a));
repr_Scatter : forall a b : bare. Repr (AsBare (Scatter a b));

-- Representation of a referenced object that contains nothing and will
-- never be accessed.  At runtime, the reference will be an arbitrary pointer,
-- possibly NULL.
repr_EmptyReference : forall a : bare. Repr a;

repr_arr @(n : intindex) @(e : bare)
  (size : FIInt n) (repr_e : Repr e) -> Repr (arr n e)
  attribute(inline, inline_postfinal, builtin) =

  case repr_e of repr sa copy_e to_boxed_e to_bare_e pointerless_e.

  letfun
    copy_arr (a : arr n e) (ret : OutPtr (arr n e)) -> Store =

    doall @n @(arr n e) @(arr n e) size
    (\ (i : int) -> Store.
       copy @e repr_e (subscript @n @e sa a i) (subscript_out @n @e sa ret i))
  in

  repr @(arr n e) (sizealign_arr @n @e size sa)
  copy_arr
  (\ (x : Init (arr n e)) -> Boxed (arr n e). boxed @(arr n e) x)
  (\ (x : Boxed (arr n e)) (ret : OutPtr (arr n e)) -> Store.
     case x of boxed ux. copy_arr ux ret)
  pointerless_e;

-- Wrapper functions to create Repr objects for the frontend

frontend_repr_Maybe @(a : box) -> Repr (AsBare a) -> Repr (Maybe (AsBare a)) =
  repr_Maybe @(AsBare a);

frontend_repr_list @(a : box) -> Repr (list (AsBare a)) =
  repr_list @(AsBare a);

frontend_repr_array1 @(a : box) -> Repr (array1 (AsBare a)) =
  repr_array1 @(AsBare a);

frontend_repr_array2 @(a : box) -> Repr (array2 (AsBare a)) =
  repr_array2 @(AsBare a);

frontend_repr_array3 @(a : box) -> Repr (array3 (AsBare a)) =
  repr_array3 @(AsBare a);

frontend_repr_blist @(a : box) -> Repr (blist (AsBare a)) =
  repr_blist @(AsBare a);

frontend_repr_barray1 @(a : box) -> Repr (barray1 (AsBare a)) =
  repr_barray1 @(AsBare a);

frontend_repr_barray2 @(a : box) -> Repr (barray2 (AsBare a)) =
  repr_barray2 @(AsBare a);

frontend_repr_barray3 @(a : box) -> Repr (barray3 (AsBare a)) =
  repr_barray3 @(AsBare a);

frontend_repr_Tuple1 @(a : box)
  (rep_a : Repr (AsBare a))
  -> Repr (Tuple1 (AsBare a)) =
  repr_Tuple1 @(AsBare a) rep_a;

frontend_repr_Tuple2 @(a b : box)
  (rep_a : Repr (AsBare a)) (rep_b : Repr (AsBare b))
  -> Repr (Tuple2 (AsBare a) (AsBare b)) =
  repr_Tuple2 @(AsBare a) @(AsBare b) rep_a rep_b;

frontend_repr_Tuple3 @(a b c : box)
  (rep_a : Repr (AsBare a)) (rep_b : Repr (AsBare b)) (rep_c : Repr (AsBare c))
  -> Repr (Tuple3 (AsBare a) (AsBare b) (AsBare c)) =
  repr_Tuple3 @(AsBare a) @(AsBare b) @(AsBare c) rep_a rep_b rep_c;

frontend_repr_Tuple4 @(a b c d : box)
  (rep_a : Repr (AsBare a)) (rep_b : Repr (AsBare b)) (rep_c : Repr (AsBare c)) (rep_d : Repr (AsBare d))
  -> Repr (Tuple4 (AsBare a) (AsBare b) (AsBare c) (AsBare d)) =
  repr_Tuple4 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d) rep_a rep_b rep_c rep_d;

frontend_repr_arr @(n : intindex) @(e : box)
  (size : Boxed (Stored int)) (repr_e : Repr (AsBare e))
  -> Repr (arr n (AsBare e))
  attribute(inline) =
  repr_arr @n @(AsBare e) (fiInt @n (unboxIntValue size)) repr_e;


copy_EffTok (x : Stored EffTok) (ret : OutPtr (Stored EffTok)) -> Store
  attribute(inline) =
  case x of stored t. stored @EffTok t ret;

box_EffTok (f : Init (Stored EffTok)) -> Boxed (Stored EffTok)
  attribute(inline) =
  boxed @(Stored EffTok) f;

unbox_EffTok (x : Boxed (Stored EffTok)) (ret : OutPtr (Stored EffTok))
  -> Store attribute(inline) =
  case x of boxed sx.
  case sx of stored t.
  stored @EffTok t ret;

repr_EffTok : Repr (Stored EffTok) attribute(inline, inline_postfinal) =

  repr @(Stored EffTok)
  sizealign_EffTok copy_EffTok box_EffTok unbox_EffTok True;

--getReprSizeAlignTuple : forall a : bare. Repr a -> (uint, uint);
--getSizeAlignValTuple : (a : val) -> SizeAlignVal a -> (uint, uint);

--productSizeAlign : (uint, uint) -> (uint, uint) -> (uint, uint);
--unionSizeAlign : (uint, uint) -> (uint, uint) -> (uint, uint);

--toSizeAlignVal : (a : val) -> (uint, uint) -> SizeAlignVal a;
--toSizeAlign : forall a : bare. (uint, uint) -> SizeAlign a;

sizealign_append_list : forall a : bare. SizeAlign (append_list a);

sizealign_ListBuilder : forall a : bare. SizeAlign (Stored (ListBuilder a));

sizealign_Tuple2 : forall a b : bare.
                   SizeAlign a -> SizeAlign b
                -> SizeAlign (Tuple2 a b);
sizealign_Tuple3 : forall a b c : bare.
                   SizeAlign a -> SizeAlign b -> SizeAlign c
                -> SizeAlign (Tuple3 a b c);
sizealign_Tuple4 : forall a b c d : bare.
                   SizeAlign a -> SizeAlign b -> SizeAlign c -> SizeAlign d
                -> SizeAlign (Tuple4 a b c d);

sizealign_arr : forall n : intindex, e : bare.
                FIInt n -> SizeAlign e -> SizeAlign (arr n e);

sizealign_list : forall a : bare. SizeAlign (list a);
sizealign_array0 : forall a : bare. SizeAlign (array0 a);
sizealign_array1 : forall a : bare. SizeAlign (array1 a);
sizealign_array2 : forall a : bare. SizeAlign (array2 a);
sizealign_array3 : forall a : bare. SizeAlign (array3 a);
sizealign_blist : forall a : bare. SizeAlign (blist a);
sizealign_barray1 : forall a : bare. SizeAlign (barray1 a);
sizealign_barray2 : forall a : bare. SizeAlign (barray2 a);
sizealign_barray3 : forall a : bare. SizeAlign (barray3 a);

-------------------------------------------------------------------------------
-- Stream and Traversable dictionaries

TraversableDict_Stream_build @(sh a : box)
  (rep : Repr (AsBare a)) (s : Stream sh a)
  -> Stream sh a attribute(inline) = s;


TraversableDict_Stream_traverse @(sh a : box)
  (rep : Repr (AsBare a)) (s : Stream sh a)
  -> Stream sh a attribute(inline) = s;


TraversableDict_llist_build : forall a : box.
  Repr (AsBare a) -> Stream list_dim a -> llist (AsBare a);


TraversableDict_llist_traverse @(a : box)
  (rep : Repr (AsBare a)) (l : llist (AsBare a)) -> Stream list_dim a
  attribute(inline) =

  sequenceStream @a (Sequence_from_llist @(AsBare a) rep l);


TraversableDict_view_list_dim_build @(a : box)
  (rep : Repr (AsBare a)) (s : Stream list_dim a) -> view list_dim a
  attribute(inline) =
  case s of {
    viewStream (vw : view list_dim a). vw
  ; sequenceStream (sq : Sequence a). sequenceToView @(AsBare a) rep sq
  };


TraversableDict_view_list_dim_traverse @(a : box)
  (rep : Repr (AsBare a)) (vw : view list_dim a) -> Stream list_dim a
  attribute(inline) =
  viewStream @a vw;


TraversableDict_view_dim0_build
  @(a : box) (rep : Repr (AsBare a)) (s : Stream dim0 a) -> view dim0 a
  attribute(inline) =
  s;


TraversableDict_view_dim0_traverse
  @(a : box) (rep : Repr (AsBare a)) (vw : view dim0 a) -> Stream dim0 a
  attribute(inline) =
  vw;


TraversableDict_view_dim1_build
  @(a : box) (rep : Repr (AsBare a)) (s : Stream dim1 a) -> view dim1 a
  attribute(inline) =
  s;


TraversableDict_view_dim1_traverse
  @(a : box) (rep : Repr (AsBare a)) (vw : view dim1 a) -> Stream dim1 a
  attribute(inline) =
  vw;


TraversableDict_view_dim2_build
  @(a : box) (rep : Repr (AsBare a)) (s : Stream dim2 a) -> view dim2 a
  attribute(inline) =
  s;


TraversableDict_view_dim2_traverse
  @(a : box) (rep : Repr (AsBare a)) (vw : view dim2 a) -> Stream dim2 a
  attribute(inline) =
  vw;


TraversableDict_view_dim3_build
  @(a : box) (rep : Repr (AsBare a)) (s : Stream dim3 a) -> view dim3 a
  attribute(inline) =
  s;


TraversableDict_view_dim3_traverse
  @(a : box) (rep : Repr (AsBare a)) (vw : view dim3 a) -> Stream dim3 a
  attribute(inline) =
  vw;


TraversableDict_list_build @(a : box)
  (rep : Repr (AsBare a)) (s : Stream list_dim a)
  -> AsBox (list (AsBare a)) attribute(inline) =
  case s of {
    sequenceStream (sq : Sequence a).
      (boxed @(list (AsBare a))
       (Sequence_list_build @(AsBare a) rep sq))
  ; viewStream (vw : view list_dim a).
      (boxed @(list (AsBare a))
       (build_list_dim_list @(AsBare a) rep vw))
  };

-- List traversal.
-- Loop over all list indices and return the corresponding array element.
TraversableDict_list_traverse @(a : box)
  (rep : Repr (AsBare a)) (ls : AsBox (list (AsBare a)))
  -> Stream list_dim a attribute(inline) =
  case ls of boxed uls.
  case uls of make_list @(N : intindex) size aref.
  case aref of stuckBox ay.
  case size of fiInt size_i.

  let shp = mk_list_dim (justVal @int size_i) in

  case rep of repr sa copy_a to_boxed_a to_bare_a pointerless_a.

  viewStream @a
  (view_generate @list_dim
   ShapeDict_list_dim @a rep shp
   (\ (bi : Boxed (Stored int)) -> a.
     let i = unboxIntValue bi in
     bareToBox @(AsBare a) rep (subscript @N @(AsBare a) sa ay i)));


TraversableDict_array0_build
  @(a : box)
  (rep : Repr (AsBare a)) (vw : view dim0 a)
  -> AsBox (array0 (AsBare a)) attribute(inline) =

  case vw of mk_view dom f.
  let element_value = f (boxNoneValue None) in
  let boxed_value = stuckBox @(AsBare a) (asbare @(AsBare a) rep element_value) in
  boxed @(array0 (AsBare a)) (mk_array0 @(AsBare a) boxed_value);


TraversableDict_array0_traverse
  @(a : box) (rep : Repr (AsBare a)) (ay : array0 (AsBare a))
  -> view dim0 a attribute(inline) =
  case ay of mk_array0 (x : StuckBox (AsBare a)).
  view_generate @dim0 ShapeDict_dim0 @a
  rep mk_dim0
  (\ (dummy_index : Boxed (Stored NoneType)) -> a.
    case x of stuckBox ux. bareToBox @(AsBare a) rep ux);


TraversableDict_array1_build
  @(a : box)
  (rep : Repr (AsBare a))
  (s : view dim1 a)
  -> AsBox (array1 (AsBare a)) attribute(inline, inline_dimensionality) =
  boxed @(array1 (AsBare a))
  (build_dim1_array @(AsBare a) rep s);


TraversableDict_array1_traverse
  @(a : box) (rep : Repr (AsBare a)) (ar : Boxed (array1 (AsBare a)))
  -> view dim1 a attribute(inline) =
  case ar of boxed u_ar.
  case u_ar of mk_array1 @(N : intindex) lo stride size ayref.
  case ayref of stuckBox ay.
  
  let linear_map = linearMap stride lo in

  case rep of repr sa copy_a to_boxed_a to_bare_a pointerless_a.

  view_generate @dim1 ShapeDict_dim1 @a rep
  (arrayDescToDim1 @N lo stride size)
  (\ (ix : Boxed (Stored int)) -> a.
    let ix_i = unboxIntValue ix in
    let real_ix : int = invEvalLM ix_i linear_map in
    bareToBox @(AsBare a) rep (subscript @N @(AsBare a) sa ay real_ix));


TraversableDict_array2_build
  @(a : box)
  (rep : Repr (AsBare a))
  (s : view dim2 a)
  -> AsBox (array2 (AsBare a)) attribute(inline, inline_dimensionality) =

  case s of mk_view dom f.
  case dom of mk_dim2 dom_y dom_x.

  -- Compute array parameters
  case dim1ToArraySize dom_y of arraySize @(M : intindex) lb_y stride_y size_y.
  case dim1ToArraySize dom_x of arraySize @(N : intindex) lb_x stride_x size_x.

  let linear_map_y : LinearMap = linearMap stride_y lb_y in
  let linear_map_x : LinearMap = linearMap stride_x lb_x in
  let type out_arr = arr M (arr N (AsBare a)) in
  let type Sint = Stored int in

  boxed @(array2 (AsBare a))
  (mk_array2 @(AsBare a) @M @N lb_y stride_y size_y lb_x stride_x size_x
   (stuckBox @out_arr
    (arr2D_build @M @N @(AsBare a) rep size_y size_x
     (\ (y : int) (x : int) (ret : OutPtr (AsBare a)) -> Store.
        let logical_y : int = evalLM y linear_map_y in
        let logical_x : int = evalLM x linear_map_x in
        let ix = boxed @(Tuple2 Sint Sint)
                 (tuple2 @Sint @Sint
                  (stored @int logical_y) (stored @int logical_x)) in

        -- Evaluate the function
        asbare @(AsBare a) rep (f ix) ret))));


TraversableDict_array2_traverse
  @(a : box) (rep : Repr (AsBare a)) (ar : Boxed (array2 (AsBare a)))
  -> view dim2 a attribute(inline) =
  case ar of boxed u_ar.
  case u_ar of
    mk_array2 @(M N : intindex)
    lo_y stride_y size_y lo_x stride_x size_x ayref.
  case ayref of stuckBox (ay : arr M (arr N (AsBare a))).

  let linear_map_y = linearMap stride_y lo_y in
  let linear_map_x = linearMap stride_x lo_x in
  case size_x of fiInt (width : int).
  let row_repr = repr_arr @N @(AsBare a) size_x rep in
  let type Sint = Stored int in

  view_generate @dim2 ShapeDict_dim2 @a rep
  (mk_dim2 (arrayDescToDim1 @M lo_y stride_y size_y)
           (arrayDescToDim1 @N lo_x stride_x size_x))
  (\ (ix : Boxed (Tuple2 Sint Sint)) -> a.
     case ix of boxed u_ix.
     case u_ix of tuple2 ix_y ix_x.
     case ix_y of stored ix_y_i.
     case ix_x of stored ix_x_i.
     let real_ix_y : int = invEvalLM ix_y_i linear_map_y in
     let real_ix_x : int = invEvalLM ix_x_i linear_map_x in
     bareToBox @(AsBare a) rep
     (subscript @N @(AsBare a) (reprSizeAlign @(AsBare a) rep)
      (subscript @M @(arr N (AsBare a))
       (reprSizeAlign @(arr N (AsBare a)) row_repr) ay real_ix_y) real_ix_x));


TraversableDict_array3_build
  @(a : box) (rep : Repr (AsBare a)) (s : view dim3 a)
  -> AsBox (array3 (AsBare a)) attribute(inline, inline_dimensionality) =

  case s of mk_view dom f.

  -- Compute array parameters
  case dom of mk_dim3 dom_z dom_y dom_x.
  case dim1ToArraySize dom_y of arraySize @(L : intindex) lb_z stride_z size_z.
  case dim1ToArraySize dom_y of arraySize @(M : intindex) lb_y stride_y size_y.
  case dim1ToArraySize dom_x of arraySize @(N : intindex) lb_x stride_x size_x.

  let linear_map_z : LinearMap = linearMap stride_z lb_z in
  let linear_map_y : LinearMap = linearMap stride_y lb_y in
  let linear_map_x : LinearMap = linearMap stride_x lb_x in
  let type out_arr = arr L (arr M (arr N (AsBare a))) in
  let type Sint = Stored int in

  (boxed @(array3 (AsBare a))
   (mk_array3 @(AsBare a) @L @M @N lb_z stride_z size_z
                                   lb_y stride_y size_y
                                   lb_x stride_x size_x
    (stuckBox @out_arr
     (arr3D_build @L @M @N @(AsBare a) rep size_z size_y size_x
      (\ (z : int) (y : int) (x : int) (ret : OutPtr (AsBare a)) -> Store.
         let logical_z : int = evalLM z linear_map_z in
         let logical_y : int = evalLM y linear_map_y in
         let logical_x : int = evalLM x linear_map_x in
         let ix = boxed @(Tuple3 Sint Sint Sint)
                  (tuple3 @Sint @Sint @Sint
                   (stored @int logical_z)
                   (stored @int logical_y) (stored @int logical_x)) in

         -- Evaluate the function
         asbare @(AsBare a) rep (f ix) ret)))));


TraversableDict_array3_traverse
  @(a : box) (rep : Repr (AsBare a)) (ar : Boxed (array3 (AsBare a)))
  -> view dim3 a attribute(inline) =
  case ar of boxed u_ar.
  case u_ar of
    mk_array3 @(L M N : intindex)
    lo_z stride_z size_z
    lo_y stride_y size_y
    lo_x stride_x size_x
    ayref.
  let type bare_a = AsBare a in
  let type arr3d = arr L (arr M (arr N bare_a)) in

  case ayref of stuckBox (ay : arr3d).

  let linear_map_z : LinearMap = linearMap stride_z lo_z in
  let linear_map_y : LinearMap = linearMap stride_y lo_y in
  let linear_map_x : LinearMap = linearMap stride_x lo_x in
  case size_y of fiInt (height : int).
  case size_x of fiInt (width : int).
  let row_repr = repr_arr @N @(AsBare a) size_x rep in
  let plane_repr = repr_arr @M @(arr N (AsBare a)) size_y row_repr in
  let type Sint = Stored int in

  view_generate @dim3 ShapeDict_dim3 @a rep
  (mk_dim3 (arrayDescToDim1 @L lo_z stride_z size_z)
           (arrayDescToDim1 @M lo_y stride_y size_y)
           (arrayDescToDim1 @N lo_x stride_x size_x))
  (\ (ix : Boxed (Tuple3 Sint Sint Sint)) -> a.
     case ix of boxed u_ix.
     case u_ix of tuple3 ix_z ix_y ix_x.
     case ix_z of stored ix_z_i.
     case ix_y of stored ix_y_i.
     case ix_x of stored ix_x_i.
     let real_ix_z : int = invEvalLM ix_z_i linear_map_z in
     let real_ix_y : int = invEvalLM ix_y_i linear_map_y in
     let real_ix_x : int = invEvalLM ix_x_i linear_map_x in
     bareToBox @bare_a rep
     (subscript @N @bare_a (reprSizeAlign @bare_a rep)
      (subscript @M @(arr N bare_a) (reprSizeAlign @(arr N bare_a) row_repr)
       (subscript @L @(arr M (arr N bare_a))
        (reprSizeAlign @(arr M (arr N bare_a)) plane_repr) ay real_ix_z)
       real_ix_y)
      real_ix_x));


TraversableDict_blist_build @(a : box)
  (rep : Repr (AsBare a))
  (s : Stream list_dim a)
  -> AsBox (blist (AsBare a)) attribute(inline) =

  let type boxed_a = StuckRef a in
  let repr_boxed : Repr boxed_a = repr_StuckRef @a in
  -- Wrap all sequence elements in boxes
  let s2 =
        ShapeDict_list_dim_map @a @(AsBox boxed_a)
        rep repr_boxed
        (\ (x : a) -> AsBox boxed_a. boxed @boxed_a (stuckRef @a x))
        s in 
  case s2 of {
    sequenceStream (sq : Sequence (AsBox boxed_a)).
      boxed @(blist (AsBare a))
      (make_blist @(AsBare a) (Sequence_list_build @boxed_a repr_boxed sq))
  ; viewStream (vw : view list_dim (AsBox boxed_a)).
      boxed @(blist (AsBare a))
      (make_blist @(AsBare a) (build_list_dim_list @boxed_a repr_boxed vw))
  };

-- List traversal.
-- Loop over all list indices and return the corresponding array element.
TraversableDict_blist_traverse @(a : box)
  (rep : Repr (AsBare a)) (ls : blist (AsBare a))
  -> Stream list_dim a attribute(inline) =

  let type boxed_a = StuckRef a in
  case ls of make_blist ls2.
  case ls2 of make_list @(N : intindex) size aref.
  case aref of stuckBox (ay : arr N boxed_a).
  case size of fiInt (size_i : int).

  let shp : list_dim = mk_list_dim (justVal @int size_i) in
  let repr_box : Repr boxed_a = repr_StuckRef @a in

  viewStream @a
  (view_generate @list_dim
   ShapeDict_list_dim @a rep shp
   (\ (si : Boxed (Stored int)) -> a.
     let i = unboxIntValue si in
     case subscript @N @boxed_a (reprSizeAlign @boxed_a repr_box) ay i of
       stuckRef val.
     val));


TraversableDict_barray1_build
  @(a : box)
  (rep : Repr (AsBare a)) (s : view dim1 a)
  -> AsBox (barray1 (AsBare a)) attribute(inline, inline_dimensionality) =
  let type boxed_a = StuckRef a in
  let brepr : Repr boxed_a = repr_StuckRef @a in
  boxed @(barray1 (AsBare a))
  (mk_barray1 @(AsBare a)
   (build_dim1_array @boxed_a brepr
    (view_map @dim1 ShapeDict_dim1 @a @(AsBox boxed_a)
     rep brepr (\ (x : a) -> AsBox boxed_a.
                   boxed @(boxed_a)
                   (stuckRef @a x)) s)));


TraversableDict_barray1_traverse
  @(a : box) (rep : Repr (AsBare a)) (ar : Boxed (barray1 (AsBare a)))
  -> view dim1 a attribute(inline) =
  let type boxed_a = StuckRef a in
  case ar of boxed u_ar.
  case u_ar of mk_barray1 (ar2 : array1 boxed_a).
  case ar2 of mk_array1 @(N : intindex) lo stride size ayref.
  case ayref of stuckBox (ay : arr N boxed_a).

  let linear_map : LinearMap = linearMap stride lo in
  let repr_box = repr_StuckRef @a in

  view_generate @dim1 ShapeDict_dim1 @a rep
  (arrayDescToDim1 @N lo stride size)
  (\ (ix : Boxed (Stored int)) -> a.
    let ix_i = unboxIntValue ix in

    let real_ix : int = invEvalLM ix_i linear_map in
    case subscript @N @boxed_a (reprSizeAlign @boxed_a repr_box) ay real_ix of 
      stuckRef val.
    val);


TraversableDict_barray2_build
  @(a : box)
  (rep : Repr (AsBare a)) (s : view dim2 a)
  -> AsBox (barray2 (AsBare a)) attribute(inline, inline_dimensionality) =

  case s of mk_view dom f.
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case dim1ToArraySize dom_y of arraySize @(M : intindex) lb_y stride_y size_y.
  case dim1ToArraySize dom_x of arraySize @(N : intindex) lb_x stride_x size_x.

  -- Compute array parameters
  let linear_map_y = linearMap stride_y lb_y in
  let linear_map_x = linearMap stride_x lb_x in
  let type boxed_a = StuckRef a in
  let type out_arr = arr M (arr N boxed_a) in
  let type Sint = Stored int in
  let box_repr : Repr boxed_a = repr_StuckRef @a in

  boxed @(barray2 (AsBare a))
  (mk_barray2 @(AsBare a)
   (mk_array2 @boxed_a @M @N lb_y stride_y size_y lb_x stride_x size_x
    (stuckBox @out_arr
     (arr2D_build @M @N @boxed_a box_repr size_y size_x
      (\ (y : int) (x : int) (ret : OutPtr boxed_a) -> Store.
         let logical_y : int = evalLM y linear_map_y in
         let logical_x : int = evalLM x linear_map_x in
         let ix = boxed @(Tuple2 Sint Sint)
                  (tuple2 @Sint @Sint
                   (stored @int logical_y) (stored @int logical_x)) in

         -- Evaluate the function and box its result
         stuckRef @a (f ix) ret)))));


TraversableDict_barray2_traverse
  @(a : box) (rep : Repr (AsBare a)) (ar : Boxed (barray2 (AsBare a)))
  -> view dim2 a attribute(inline) =
  let type boxed_a = StuckRef a in
  case ar of boxed u_ar.
  case u_ar of mk_barray2 (ar2 : array2 boxed_a).
  case ar2 of
    mk_array2 @(M N : intindex)
    lo_y stride_y size_y lo_x stride_x size_x ayref.
  case ayref of stuckBox (ay : arr M (arr N boxed_a)).

  let linear_map_y : LinearMap = linearMap stride_y lo_y in
  let linear_map_x : LinearMap = linearMap stride_x lo_x in
  case size_x of fiInt (width : int).
  let box_repr : Repr boxed_a = repr_StuckRef @a in
  let row_repr = repr_arr @N @boxed_a size_x box_repr in
  let type Sint = Stored int in

  view_generate @dim2 ShapeDict_dim2 @a rep
  (mk_dim2 (arrayDescToDim1 @M lo_y stride_y size_y)
           (arrayDescToDim1 @N lo_x stride_x size_x))
  (\ (ix : Boxed (Tuple2 Sint Sint)) -> a.
     case ix of boxed u_ix.
     case u_ix of tuple2 (ix_y : Sint) (ix_x : Sint).
     case ix_y of stored ix_y_i.
     case ix_x of stored ix_x_i.
     let real_ix_y : int = invEvalLM ix_y_i linear_map_y in
     let real_ix_x : int = invEvalLM ix_x_i linear_map_x in
     case subscript @N @boxed_a (reprSizeAlign @boxed_a box_repr)
          (subscript @M @(arr N boxed_a)
           (reprSizeAlign @(arr N boxed_a) row_repr) ay real_ix_y) real_ix_x of
       stuckRef val. val);


TraversableDict_barray3_build
  @(a : box)
  (rep : Repr (AsBare a)) (s : view dim3 a)
  -> AsBox (barray3 (AsBare a)) attribute(inline, inline_dimensionality) =

  let type boxed_a = StuckRef a in
  let brepr : Repr boxed_a = repr_StuckRef @a in
  case s of mk_view dom f.
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case dim1ToArraySize dom_y of arraySize @(L : intindex) lb_z stride_z size_z.
  case dim1ToArraySize dom_y of arraySize @(M : intindex) lb_y stride_y size_y.
  case dim1ToArraySize dom_x of arraySize @(N : intindex) lb_x stride_x size_x.

  -- Compute array parameters
  let linear_map_z : LinearMap = linearMap stride_z lb_z in
  let linear_map_y : LinearMap = linearMap stride_y lb_y in
  let linear_map_x : LinearMap = linearMap stride_x lb_x in
  let type out_arr = arr L (arr M (arr N boxed_a)) in
  let type Sint = Stored int in

  boxed @(barray3 (AsBare a))
  (mk_barray3 @(AsBare a)
   (mk_array3 @boxed_a @L @M @N
              lb_z stride_z size_z
              lb_y stride_y size_y
              lb_x stride_x size_x
    (stuckBox @out_arr
     (arr3D_build @L @M @N @boxed_a brepr size_z size_y size_x
      (\ (z : int) (y : int) (x : int) (ret : OutPtr boxed_a) -> Store.
         let logical_z : int = evalLM z linear_map_z in
         let logical_y : int = evalLM y linear_map_y in
         let logical_x : int = evalLM x linear_map_x in
         let ix = boxed @(Tuple3 Sint Sint Sint)
                  (tuple3 @Sint @Sint @Sint
                   (stored @int logical_z)
                   (stored @int logical_y) (stored @int logical_x)) in

         -- Evaluate the function and box its result
         stuckRef @a (f ix) ret)))));


TraversableDict_barray3_traverse
  @(a : box) (rep : Repr (AsBare a)) (ar : Boxed (barray3 (AsBare a)))
  -> view dim3 a attribute(inline) =
  let type boxed_a = StuckRef a in
  case ar of boxed u_ar.
  case u_ar of mk_barray3 (ar2 : array3 boxed_a).
  case ar2 of
    mk_array3 @(L M N : intindex)
    lo_z stride_z size_z
    lo_y stride_y size_y
    lo_x stride_x size_x
    ayref.
  let type arr1d = arr N boxed_a in
  let type arr2d = arr M arr1d in
  let type arr3d = arr L arr2d in

  case ayref of stuckBox (ay : arr3d).

  let linear_map_z = linearMap stride_z lo_z in
  let linear_map_y = linearMap stride_y lo_y in
  let linear_map_x = linearMap stride_x lo_x in
  case size_y of fiInt (height : int).
  case size_x of fiInt (width : int).
  let boxed_repr : Repr boxed_a = repr_StuckRef @a in
  let row_repr : Repr arr1d = repr_arr @N @boxed_a size_x boxed_repr in
  let plane_repr : Repr arr2d = repr_arr @M @arr1d size_y row_repr in
  let type Sint = Stored int in

  view_generate @dim3 ShapeDict_dim3 @a rep
  (mk_dim3 (arrayDescToDim1 @L lo_z stride_z size_z)
           (arrayDescToDim1 @M lo_y stride_y size_y)
           (arrayDescToDim1 @N lo_x stride_x size_x))
  (\ (ix : Boxed (Tuple3 Sint Sint Sint)) -> a.
     case ix of boxed u_ix.
     case u_ix of tuple3 ix_z ix_y ix_x.
     case ix_z of stored ix_z_i.
     case ix_y of stored ix_y_i.
     case ix_x of stored ix_x_i.
     let real_ix_z : int = invEvalLM ix_z_i linear_map_z in
     let real_ix_y : int = invEvalLM ix_y_i linear_map_y in
     let real_ix_x : int = invEvalLM ix_x_i linear_map_x in
     case subscript @N @boxed_a (reprSizeAlign @boxed_a boxed_repr)
          (subscript @M @arr1d (reprSizeAlign @arr1d row_repr)
           (subscript @L @arr2d (reprSizeAlign @arr2d plane_repr) ay real_ix_z)
           real_ix_y)
          real_ix_x of
      stuckRef val. val);


-------------------------------------------------------------------------------
-- Shape dictionaries

ShapeDict_list_dim : ShapeDict list_dim =
  shapeDict @list_dim
  repr_int
  repr_SliceObject
  ShapeDict_list_dim_member
  ShapeDict_list_dim_intersect
  ShapeDict_list_dim_flatten
  ShapeDict_list_dim_generate
  ShapeDict_list_dim_map
  ShapeDict_list_dim_zipWith
  ShapeDict_list_dim_zipWith3
  ShapeDict_list_dim_zipWith4
  ShapeDict_list_dim_slice;


ShapeDict_list_dim_member
  (sh : list_dim) (ix : Boxed (Stored int)) -> Boxed (Stored bool) =
  let ix_i = unboxIntValue ix in
  case sh of mk_list_dim (m_size : MaybeVal int).
  case m_size of {
    nothingVal. boxBoolValue (ix_i >=# 0)
  ; justVal size_i. boxBoolValue (and (ix_i >=# 0) (ix_i <# size_i))
  };


ShapeDict_list_dim_intersect (d1 : list_dim) (d2 : list_dim) -> list_dim =
  case d1 of mk_list_dim (m_size1 : MaybeVal int).
  case d2 of mk_list_dim (m_size2 : MaybeVal int).
  mk_list_dim
  (case m_size1 of {
     justVal (size1 : int).
       case m_size2 of {
         justVal (size2 : int).
           justVal @int (minI size1 size2)
       ; nothingVal.
           justVal @int size1
       }
   ; nothingVal.
       m_size2
   });


ShapeDict_list_dim_flatten @(a : box)
  (rep : Repr (AsBare a))
  (s : Stream list_dim a)
  -> Stream list_dim a attribute(inline) = s;


ShapeDict_list_dim_generate @(a : box)
  (rep : Repr (AsBare a))
  (d : list_dim)
  (f : Boxed (Stored int) -> a)
  -> Stream list_dim a =
  viewStream @a (view_generate @list_dim
  ShapeDict_list_dim @a rep d f);


ShapeDict_list_dim_map @(a b : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (transformer : a -> b)
  (s : Stream list_dim a)
  -> Stream list_dim b attribute(inline) =
  case s of {
    sequenceStream (sq : Sequence a).
      sequenceStream @b
      (Sequence_map @(AsBare a) @(AsBare b) repr_a repr_b
       (\ (x : AsBare a) (ret : OutPtr (AsBare b)) -> Store.
          asbare @(AsBare b) repr_b
          (transformer (bareToBox @(AsBare a) repr_a x)) ret) sq)
  ; viewStream (vw : view list_dim a).
      viewStream @b
      (view_map @list_dim
       ShapeDict_list_dim @a @b repr_a repr_b transformer vw)
  };


ShapeDict_list_dim_zipWith @(a b c : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b)) (repr_c : Repr (AsBare c))
  (transformer : a -> b -> c)
  (sA : Stream list_dim a)
  (sB : Stream list_dim b)
  -> Stream list_dim c attribute(inline) =

  letfun
    bare_transformer
      (x : AsBare a) (y : AsBare b) (ret : OutPtr (AsBare c)) -> Store
      attribute(inline) =
      asbare @(AsBare c) repr_c
      (transformer (bareToBox @(AsBare a) repr_a x)
                   (bareToBox @(AsBare b) repr_b y)) ret
  in

  case sA of {
    sequenceStream (sqA : Sequence a).
      let sqB = Stream1ToSequence @b repr_b sB in
      sequenceStream @c
      (Sequence_zipWith @(AsBare a) @(AsBare b) @(AsBare c)
       repr_a repr_b repr_c bare_transformer sqA sqB)

  ; viewStream (vwA : view list_dim a).
      case sB of {
        sequenceStream (sqB : Sequence b).
          sequenceStream @c
          (Sequence_zipWith @(AsBare a) @(AsBare b) @(AsBare c)
           repr_a repr_b repr_c bare_transformer
           (viewToSequence @(AsBare a) repr_a vwA) sqB)
      ; viewStream (vwB : view list_dim b).
          viewStream @c
          (view_zipWith @list_dim
           ShapeDict_list_dim
           @a @b @c repr_a repr_b repr_c transformer vwA vwB)
    }
  };

ShapeDict_list_dim_zipWith3 @(a b c d : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d))
  (transformer : a -> b -> c -> d)
  (sA : Stream list_dim a)
  (sB : Stream list_dim b)
  (sC : Stream list_dim c)
  -> Stream list_dim d attribute(inline) =

  letfun
    bare_transformer
      (x : AsBare a) (y : AsBare b) (z : AsBare c)
      (ret : OutPtr (AsBare d)) -> Store
      attribute(inline) =
      asbare @(AsBare d) repr_d
      (transformer (bareToBox @(AsBare a) repr_a x)
                   (bareToBox @(AsBare b) repr_b y)
                   (bareToBox @(AsBare c) repr_c z)) ret
  in

  case sA of {
    sequenceStream (sqA : Sequence a).
      let sqB = Stream1ToSequence @b repr_b sB in
      let sqC = Stream1ToSequence @c repr_c sC in
      sequenceStream @d
      (Sequence_zipWith3 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d)
      repr_a repr_b repr_c repr_d
       bare_transformer sqA sqB sqC)

  ; viewStream (vwA : view list_dim a).
      case sB of {
        sequenceStream (sqB : Sequence b).
          let sqC = Stream1ToSequence @c repr_c sC in
          sequenceStream @d
          (Sequence_zipWith3 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d)
           repr_a repr_b repr_c repr_d bare_transformer
           (viewToSequence @(AsBare a) repr_a vwA) sqB sqC)

      ; viewStream (vwB : view list_dim b).
          case sC of {
            sequenceStream (sqC : Sequence c).
              sequenceStream @d
              (Sequence_zipWith3 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d)
               repr_a repr_b repr_c repr_d bare_transformer
               (viewToSequence @(AsBare a) repr_a vwA)
               (viewToSequence @(AsBare b) repr_b vwB)
               sqC)

          ; viewStream (vwC : view list_dim c).
              viewStream @d
              (view_zipWith3 @list_dim
               ShapeDict_list_dim
               @a @b @c @d repr_a repr_b repr_c repr_d
               transformer vwA vwB vwC)
          }
      }
  };


ShapeDict_list_dim_zipWith4 @(a b c d e : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d)) (repr_e : Repr (AsBare e))
  (transformer : a -> b -> c -> d -> e)
  (sA : Stream list_dim a)
  (sB : Stream list_dim b)
  (sC : Stream list_dim c)
  (sD : Stream list_dim d)
  -> Stream list_dim e attribute(inline) =

  letfun
    bare_transformer
      (x : AsBare a) (y : AsBare b) (z : AsBare c) (w : AsBare d)
      (ret : OutPtr (AsBare e)) -> Store
      attribute(inline) =
      asbare @(AsBare e) repr_e
      (transformer (bareToBox @(AsBare a) repr_a x)
                   (bareToBox @(AsBare b) repr_b y)
                   (bareToBox @(AsBare c) repr_c z)
                   (bareToBox @(AsBare d) repr_d w)) ret
  in
  case sA of {
    sequenceStream (sqA : Sequence a).
      let sqB = Stream1ToSequence @b repr_b sB in
      let sqC = Stream1ToSequence @c repr_c sC in
      let sqD = Stream1ToSequence @d repr_d sD in
      sequenceStream @e
      (Sequence_zipWith4 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d) @(AsBare e)
       repr_a repr_b repr_c repr_d repr_e
       bare_transformer sqA sqB sqC sqD)

  ; viewStream (vwA : view list_dim a).
      case sB of {
        sequenceStream (sqB : Sequence b).
          let sqC = Stream1ToSequence @c repr_c sC in
          let sqD = Stream1ToSequence @d repr_d sD in
          sequenceStream @e
          (Sequence_zipWith4 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d) @(AsBare e)
           repr_a repr_b repr_c repr_d repr_e bare_transformer
           (viewToSequence @(AsBare a) repr_a vwA) sqB sqC sqD)

      ; viewStream (vwB : view list_dim b).
          case sC of {
            sequenceStream (sqC : Sequence c).
              let sqD = Stream1ToSequence @d repr_d sD in
              sequenceStream @e
              (Sequence_zipWith4 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d) @(AsBare e)
               repr_a repr_b repr_c repr_d repr_e bare_transformer
               (viewToSequence @(AsBare a) repr_a vwA)
               (viewToSequence @(AsBare b) repr_b vwB)
               sqC sqD)

          ; viewStream (vwC : view list_dim c).
              case sD of {
                sequenceStream (sqD : Sequence d).
                  sequenceStream @e
                  (Sequence_zipWith4 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d) @(AsBare e)
                   repr_a repr_b repr_c repr_d repr_e bare_transformer
                   (viewToSequence @(AsBare a) repr_a vwA)
                   (viewToSequence @(AsBare b) repr_b vwB)
                   (viewToSequence @(AsBare c) repr_c vwC)
                   sqD)
              ; viewStream (vwD : view list_dim d).
                  viewStream @e
                  (view_zipWith4 @list_dim
                   ShapeDict_list_dim @a @b @c @d @e
                   repr_a repr_b repr_c repr_d repr_e
                   transformer vwA vwB vwC vwD)
              }
          }
      }
  };


ShapeDict_list_dim_slice @(t : box -> box) @(a : box)
  (is_dim1 : coerce @box (shape t) list_dim)
  (indexable : IndexableDict t)
  (rep : Repr (AsBare a))
  (container : t a)
  (slice_argument : AsBox (slice list_dim))
  -> view list_dim a attribute(inline) =
  case indexable of indexableDict at_index get_shape.

  -- Compute parameters of the sliced list
  case slice_argument of boxed u_slice_argument.
  case internalApplyListSlice u_slice_argument
       (coerce @(shape t) @list_dim (get_shape @a container)) of
    (view_domain : list_dim, view_map : LinearMap).

  view_generate @list_dim
  ShapeDict_list_dim @a rep view_domain
  (\ (i : Boxed (Stored int)) -> a.

    -- Compute the index in the original object that holds the value at 'i'
    let source_index : int = evalLM (unboxIntValue i) view_map in
    let s_index =
          coerce @(AsBox (index list_dim)) @(AsBox (index (shape t)))
          (boxIntValue source_index) in

    -- Retrieve the value
    at_index @a rep container s_index);


ShapeDict_dim0 : ShapeDict dim0 =
  shapeDict @dim0
  repr_NoneType
  repr_NoneType
  ShapeDict_dim0_member
  ShapeDict_dim0_intersect
  ShapeDict_dim0_flatten
  ShapeDict_dim0_generate
  ShapeDict_dim0_map
  ShapeDict_dim0_zipWith
  ShapeDict_dim0_zipWith3
  ShapeDict_dim0_zipWith4
  ShapeDict_dim0_slice;

ShapeDict_dim0_member (d : dim0) (i : Boxed (index dim0))
  -> Boxed (Stored bool) attribute(inline) =
  boxBoolValue True;

ShapeDict_dim0_intersect (d : dim0) (x : dim0) -> dim0 attribute(inline) =
  d;

ShapeDict_dim0_generate @(a : box)
  (rep : Repr (AsBare a)) (d : dim0) (f : Boxed (Stored NoneType) -> a)
  -> Stream dim0 a attribute(inline) =
  mk_view @dim0 @a mk_dim0 f;

ShapeDict_dim0_flatten @(a : box) (rep : Repr (AsBare a)) (s : Stream dim0 a)
  -> Stream list_dim a attribute(inline) =
  case s of mk_view (d : dim0) (f : Boxed (Stored NoneType) -> a).

  let d : list_dim = mk_list_dim (justVal @int 1) in

  ShapeDict_list_dim_generate @a rep d
  (\ (i : Boxed (Stored int)) -> a. f (boxNoneValue None));


ShapeDict_dim0_map @(a b : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (transformer : a -> b)
  (s : Stream dim0 a)
  -> Stream dim0 b attribute(inline) =
  case s of mk_view (d : dim0) (f : Boxed (Stored NoneType) -> a).
  mk_view @dim0 @b d
  (\ (i : Boxed (Stored NoneType)) -> b.
    transformer (f (boxNoneValue None)));


ShapeDict_dim0_zipWith @(a b c : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b)) (repr_c : Repr (AsBare c))
  (transformer : a -> b -> c)
  (sA : Stream dim0 a)
  (sB : Stream dim0 b)
  -> Stream dim0 c attribute(inline) =
  case sA of mk_view (dA : dim0) fA.
  case sB of mk_view (dB : dim0) fB.
  mk_view @dim0 @c dA
  (\ (i : Boxed (Stored NoneType)) -> c.
    transformer (fA (boxNoneValue None)) (fB (boxNoneValue None)));


ShapeDict_dim0_zipWith3 @(a b c d : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d))
  (transformer : a -> b -> c -> d)
  (sA : Stream dim0 a)
  (sB : Stream dim0 b)
  (sC : Stream dim0 c)
  -> Stream dim0 d attribute(inline) =
  case sA of mk_view (dA : dim0) fA.
  case sB of mk_view (dB : dim0) fB.
  case sC of mk_view (dC : dim0) fC.
  mk_view @dim0 @d dA
  (\ (i : Boxed (Stored NoneType)) -> d.
    transformer (fA (boxNoneValue None))
                (fB (boxNoneValue None))
                (fC (boxNoneValue None)));


ShapeDict_dim0_zipWith4 @(a b c d e : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d)) (repr_e : Repr (AsBare e))
  (transformer : a -> b -> c -> d -> e)
  (sA : Stream dim0 a)
  (sB : Stream dim0 b)
  (sC : Stream dim0 c)
  (sD : Stream dim0 d)
  -> Stream dim0 e attribute(inline) =
  case sA of mk_view (dA : dim0) fA.
  case sB of mk_view (dB : dim0) fB.
  case sC of mk_view (dC : dim0) fC.
  case sD of mk_view (dD : dim0) fD.
  mk_view @dim0 @e dA
  (\ (i : Boxed (Stored NoneType)) -> e.
    transformer (fA (boxNoneValue None))
                (fB (boxNoneValue None))
                (fC (boxNoneValue None))
                (fD (boxNoneValue None)));


ShapeDict_dim0_slice @(t : box -> box) @(a : box)
  (has_shape : coerce @box (shape t) dim0)
  (indexable : IndexableDict t)
  (rep : Repr (AsBare a))
  (container : t a)
  (sl : AsBox (slice dim0))
  -> view dim0 a attribute(inline) =
  case indexable of indexableDict at_index get_shape.

  mk_view @dim0 @a mk_dim0
  (\ (ix : Boxed (Stored NoneType)) -> a.
    at_index @a rep container
    (coerce @(AsBox (index dim0)) @(AsBox (index (shape t))) ix));


ShapeDict_dim1 : ShapeDict dim1 =
  shapeDict @dim1
  repr_int
  repr_SliceObject
  ShapeDict_dim1_member
  ShapeDict_dim1_intersect
  ShapeDict_dim1_flatten
  ShapeDict_dim1_generate
  ShapeDict_dim1_map
  ShapeDict_dim1_zipWith
  ShapeDict_dim1_zipWith3
  ShapeDict_dim1_zipWith4
  ShapeDict_dim1_slice;


ShapeDict_dim1_member (dom : dim1) (ix : Boxed (Stored int))
  -> Boxed (Stored bool) attribute(inline) =
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  let ix_i = unboxIntValue ix in

  -- Point must be in the interval and in the linear map
  if inInterval ix_i iv
  then boxBoolValue (inLM ix_i lm)
  else boxBoolValue False;


ShapeDict_dim1_intersect (d : dim1) (e : dim1)
  -> dim1 attribute(inline, inline_final) =
  case d of mk_dim1 (iv1 : Interval) (m1 : LinearMap).
  case e of mk_dim1 (iv2 : Interval) (m2 : LinearMap).
  case intersectLM m1 m2 of {
    justVal (m3 : LinearMap).
      let iv3 : Interval = trimInterval (intersectInterval iv1 iv2) m3 in
      mk_dim1 iv3 m3
  ; nothingVal.
      mk_dim1 (interval (justVal @int 0) (justVal @int 0)) (linearMap 1 0)
  };


ShapeDict_dim1_flatten @(a : box)
  (rep : Repr (AsBare a)) (s : Stream dim1 a) -> Stream list_dim a
  attribute(inline, inline_dimensionality) =
  case s of mk_view dom f.

  -- Compute the size of the list
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case lm of linearMap (stride : int) (alignment : int).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case case lb of {
         justVal lb_i.
           case ub of {
             justVal ub_i.
               -- Bounded list
               (justVal @int ((ub_i -# lb_i) //# stride),
                linearMap stride lb_i)
           ; nothingVal.
               -- Unbounded list
               (nothingVal @int,
                linearMap stride lb_i)
         }
       ; nothingVal. except @(MaybeVal int, LinearMap)
       } of
    (list_size : MaybeVal int, list_map : LinearMap).

  viewStream @a
  (view_generate @list_dim
   ShapeDict_list_dim @a
   rep (mk_list_dim list_size)
   (\ (ix : Boxed (Stored int)) -> a.
      let ix_u = unboxIntValue ix in
      let ix2 = boxed @(Stored int) (stored @int (evalLM ix_u list_map)) in
      f ix2));


ShapeDict_dim1_generate @(a : box)
  (rep : Repr (AsBare a)) (dom : dim1) (f : AsBox (index dim1) -> a)
  -> Stream dim1 a attribute(inline) =
  view_generate @dim1
  ShapeDict_dim1 @a rep dom f;


ShapeDict_dim1_map @(a b : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (transformer : a -> b)
  (s : Stream dim1 a)
  -> Stream dim1 b attribute(inline) =
  view_map @dim1
  ShapeDict_dim1 @a @b repr_a repr_b transformer s;


ShapeDict_dim1_zipWith @(a b c : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c))
  (transformer : a -> b -> c)
  (sa : Stream dim1 a)
  (sb : Stream dim1 b)
  -> Stream dim1 c attribute(inline) =
  view_zipWith @dim1 ShapeDict_dim1 @a @b @c
  repr_a repr_b repr_c transformer sa sb;


ShapeDict_dim1_zipWith3 @(a b c d : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d))
  (transformer : a -> b -> c -> d)
  (sa : Stream dim1 a)
  (sb : Stream dim1 b)
  (sc : Stream dim1 c)
  -> Stream dim1 d attribute(inline) =
  view_zipWith3 @dim1 ShapeDict_dim1 @a @b @c @d
  repr_a repr_b repr_c repr_d transformer sa sb sc;


ShapeDict_dim1_zipWith4 @(a b c d e : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d))
  (repr_e : Repr (AsBare e))
  (transformer : a -> b -> c -> d -> e)
  (sa : Stream dim1 a)
  (sb : Stream dim1 b)
  (sc : Stream dim1 c)
  (sd : Stream dim1 d)
  -> Stream dim1 e attribute(inline) =
  view_zipWith4 @dim1 ShapeDict_dim1 @a @b @c @d @e
  repr_a repr_b repr_c repr_d repr_e transformer sa sb sc sd;


ShapeDict_dim1_slice @(t : box -> box) @(a : box)
  (is_dim1 : coerce @box (shape t) dim1)
  (indexable : IndexableDict t)
  (rep : Repr (AsBare a))
  (container : t a)
  (slice_argument : AsBox (slice dim1))
  -> view dim1 a attribute(inline) =
  case indexable of indexableDict at_index get_shape.

  -- Compute the slice's domain
  let dom : dim1 = coerce @(shape t) @dim1 (get_shape @a container) in
  case slice_argument of boxed u_slice_argument.
  let slice_dom = internalApplyArraySlice u_slice_argument dom in

  view_generate @dim1
  ShapeDict_dim1 @a rep slice_dom
  (\ (i : AsBox (index dim1)) -> a.
    at_index @a rep container (coerce @(AsBox (index dim1)) @(AsBox (index (shape t))) i));


ShapeDict_dim2 : ShapeDict dim2 =
  shapeDict @dim2
  repr_index2
  repr_slice2
  ShapeDict_dim2_member
  ShapeDict_dim2_intersect
  ShapeDict_dim2_flatten
  ShapeDict_dim2_generate
  ShapeDict_dim2_map
  ShapeDict_dim2_zipWith
  ShapeDict_dim2_zipWith3
  ShapeDict_dim2_zipWith4
  ShapeDict_dim2_slice;


ShapeDict_dim2_member (dom : dim2) (ix : AsBox (index dim2))
  -> Boxed (Stored bool) =
  -- Take the conjunction of x and y membership conditions
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case ix of boxed u_ix.
  case u_ix of tuple2 ix_y ix_x.
  case ix_y of stored u_ix_y.
  case ix_x of stored u_ix_x.
  if unboxBoolValue (ShapeDict_dim1_member dom_y (boxIntValue u_ix_y))
  then ShapeDict_dim1_member dom_x (boxIntValue u_ix_x)
  else boxBoolValue False;


ShapeDict_dim2_intersect (domA : dim2) (domB : dim2) -> dim2 =
  -- Take the intersection in each dimension
  case domA of mk_dim2 (domA_y : dim1) (domA_x : dim1).
  case domB of mk_dim2 (domB_y : dim1) (domB_x : dim1).
  mk_dim2 (ShapeDict_dim1_intersect domA_y domB_y)
          (ShapeDict_dim1_intersect domA_x domB_x);


ShapeDict_dim2_generate @(a : box)
  (rep : Repr (AsBare a)) (dom : dim2) (f : AsBox (index dim2) -> a)
  -> Stream dim2 a attribute(inline) =
  view_generate @dim2 ShapeDict_dim2 @a rep dom f;


ShapeDict_dim2_flatten_helper
  (iv_y : Interval)
  (iv_x : Interval)
  (stride_y : int)
  (stride_x : int)
  -> (list_dim, MaybeVal int, int, int)
  attribute(inline, inline_final) =

  case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).

  -- Lower bound must be finite
  case lb_x of {
    justVal (lb_x_i : int).
      case ub_x of {
        justVal (ub_x_i : int).
          -- Domain has finite x extent
          let count_x : int = (ub_x_i -# lb_x_i) //# stride_x in

          case lb_y of {
            justVal (lb_y_i : int).

              -- Compute the number of points in the domain
              let list_size : MaybeVal int =
                    case ub_y of {
                      justVal (ub_y_i : int).
                        -- Domain is bounded on all sides
                        let count_y : int = (ub_y_i -# lb_y_i) //# stride_y in
                        justVal @int (count_x *# count_y)
                    ; nothingVal.

                        -- Domain is unbounded in the y-dimension
                        nothingVal @int
                    } in

              (mk_list_dim list_size, justVal @int count_x, lb_y_i, lb_x_i)
            ; nothingVal.
                except @(list_dim, MaybeVal int, int, int)
            }

      ; nothingVal.
          -- Domain has infinite x extent
          case lb_y of {
            justVal (lb_y_i : int).
              (mk_list_dim (nothingVal @int), nothingVal @int, lb_y_i, lb_x_i)

          ; nothingVal.
              except @(list_dim, MaybeVal int, int, int)
          }
      }

  ; nothingVal.
      except @(list_dim, MaybeVal int, int, int)
  };


ShapeDict_dim2_flatten_helper2 (i : int) (divisor : MaybeVal int) -> (int, int)
  attribute(inline, inline_final) =
  case divisor of {
    justVal (count_x : int). (i //# count_x, i %# count_x)
  ; nothingVal. (0, i)
  };

ShapeDict_dim2_flatten @(a : box)
  (rep : Repr (AsBare a)) (s : Stream dim2 a) -> Stream list_dim a
  attribute(inline, inline_dimensionality) =
  case s of mk_view (dom : dim2) f.
  case dom of mk_dim2 dom_y dom_x.
  case dom_x of mk_dim1 iv_x lm_x.
  case dom_y of mk_dim1 iv_y lm_y.
  case iv_x of interval lb_x ub_x.
  case iv_y of interval lb_y ub_y.
  case lm_x of linearMap stride_x alignment_x.
  case lm_y of linearMap stride_y alignment_y.

  -- Compute stream dimensions and indices
  case ShapeDict_dim2_flatten_helper iv_y iv_x stride_y stride_x
  of (flattened_size : list_dim, divisor : MaybeVal int, lb_y_i : int, lb_x_i : int).

  viewStream @a
  (mk_view @list_dim @a flattened_size
   (\ (bi : Boxed (Stored int)) -> a.
      -- Linearize the index
      let i = unboxIntValue bi in
      case ShapeDict_dim2_flatten_helper2 i divisor
      of (i_y : int, i_x : int).

      -- Apply the stride to get an index in the domain
      let dim2_i_y : int = lb_y_i +# i_y *# stride_y in 
      let dim2_i_x : int = lb_x_i +# i_x *# stride_x in 

      let type index2d = Tuple2 (Stored int) (Stored int) in
      let ix2 = boxed @index2d
                (tuple2 @(Stored int) @(Stored int)
                 (stored @int dim2_i_y) (stored @int dim2_i_x)) in
      f ix2));


ShapeDict_dim2_map @(a b : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (transformer : a -> b)
  (s : Stream dim2 a)
  -> Stream dim2 b attribute(inline) =
  view_map @dim2
  ShapeDict_dim2 @a @b repr_a repr_b transformer s;


ShapeDict_dim2_zipWith @(a b c : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b)) (repr_c : Repr (AsBare c))
  (transformer : a -> b -> c)
  (sa : Stream dim2 a)
  (sb : Stream dim2 b)
  -> Stream dim2 c attribute(inline) =
  view_zipWith @dim2 ShapeDict_dim2 @a @b @c
  repr_a repr_b repr_c transformer sa sb;


ShapeDict_dim2_zipWith3 @(a b c d : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d))
  (transformer : a -> b -> c -> d)
  (sa : Stream dim2 a)
  (sb : Stream dim2 b)
  (sc : Stream dim2 c)
  -> Stream dim2 d attribute(inline) =
  view_zipWith3 @dim2 ShapeDict_dim2 @a @b @c @d
  repr_a repr_b repr_c repr_d transformer sa sb sc;


ShapeDict_dim2_zipWith4 @(a b c d e : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d))
  (repr_e : Repr (AsBare e))
  (transformer : a -> b -> c -> d -> e)
  (sa : Stream dim2 a)
  (sb : Stream dim2 b)
  (sc : Stream dim2 c)
  (sd : Stream dim2 d)
  -> Stream dim2 e attribute(inline) =
  view_zipWith4 @dim2 ShapeDict_dim2 @a @b @c @d @e
  repr_a repr_b repr_c repr_d repr_e transformer sa sb sc sd;


ShapeDict_dim2_slice @(t : box -> box) @(a : box)
  (is_dim2 : coerce @box (shape t) dim2)
  (indexable : IndexableDict t)
  (rep : Repr (AsBare a))
  (container : t a)
  (slice_argument : AsBox (slice dim2))
  -> view dim2 a attribute(inline) =
  case indexable of indexableDict at_index get_shape.

  -- Compute the slice's domain
  case slice_argument of boxed u_slice_argument.
  case u_slice_argument of tuple2 slice_y slice_x.

  let dom : dim2 = coerce @(shape t) @dim2 (get_shape @a container) in
  case dom of mk_dim2 dom_y dom_x.
  let slice_dom : dim2 =
        mk_dim2 (internalApplyArraySlice slice_y dom_y)
                (internalApplyArraySlice slice_x dom_x) in

  view_generate @dim2
  ShapeDict_dim2 @a rep slice_dom
  (\ (i : AsBox (index dim2)) -> a.
    at_index @a rep container
    (coerce @(AsBox (index dim2)) @(AsBox (index (shape t))) i));


ShapeDict_dim3 : ShapeDict dim3 =
  shapeDict @dim3
  repr_index3
  repr_slice3
  ShapeDict_dim3_member
  ShapeDict_dim3_intersect
  ShapeDict_dim3_flatten
  ShapeDict_dim3_generate
  ShapeDict_dim3_map
  ShapeDict_dim3_zipWith
  ShapeDict_dim3_zipWith3
  ShapeDict_dim3_zipWith4
  ShapeDict_dim3_slice;


ShapeDict_dim3_member (dom : dim3) (ix : AsBox (index dim3))
  -> Boxed (Stored bool) =

  -- Take the conjunction of x, y, z membership conditions
  case dom of mk_dim3 dom_z dom_y dom_x.
  case ix of boxed u_ix.
  case u_ix of tuple3 ix_z ix_y ix_x.
  case ix_z of stored u_ix_z.
  case ix_y of stored u_ix_y.
  case ix_x of stored u_ix_x.
  if unboxBoolValue (ShapeDict_dim1_member dom_z (boxIntValue u_ix_z))
  then if unboxBoolValue (ShapeDict_dim1_member dom_y (boxIntValue u_ix_y))
       then ShapeDict_dim1_member dom_x (boxIntValue u_ix_x)
       else boxBoolValue False
  else boxBoolValue False;


ShapeDict_dim3_intersect (domA : dim3) (domB : dim3) -> dim3 =
  -- Take the intersection in each dimension
  case domA of mk_dim3 domA_z domA_y domA_x.
  case domB of mk_dim3 domB_z domB_y domB_x.
  mk_dim3 (ShapeDict_dim1_intersect domA_z domB_z)
          (ShapeDict_dim1_intersect domA_y domB_y)
          (ShapeDict_dim1_intersect domA_x domB_x);


ShapeDict_dim3_flatten_helper
  (iv_z : Interval)
  (iv_y : Interval)
  (iv_x : Interval)
  (stride_z : int)
  (stride_y : int)
  (stride_x : int)
  -> (list_dim, MaybeVal (MaybeVal int, int), int, int, int)
  attribute(inline, inline_final) =

  case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case iv_z of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).

  -- Lower bound must be finite
  case lb_x of {
    justVal (lb_x_i : int).
      case ub_x of {
        justVal (ub_x_i : int).
          -- Domain has finite x extent
          let count_x : int = (ub_x_i -# lb_x_i) //# stride_x in

          case lb_y of {
            justVal (lb_y_i : int).
              case ub_y of {
                justVal (ub_y_i : int).
                  -- Domain has finite y extent
                    let count_y : int = (ub_y_i -# lb_y_i) //# stride_y in
                    let count_xy : int = count_x *# count_y in
                    case lb_z of {
                      justVal (lb_z_i : int).

                        -- Compute the number of points in the domain
                        let list_size : MaybeVal int =
                              case ub_z of {
                                justVal (ub_z_i : int).
                                  -- Domain is bounded on all sides
                                  let count_z : int =
                                        (ub_z_i -# lb_z_i) //# stride_z in
                                  justVal @int (count_xy *# count_z)
                              ; nothingVal.

                                  -- Domain is unbounded in the z-dimension
                                  nothingVal @int
                              } in

                        (mk_list_dim list_size,
                         justVal @(MaybeVal int, int)
                         (justVal @int count_xy, count_x),
                         lb_z_i, lb_y_i, lb_x_i)

                    ; nothingVal.
                        except @(list_dim, MaybeVal (MaybeVal int, int),
                                 int, int, int)
                    }
                ; nothingVal.

                    -- Domain has infinite y extent
                    case lb_z of {
                      justVal (lb_z_i : int).
                        (mk_list_dim (nothingVal @int),
                         justVal @(MaybeVal int, int)
                         (nothingVal @int, count_x),
                         lb_z_i, lb_y_i, lb_x_i)
                    ; nothingVal.
                        except @(list_dim, MaybeVal (MaybeVal int, int),
                                 int, int, int)
                    }
                }
            ; nothingVal.
                except @(list_dim, MaybeVal (MaybeVal int, int), int, int, int)
            }

      ; nothingVal.
          -- Domain has infinite x extent
          case lb_y of {
            justVal (lb_y_i : int).
              case lb_z of {
                justVal (lb_z_i : int).
                  (mk_list_dim (nothingVal @int),
                   nothingVal @(MaybeVal int, int), lb_z_i, lb_y_i, lb_x_i)
              ; nothingVal.
                  except @(list_dim, MaybeVal (MaybeVal int, int),
                           int, int, int)
              }

          ; nothingVal.
              except @(list_dim, MaybeVal (MaybeVal int, int), int, int, int)
          }
      }

  ; nothingVal.
      except @(list_dim, MaybeVal (MaybeVal int, int), int, int, int)
  };


ShapeDict_dim3_flatten_helper2
  (i : int) (divisors : MaybeVal (MaybeVal int, int))
  -> (int, int, int)
  attribute(inline, inline_final) =
  case divisors of {
    justVal (divisors_yx : (MaybeVal int, int)).

      -- Finite in the X dimension
      case divisors_yx of (divisor_xy, count_x).
      case divisor_xy of {
        justVal count_xy.

          -- Finite in all dimensions
          let i_xy : int = i %# count_xy in
          let i_z : int = i //# count_xy in
          (i_z, i_xy //# count_x, i_xy %# count_x)

      ; nothingVal.
          -- Infinite in the Y dimension
          (0, i //# count_x, i %# count_x)
      }
  ; nothingVal. (0, 0, i)
  };

ShapeDict_dim3_flatten @(a : box)
  (rep : Repr (AsBare a)) (s : Stream dim3 a) -> Stream list_dim a
  attribute(inline, inline_dimensionality) =
  case s of mk_view (dom : dim3) (f : AsBox (index dim3) -> a).
  case dom of mk_dim3 dom_z dom_y dom_x.
  case dom_z of mk_dim1 (iv_z : Interval) (lm_z : LinearMap).
  case dom_x of mk_dim1 (iv_x : Interval) (lm_x : LinearMap).
  case dom_y of mk_dim1 (iv_y : Interval) (lm_y : LinearMap).
  case iv_z of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).
  case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case lm_z of linearMap (stride_z : int) (alignment_z : int).
  case lm_x of linearMap (stride_x : int) (alignment_x : int).
  case lm_y of linearMap (stride_y : int) (alignment_y : int).

  -- Compute stream dimensions and indices
  case ShapeDict_dim3_flatten_helper iv_z iv_y iv_x stride_z stride_y stride_x
  of (flattened_size : list_dim,
      divisors : MaybeVal (MaybeVal int, int),
      lb_z_i : int, lb_y_i : int, lb_x_i : int).

  viewStream @a
  (mk_view @list_dim @a flattened_size
   (\ (si : Boxed (Stored int)) -> a.
      -- Linearize the index
      let i = unboxIntValue si in
      case ShapeDict_dim3_flatten_helper2 i divisors
      of (i_z : int, i_y : int, i_x : int).

      -- Apply the stride to get an index in the domain
      let dim2_i_z : int = lb_z_i +# i_z *# stride_z in 
      let dim2_i_y : int = lb_y_i +# i_y *# stride_y in 
      let dim2_i_x : int = lb_x_i +# i_x *# stride_x in 

      let type Sint = Stored int in
      let type index3d = Tuple3 Sint Sint Sint in
      let ix = boxed @index3d
               (tuple3 @Sint @Sint @Sint
                (stored @int dim2_i_z) (stored @int dim2_i_y) (stored @int dim2_i_x)) in
      f ix));


ShapeDict_dim3_generate @(a : box)
  (rep : Repr (AsBare a)) (dom : dim3) (f : AsBox (index dim3) -> a)
  -> Stream dim3 a attribute(inline) =
  view_generate @dim3 ShapeDict_dim3 @a rep dom f;


ShapeDict_dim3_map @(a b : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (transformer : a -> b)
  (s : Stream dim3 a)
  -> Stream dim3 b attribute(inline) =
  view_map @dim3
  ShapeDict_dim3 @a @b repr_a repr_b transformer s;


ShapeDict_dim3_zipWith @(a b c : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c))
  (transformer : a -> b -> c)
  (sa : Stream dim3 a)
  (sb : Stream dim3 b)
  -> Stream dim3 c attribute(inline) =
  view_zipWith @dim3 ShapeDict_dim3 @a @b @c
  repr_a repr_b repr_c transformer sa sb;


ShapeDict_dim3_zipWith3 @(a b c d : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d))
  (transformer : a -> b -> c -> d)
  (sa : Stream dim3 a)
  (sb : Stream dim3 b)
  (sc : Stream dim3 c)
  -> Stream dim3 d attribute(inline) =
  view_zipWith3 @dim3 ShapeDict_dim3 @a @b @c @d
  repr_a repr_b repr_c repr_d transformer sa sb sc;


ShapeDict_dim3_zipWith4 @(a b c d e : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d))
  (repr_e : Repr (AsBare e))
  (transformer : a -> b -> c -> d -> e)
  (sa : Stream dim3 a)
  (sb : Stream dim3 b)
  (sc : Stream dim3 c)
  (sd : Stream dim3 d)
  -> Stream dim3 e attribute(inline) =
  view_zipWith4 @dim3 ShapeDict_dim3 @a @b @c @d @e
  repr_a repr_b repr_c repr_d repr_e transformer sa sb sc sd;


ShapeDict_dim3_slice @(t : box -> box) @(a : box)
  (is_dim3 : coerce @box (shape t) dim3)
  (indexable : IndexableDict t)
  (rep : Repr (AsBare a))
  (container : t a)
  (slice_argument : AsBox (slice dim3))
  -> view dim3 a attribute(inline) =
  case indexable of indexableDict at_index get_shape.

  -- Compute the slice's domain
  case slice_argument of boxed u_slice_argument.
  case u_slice_argument of tuple3 slice_z slice_y slice_x.

  let dom : dim3 = coerce @(shape t) @dim3 (get_shape @a container) in
  case dom of mk_dim3 dom_z dom_y dom_x.
  let slice_dom : dim3 =
        mk_dim3 (internalApplyArraySlice slice_z dom_z)
                (internalApplyArraySlice slice_y dom_y)
                (internalApplyArraySlice slice_x dom_x) in

  view_generate @dim3
  ShapeDict_dim3 @a rep slice_dom
  (\ (i : AsBox (index dim3)) -> a.
    at_index @a rep container
    (coerce @(AsBox (index dim3)) @(AsBox (index (shape t))) i));


-------------------------------------------------------------------------------
-- Indexable dictionaries

IndexableDict_list_at_point @(a : box)
  (rep : Repr (AsBare a)) (bls : Boxed (list (AsBare a)))
  (ix : Boxed (Stored int)) -> a
  attribute(inline) =
  case bls of boxed ls.
  case ls of make_list @(N : intindex) n ayref.
  case ayref of stuckBox (ay : arr N (AsBare a)).
  let i = unboxIntValue ix in
  bareToBox @(AsBare a) rep (subscript @N @(AsBare a) (reprSizeAlign @(AsBare a) rep) ay i);


IndexableDict_list_get_shape @(a : box)
  (bls : Boxed (list (AsBare a))) -> list_dim
  attribute(inline) =
  case bls of boxed ls.
  case ls of make_list @(N : intindex) n ayref.
  case n of fiInt (size : int).
  mk_list_dim (justVal @int size);


IndexableDict_view_at_point @(sh : box) (dict : ShapeDict sh) ->
  forall a : box. Repr (AsBare a) -> view sh a -> AsBox (index sh) -> a =
  \ @(a : box)
    (rep : Repr (AsBare a)) (vw : view sh a) (ix : AsBox (index sh)) -> a.
    case vw of mk_view (dom : sh) (f : AsBox (index sh) -> a).
    f ix;


IndexableDict_view_get_shape @(sh : box) (dict : ShapeDict sh) ->
  forall a : box. view sh a -> sh =
  \ @(a : box) (vw : view sh a) -> sh.
    case vw of mk_view dom f. dom;


IndexableDict_array0_at_point @(a : box)
  (rep : Repr (AsBare a)) (ay : Boxed (array0 (AsBare a)))
  (ix : Boxed (Stored NoneType)) -> a
  attribute(inline) =
  case ay of boxed u_ay.
  case u_ay of mk_array0 (x : StuckBox (AsBare a)).
  case x of stuckBox ux.
  bareToBox @(AsBare a) rep ux;


IndexableDict_array0_get_shape @(a : box)
  (ay : Boxed (array0 (AsBare a))) -> dim0
  attribute(inline) =
  mk_dim0;


IndexableDict_array1_at_point @(a : box)
  (rep : Repr (AsBare a)) (ay : Boxed (array1 (AsBare a)))
  (ix : Boxed (Stored int)) -> a
  attribute(inline) =
  case ay of boxed u_ay.
  case u_ay of mk_array1 @(N : intindex) lb stride size ayref.
  case ayref of stuckBox (ay : arr N (AsBare a)).

  -- Compute real array index
  let ix_i = unboxIntValue ix in
  let real_index = (ix_i -# lb) //# stride in
  bareToBox @(AsBare a) rep
  (subscript @N @(AsBare a) (reprSizeAlign @(AsBare a) rep) ay real_index);


IndexableDict_array1_get_shape @(a : box)
  (ay : Boxed (array1 (AsBare a))) -> dim1
  attribute(inline) =
  case ay of boxed u_ay.
  case u_ay of mk_array1 @(N : intindex) lb stride size ayref.
  arrayDescToDim1 @N lb stride size;


IndexableDict_array2_at_point @(a : box)
  (rep : Repr (AsBare a))
  (ay : Boxed (array2 (AsBare a)))
  (ix : AsBox (index dim2))
  -> a attribute(inline) =
  case ay of boxed u_ay.
  case u_ay of mk_array2 @(M N : intindex)
               lb_y stride_y size_y lb_x stride_x size_x ayref.
  case ayref of stuckBox (ay : arr M (arr N (AsBare a))).
  let row_repr = repr_arr @N @(AsBare a) size_x rep in

  -- Compute real array indices
  case ix of boxed u_ix.
  case u_ix of tuple2 ix_y ix_x.
  case ix_y of stored (ix_y_i : int).
  let real_index_y : int = (ix_y_i -# lb_y) //# stride_y in
  case ix_x of stored (ix_x_i : int).
  let real_index_x : int = (ix_x_i -# lb_x) //# stride_x in

  bareToBox @(AsBare a) rep
  (subscript @N @(AsBare a) (reprSizeAlign @(AsBare a) rep)
   (subscript @M @(arr N (AsBare a)) (reprSizeAlign @(arr N (AsBare a)) row_repr)
    ay real_index_y)
   real_index_x);


IndexableDict_array2_get_shape @(a : box)
  (ay : Boxed (array2 (AsBare a))) -> dim2
  attribute(inline) =
  case ay of boxed u_ay.
  case u_ay of mk_array2 @(M N : intindex)
               lb_y stride_y size_y lb_x stride_x size_x ayref.
  mk_dim2 (arrayDescToDim1 @M lb_y stride_y size_y)
          (arrayDescToDim1 @N lb_x stride_x size_x);


IndexableDict_array3_at_point @(a : box)
  (rep : Repr (AsBare a))
  (ay : Boxed (array3 (AsBare a)))
  (ix : AsBox (index dim3))
  -> a attribute(inline) =
  case ay of boxed (mk_array3 @(L M N : intindex)
                    lb_z stride_z size_z lb_y stride_y size_y lb_x stride_x size_x
                    ayref).
  case ayref of stuckBox ay.
  let row_repr = repr_arr @N @(AsBare a) size_x rep in
  let plane_repr = repr_arr @M @(arr N (AsBare a)) size_y row_repr in

  -- Compute real array indices
  case ix of boxed u_ix.
  case u_ix of tuple3 ix_z ix_y ix_x.
  case ix_z of stored (ix_z_i : int).
  let real_index_z : int = (ix_z_i -# lb_z) //# stride_z in
  case ix_y of stored (ix_y_i : int).
  let real_index_y : int = (ix_y_i -# lb_y) //# stride_y in
  case ix_x of stored (ix_x_i : int).
  let real_index_x : int = (ix_x_i -# lb_x) //# stride_x in

  -- Copy the desired element
  bareToBox @(AsBare a) rep
  (subscript @N @(AsBare a) (reprSizeAlign @(AsBare a) rep)
   (subscript @M @(arr N (AsBare a)) (reprSizeAlign @(arr N (AsBare a)) row_repr)
     (subscript @L @(arr M (arr N (AsBare a))) (reprSizeAlign @(arr M (arr N (AsBare a))) plane_repr)
      ay real_index_z)
    real_index_y)
   real_index_x);


IndexableDict_array3_get_shape @(a : box)
  (ay : Boxed (array3 (AsBare a))) -> dim3
  attribute(inline) =
  case ay of boxed u_ay.
  case u_ay of mk_array3 @(L M N : intindex)
               lb_z stride_z size_z lb_y stride_y size_y lb_x stride_x size_x
               ayref.
  mk_dim3 (arrayDescToDim1 @L lb_z stride_z size_z)
          (arrayDescToDim1 @M lb_y stride_y size_y)
          (arrayDescToDim1 @N lb_x stride_x size_x);


IndexableDict_blist_at_point @(a : box)
  (rep : Repr (AsBare a))
  (ls : Boxed (blist (AsBare a)))
  (ix : Boxed (Stored int))
  -> a
  attribute(inline) =
  let type boxed_a = StuckRef a in
  case ls of boxed u_ls.
  case u_ls of make_blist (ls2 : list boxed_a).
  case ls2 of make_list @(N : intindex) n ayref.
  case ayref of stuckBox (ay : arr N boxed_a).
  let repr_box : Repr boxed_a = repr_StuckRef @a in
  let ix_i = unboxIntValue ix in
  case subscript @N @boxed_a (reprSizeAlign @boxed_a repr_box) ay ix_i of
    stuckRef val.
  val;


IndexableDict_blist_get_shape @(a : box)
  (ls : Boxed (blist (AsBare a))) -> list_dim
  attribute(inline) =
  let type boxed_a = StuckRef a in
  case ls of boxed u_ls.
  case u_ls of make_blist (ls2 : list boxed_a).
  case ls2 of make_list @(N : intindex) n ayref.
  case n of fiInt (size : int).
  mk_list_dim (justVal @int size);


IndexableDict_barray1_at_point @(a : box)
  (rep : Repr (AsBare a))
  (ay : Boxed (barray1 (AsBare a)))
  (ix : Boxed (Stored int))
  -> a
  attribute(inline) =
  let type boxed_a = StuckRef a in
  case ay of boxed u_ay.
  case u_ay of mk_barray1 (ay2 : array1 boxed_a).
  case ay2 of mk_array1 @(N : intindex) lb stride size ayref.
  case ayref of stuckBox (ay : arr N boxed_a).
  let boxed_repr = repr_StuckRef @a in

  -- Compute real array index
  let ix_i = unboxIntValue ix in
  let real_index : int = (ix_i -# lb) //# stride in
  case subscript @N @boxed_a (reprSizeAlign @boxed_a boxed_repr) ay real_index
    of stuckRef val.
  val;


IndexableDict_barray1_get_shape @(a : box)
  (ay : Boxed (barray1 (AsBare a))) -> dim1
  attribute(inline) =
  let type boxed_a = StuckRef a in
  case ay of boxed u_ay.
  case u_ay of mk_barray1 (ay2 : array1 boxed_a).
  case ay2 of mk_array1 @(N : intindex) lb stride size ayref.
  arrayDescToDim1 @N lb stride size;


IndexableDict_barray2_at_point @(a : box)
  (rep : Repr (AsBare a))
  (ay : Boxed (barray2 (AsBare a)))
  (ix : AsBox (index dim2))
  -> a
  attribute(inline) =
  let type boxed_a = StuckRef a in
  case ay of boxed u_ay.
  case u_ay of mk_barray2 (ay2 : array2 boxed_a).
  case ay2 of mk_array2 @(M N : intindex)
             lb_y stride_y size_y lb_x stride_x size_x ayref.
  case ayref of stuckBox (ay : arr M (arr N boxed_a)).
  let boxed_repr : Repr boxed_a = repr_StuckRef @a in
  let row_repr : Repr (arr N boxed_a) =
        repr_arr @N @boxed_a size_x boxed_repr in

  -- Compute real array indices
  case ix of boxed u_ix.
  case u_ix of tuple2 ix_y ix_x.
  case ix_y of stored ix_y_i.
  let real_index_y : int = (ix_y_i -# lb_y) //# stride_y in
  case ix_x of stored ix_x_i.
  let real_index_x : int = (ix_x_i -# lb_x) //# stride_x in

  -- Copy the desired element
  case subscript @N @boxed_a (reprSizeAlign @boxed_a boxed_repr)
       (subscript @M @(arr N boxed_a)
       (reprSizeAlign @(arr N boxed_a) row_repr) ay real_index_y) real_index_x
    of stuckRef val.
  val;


IndexableDict_barray2_get_shape @(a : box)
  (ay : Boxed (barray2 (AsBare a))) -> dim2
  attribute(inline) =
  let type boxed_a = StuckRef a in
  case ay of boxed u_ay.
  case u_ay of mk_barray2 (ay2 : array2 boxed_a).
  case ay2 of mk_array2 @(M N : intindex)
             lb_y stride_y size_y lb_x stride_x size_x ayref.
  mk_dim2 (arrayDescToDim1 @M lb_y stride_y size_y)
          (arrayDescToDim1 @N lb_x stride_x size_x);


IndexableDict_barray3_at_point @(a : box)
  (rep : Repr (AsBare a))
  (ay : Boxed (barray3 (AsBare a)))
  (ix : AsBox (index dim3))
  -> a
  attribute(inline) =
  let type boxed_a = StuckRef a in
  case ay of boxed u_ay.
  case u_ay of mk_barray3 (ay2 : array3 boxed_a).
  case ay2 of mk_array3 @(L M N : intindex)
             lb_z stride_z size_z lb_y stride_y size_y lb_x stride_x size_x
             ayref.
  case ayref of stuckBox (ay : arr L (arr M (arr N boxed_a))).
  let boxed_repr : Repr boxed_a = repr_StuckRef @a in
  let row_repr : Repr (arr N boxed_a) =
        repr_arr @N @boxed_a size_x boxed_repr in
  let plane_repr : Repr (arr M (arr N boxed_a)) =
        repr_arr @M @(arr N boxed_a) size_y row_repr in

  -- Compute real array indices
  case ix of boxed u_ix.
  case u_ix of tuple3 ix_z ix_y ix_x.
  case ix_z of stored ix_z_i.
  let real_index_z : int = (ix_z_i -# lb_z) //# stride_z in
  case ix_y of stored ix_y_i.
  let real_index_y : int = (ix_y_i -# lb_y) //# stride_y in
  case ix_x of stored ix_x_i.
  let real_index_x : int = (ix_x_i -# lb_x) //# stride_x in

  -- Copy the desired element
  case subscript @N @boxed_a (reprSizeAlign @boxed_a boxed_repr)
       (subscript @M @(arr N boxed_a)
        (reprSizeAlign @(arr N boxed_a) row_repr)
        (subscript @L @(arr M (arr N boxed_a))
         (reprSizeAlign @(arr M (arr N boxed_a)) plane_repr)
         ay real_index_z) real_index_y) real_index_x
    of stuckRef val.
  val;


IndexableDict_barray3_get_shape @(a : box)
  (ay : Boxed (barray3 (AsBare a)))
  -> dim3
  attribute(inline) =
  let type boxed_a = StuckRef a in 
  case ay of boxed u_ay.
  case u_ay of mk_barray3 (ay2 : array3 boxed_a).
  case ay2 of mk_array3 @(L M N : intindex)
             lb_z stride_z size_z lb_y stride_y size_y lb_x stride_x size_x
             ayref.
  mk_dim3 (arrayDescToDim1 @L lb_z stride_z size_z)
          (arrayDescToDim1 @M lb_y stride_y size_y)
          (arrayDescToDim1 @N lb_x stride_x size_x);


-------------------------------------------------------------------------------
-- Comparison dictionaries

EqDict_int : EqDict (Boxed (Stored int));
EqDict_int_eq (bsx : Boxed (Stored int)) (bsy : Boxed (Stored int))
  -> Boxed (Stored bool)
  attribute(inline) =
  boxBoolValue (eqI (unboxIntValue bsx) (unboxIntValue bsy));

EqDict_int_ne (bsx : Boxed (Stored int)) (bsy : Boxed (Stored int))
  -> Boxed (Stored bool)
  attribute(inline) =
  boxBoolValue (neI (unboxIntValue bsx) (unboxIntValue bsy));

EqDict_float : EqDict (Boxed (Stored float));
EqDict_float_eq (bsx : Boxed (Stored float)) (bsy : Boxed (Stored float))
  -> Boxed (Stored bool)
  attribute(inline) =
  boxBoolValue (eqF (unboxFloatValue bsx) (unboxFloatValue bsy));

EqDict_float_ne (bsx : Boxed (Stored float)) (bsy : Boxed (Stored float))
  -> Boxed (Stored bool)
  attribute(inline) =
  boxBoolValue (neF (unboxFloatValue bsx) (unboxFloatValue bsy));

EqDict_Tuple2 : forall a b : box. Repr (AsBare a) -> Repr (AsBare b) -> EqDict a -> EqDict b
             -> EqDict (Boxed (Tuple2 (AsBare a) (AsBare b)));
EqDict_Tuple2_eq @(a b : box)
  (repA : Repr (AsBare a)) (repB : Repr (AsBare b))
  (eqA : EqDict a) (eqB : EqDict b)
  (bx : Boxed (Tuple2 (AsBare a) (AsBare b)))
  (by : Boxed (Tuple2 (AsBare a) (AsBare b)))
  -> Boxed (Stored bool)
  attribute(inline) =
  let type ba = AsBare a in
  let type bb = AsBare b in
  case eqA of eqDict eq_a ne_a.
  case eqB of eqDict eq_b ne_b.
  case bx of boxed x.
  case by of boxed y.
  case x of tuple2 xa xb.
  case y of tuple2 ya yb.

  boxBoolValue
  (and (unboxBoolValue
        (eq_a (asbox @ba repA (copy @ba repA xa))
              (asbox @ba repA (copy @ba repA ya))))
       (unboxBoolValue
        (eq_b (asbox @bb repB (copy @bb repB xb))
              (asbox @bb repB (copy @bb repB yb)))));


EqDict_Tuple2_ne @(a b : box)
  (repA : Repr (AsBare a)) (repB : Repr (AsBare b))
  (eqA : EqDict a) (eqB : EqDict b)
  (bx : Boxed (Tuple2 (AsBare a) (AsBare b)))
  (by : Boxed (Tuple2 (AsBare a) (AsBare b)))
  -> Boxed (Stored bool)
  attribute(inline) =
  let type ba = AsBare a in
  let type bb = AsBare b in
  case eqA of eqDict eq_a ne_a.
  case eqB of eqDict eq_b ne_b.
  case bx of boxed x.
  case by of boxed y.
  case x of tuple2 xa xb.
  case y of tuple2 ya yb.

  boxBoolValue
  (and (unboxBoolValue
        (ne_a (asbox @ba repA (copy @ba repA xa))
              (asbox @ba repA (copy @ba repA ya))))
       (unboxBoolValue
        ((ne_b (asbox @bb repB (copy @bb repB xb))
              (asbox @bb repB (copy @bb repB yb))))));


EqDict_Tuple3 : forall a b c : box.
                Repr (AsBare a) -> Repr (AsBare b) -> Repr (AsBare c)
             -> EqDict a -> EqDict b -> EqDict c
             -> EqDict (Boxed (Tuple3 (AsBare a) (AsBare b) (AsBare c)));
EqDict_Tuple3_eq @(a b c : box)
  (repA : Repr (AsBare a)) (repB : Repr (AsBare b)) (repC : Repr (AsBare c))
  (eqA : EqDict a) (eqB : EqDict b) (eqC : EqDict c)
  (bx : Boxed (Tuple3 (AsBare a) (AsBare b) (AsBare c)))
  (by : Boxed (Tuple3 (AsBare a) (AsBare b) (AsBare c)))
  -> Boxed (Stored bool)
  attribute(inline) =
  let type ba = AsBare a in
  let type bb = AsBare b in
  let type bc = AsBare c in
  case eqA of eqDict eq_a ne_a.
  case eqB of eqDict eq_b ne_b.
  case eqC of eqDict eq_c ne_c.
  case bx of boxed x.
  case by of boxed y.
  case x of tuple3 xa xb xc.
  case y of tuple3 ya yb yc.

  let eq1 : bool = unboxBoolValue
                   (eq_a (asbox @ba repA (copy @ba repA xa))
                         (asbox @ba repA (copy @ba repA ya))) in
  let eq2 : bool = unboxBoolValue
                   (eq_b (asbox @bb repB (copy @bb repB xb))
                         (asbox @bb repB (copy @bb repB yb))) in
  let eq3 : bool = unboxBoolValue
                   (eq_c (asbox @bc repC (copy @bc repC xc))
                         (asbox @bc repC (copy @bc repC yc))) in
  boxBoolValue (and (and eq1 eq2) eq3);


EqDict_Tuple3_ne @(a b c : box)
  (repA : Repr (AsBare a)) (repB : Repr (AsBare b)) (repC : Repr (AsBare c))
  (eqA : EqDict a) (eqB : EqDict b) (eqC : EqDict c)
  (bx : Boxed (Tuple3 (AsBare a) (AsBare b) (AsBare c)))
  (by : Boxed (Tuple3 (AsBare a) (AsBare b) (AsBare c)))
  -> Boxed (Stored bool)
  attribute(inline) =
  let type ba = AsBare a in
  let type bb = AsBare b in
  let type bc = AsBare c in
  case eqA of eqDict eq_a ne_a.
  case eqB of eqDict eq_b ne_b.
  case eqC of eqDict eq_c ne_c.
  case bx of boxed x.
  case by of boxed y.
  case x of tuple3 xa xb xc.
  case y of tuple3 ya yb yc.

  let ne1 : bool = unboxBoolValue
                   (ne_a (asbox @ba repA (copy @ba repA xa))
                         (asbox @ba repA (copy @ba repA ya))) in
  let ne2 : bool = unboxBoolValue
                   (ne_b (asbox @bb repB (copy @bb repB xb))
                         (asbox @bb repB (copy @bb repB yb))) in
  let ne3 : bool = unboxBoolValue
                   (ne_c (asbox @bc repC (copy @bc repC xc))
                         (asbox @bc repC (copy @bc repC yc))) in
  boxBoolValue (and (and ne1 ne2) ne3);


OrdDict_int : OrdDict (Boxed (Stored int));


OrdDict_int_lt (x : Boxed (Stored int)) (y : Boxed (Stored int))
  -> Boxed (Stored bool) attribute(inline) =
  boxBoolValue (ltI (unboxIntValue x) (unboxIntValue y));


OrdDict_int_le (x : Boxed (Stored int)) (y : Boxed (Stored int))
  -> Boxed (Stored bool) attribute(inline) =
  boxBoolValue (leI (unboxIntValue x) (unboxIntValue y));


OrdDict_int_gt (x : Boxed (Stored int)) (y : Boxed (Stored int))
  -> Boxed (Stored bool) attribute(inline) =
  boxBoolValue (gtI (unboxIntValue x) (unboxIntValue y));


OrdDict_int_ge (x : Boxed (Stored int)) (y : Boxed (Stored int))
  -> Boxed (Stored bool) attribute(inline) =
  boxBoolValue (geI (unboxIntValue x) (unboxIntValue y));


OrdDict_float : OrdDict (Boxed (Stored float));


OrdDict_float_lt (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored bool) attribute(inline) =
  boxBoolValue (ltF (unboxFloatValue x) (unboxFloatValue y));


OrdDict_float_le (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored bool) attribute(inline) =
  boxBoolValue (leF (unboxFloatValue x) (unboxFloatValue y));


OrdDict_float_gt (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored bool) attribute(inline) =
  boxBoolValue (gtF (unboxFloatValue x) (unboxFloatValue y));


OrdDict_float_ge (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored bool) attribute(inline) =
  boxBoolValue (geF (unboxFloatValue x) (unboxFloatValue y));


OrdDict_Tuple2 : forall a b : box. Repr (AsBare a) -> Repr (AsBare b)
              -> OrdDict a -> OrdDict b
              -> OrdDict (Boxed (Tuple2 (AsBare a) (AsBare b)));

OrdDict_Tuple2_lt @(a b : box)
  (rep_a : Repr (AsBare a)) (rep_b : Repr (AsBare b))
  (ord_a : OrdDict a) (ord_b : OrdDict b)
  (x : Tuple2 (AsBare a) (AsBare b)) (y : Tuple2 (AsBare a) (AsBare b))
  -> Boxed (Stored bool)
  attribute(inline) =

  case ord_a of ordDict eqDict_a lt_a le_a gt_a ge_a.
  case ord_b of ordDict eqDict_b lt_b le_b gt_b ge_b.
  case x of tuple2 x_a x_b.
  case y of tuple2 y_a y_b.
  boxBoolValue (and (unboxBoolValue (lt_a (bareToBox @(AsBare a) rep_a x_a)
                                          (bareToBox @(AsBare a) rep_a y_a)))
                    (unboxBoolValue (lt_b (bareToBox @(AsBare b) rep_b x_b)
                                          (bareToBox @(AsBare b) rep_b y_b))));


OrdDict_Tuple2_le @(a b : box)
  (rep_a : Repr (AsBare a)) (rep_b : Repr (AsBare b))
  (ord_a : OrdDict a) (ord_b : OrdDict b)
  (x : Tuple2 (AsBare a) (AsBare b)) (y : Tuple2 (AsBare a) (AsBare b))
  -> Boxed (Stored bool)
  attribute(inline) =

  case ord_a of ordDict eqDict_a lt_a le_a gt_a ge_a.
  case ord_b of ordDict eqDict_b lt_b le_b gt_b ge_b.
  case x of tuple2 x_a x_b.
  case y of tuple2 y_a y_b.
  boxBoolValue (and (unboxBoolValue (le_a (bareToBox @(AsBare a) rep_a x_a)
                                          (bareToBox @(AsBare a) rep_a y_a)))
                    (unboxBoolValue (le_b (bareToBox @(AsBare b) rep_b x_b)
                                          (bareToBox @(AsBare b) rep_b y_b))));


OrdDict_Tuple2_gt @(a b : box)
  (rep_a : Repr (AsBare a)) (rep_b : Repr (AsBare b))
  (ord_a : OrdDict a) (ord_b : OrdDict b)
  (x : Tuple2 (AsBare a) (AsBare b)) (y : Tuple2 (AsBare a) (AsBare b))
  -> Boxed (Stored bool)
  attribute(inline) =

  case ord_a of ordDict eqDict_a lt_a le_a gt_a ge_a.
  case ord_b of ordDict eqDict_b lt_b le_b gt_b ge_b.
  case x of tuple2 x_a x_b.
  case y of tuple2 y_a y_b.
  boxBoolValue (and (unboxBoolValue (gt_a (bareToBox @(AsBare a) rep_a x_a)
                                          (bareToBox @(AsBare a) rep_a y_a)))
                    (unboxBoolValue (gt_b (bareToBox @(AsBare b) rep_b x_b)
                                          (bareToBox @(AsBare b) rep_b y_b))));


OrdDict_Tuple2_ge @(a b : box)
  (rep_a : Repr (AsBare a)) (rep_b : Repr (AsBare b))
  (ord_a : OrdDict a) (ord_b : OrdDict b)
  (x : Tuple2 (AsBare a) (AsBare b)) (y : Tuple2 (AsBare a) (AsBare b))
  -> Boxed (Stored bool)
  attribute(inline) =

  case ord_a of ordDict eqDict_a lt_a le_a gt_a ge_a.
  case ord_b of ordDict eqDict_b lt_b le_b gt_b ge_b.
  case x of tuple2 x_a x_b.
  case y of tuple2 y_a y_b.
  boxBoolValue (and (unboxBoolValue (ge_a (bareToBox @(AsBare a) rep_a x_a)
                                          (bareToBox @(AsBare a) rep_a y_a)))
                    (unboxBoolValue (ge_b (bareToBox @(AsBare b) rep_b x_b)
                                          (bareToBox @(AsBare b) rep_b y_b))));


-------------------------------------------------------------------------------
-- Numeric dictionaries

AdditiveDict_int : AdditiveDict (Boxed (Stored int));
AdditiveDict_int_add (x : Boxed (Stored int)) (y : Boxed (Stored int))
  -> Boxed (Stored int) =
  boxIntValue (addI (unboxIntValue x) (unboxIntValue y));
  
AdditiveDict_int_sub (x : Boxed (Stored int)) (y : Boxed (Stored int))
  -> Boxed (Stored int) =
  boxIntValue (subI (unboxIntValue x) (unboxIntValue y));

AdditiveDict_int_negate (x : Boxed (Stored int)) -> Boxed (Stored int) =
  boxIntValue (negI (unboxIntValue x));

AdditiveDict_int_zero : Boxed (Stored int) =
  boxed @(Stored int) (stored @int 0);

AdditiveDict_uint : AdditiveDict (Boxed (Stored uint));
AdditiveDict_uint_add : Boxed (Stored uint) -> Boxed (Stored uint) -> Boxed (Stored uint);
AdditiveDict_uint_sub : Boxed (Stored uint) -> Boxed (Stored uint) -> Boxed (Stored uint);
AdditiveDict_uint_negate : Boxed (Stored uint) -> Boxed (Stored uint);
AdditiveDict_uint_zero : Boxed (Stored uint);

AdditiveDict_float : AdditiveDict (Boxed (Stored float));
AdditiveDict_float_add (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored float) =
  boxFloatValue (addF (unboxFloatValue x) (unboxFloatValue y));

AdditiveDict_float_sub (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored float) =
  boxFloatValue (subF (unboxFloatValue x) (unboxFloatValue y));

AdditiveDict_float_negate (x : Boxed (Stored float)) -> Boxed (Stored float) =
  boxFloatValue (negF (unboxFloatValue x));

AdditiveDict_float_zero : Boxed (Stored float) =
  boxed @(Stored float) (stored @float 0.0);

AdditiveDict_Tuple2 : forall a b : box.
                      Repr (AsBare a) -> Repr (AsBare b)
                   -> AdditiveDict a -> AdditiveDict b
                   -> AdditiveDict (Boxed (Tuple2 (AsBare a) (AsBare b)));


AdditiveDict_Tuple2_add @(a b : box)
  (repr_a : Repr (AsBare a))
  (repr_b : Repr (AsBare b))
  (additive_a : AdditiveDict a)
  (additive_b : AdditiveDict b)
  (x : Boxed (Tuple2 (AsBare a) (AsBare b)))
  (y : Boxed (Tuple2 (AsBare a) (AsBare b)))
  -> Boxed (Tuple2 (AsBare a) (AsBare b)) =

  case additive_a of additiveDict add_a sub_a negate_a zero_a.
  case additive_b of additiveDict add_b sub_b negate_b zero_b.

  case x of boxed ux.
  case ux of tuple2 x_a x_b.
  case y of boxed ux.
  case ux of tuple2 y_a y_b.
  boxed @(Tuple2 (AsBare a) (AsBare b))
  (tuple2 @(AsBare a) @(AsBare b)
   (asbare @(AsBare a) repr_a (add_a (bareToBox @(AsBare a) repr_a x_a)
                                     (bareToBox @(AsBare a) repr_a y_a)))
   (asbare @(AsBare b) repr_b (add_b (bareToBox @(AsBare b) repr_b x_b)
                                     (bareToBox @(AsBare b) repr_b y_b))));


AdditiveDict_Tuple2_sub @(a b : box)
  (repr_a : Repr (AsBare a))
  (repr_b : Repr (AsBare b))
  (additive_a : AdditiveDict a)
  (additive_b : AdditiveDict b)
  (x : Boxed (Tuple2 (AsBare a) (AsBare b)))
  (y : Boxed (Tuple2 (AsBare a) (AsBare b)))
  -> Boxed (Tuple2 (AsBare a) (AsBare b)) =

  case additive_a of additiveDict add_a sub_a negate_a zero_a.
  case additive_b of additiveDict add_b sub_b negate_b zero_b.

  case x of boxed ux.
  case ux of tuple2 x_a x_b.
  case y of boxed ux.
  case ux of tuple2 y_a y_b.
  boxed @(Tuple2 (AsBare a) (AsBare b))
  (tuple2 @(AsBare a) @(AsBare b)
   (asbare @(AsBare a) repr_a (sub_a (bareToBox @(AsBare a) repr_a x_a)
                                     (bareToBox @(AsBare a) repr_a y_a)))
   (asbare @(AsBare b) repr_b (sub_b (bareToBox @(AsBare b) repr_b x_b)
                                     (bareToBox @(AsBare b) repr_b y_b))));


AdditiveDict_Tuple2_negate @(a b : box)
  (repr_a : Repr (AsBare a))
  (repr_b : Repr (AsBare b))
  (additive_a : AdditiveDict a)
  (additive_b : AdditiveDict b)
  (x : Boxed (Tuple2 (AsBare a) (AsBare b)))
  -> Boxed (Tuple2 (AsBare a) (AsBare b)) =

  case additive_a of additiveDict add_a sub_a negate_a zero_a.
  case additive_b of additiveDict add_b sub_b negate_b zero_b.

  case x of boxed ux.
  case ux of tuple2 x_a x_b.
  boxed @(Tuple2 (AsBare a) (AsBare b))
  (tuple2 @(AsBare a) @(AsBare b)
   (asbare @(AsBare a) repr_a (negate_a (bareToBox @(AsBare a) repr_a x_a)))
   (asbare @(AsBare b) repr_b (negate_b (bareToBox @(AsBare b) repr_b x_b))));


AdditiveDict_Tuple2_zero @(a b : box)
  (repr_a : Repr (AsBare a))
  (repr_b : Repr (AsBare b))
  (additive_a : AdditiveDict a)
  (additive_b : AdditiveDict b)
  -> Boxed (Tuple2 (AsBare a) (AsBare b)) =

  case additive_a of additiveDict add_a sub_a negate_a zero_a.
  case additive_b of additiveDict add_b sub_b negate_b zero_b.

  boxed @(Tuple2 (AsBare a) (AsBare b))
  (tuple2 @(AsBare a) @(AsBare b)
   (asbare @(AsBare a) repr_a zero_a)
   (asbare @(AsBare b) repr_b zero_b));


MultiplicativeDict_int : MultiplicativeDict (Boxed (Stored int));

MultiplicativeDict_int_one : Boxed (Stored int) =
  boxed @(Stored int) (stored @int 1);


MultiplicativeDict_int_mul (x : Boxed (Stored int)) (y : Boxed (Stored int))
  -> Boxed (Stored int) attribute(inline) =
  boxIntValue (mulI (unboxIntValue x) (unboxIntValue y));


-- Converting int to int is the identity transformation
MultiplicativeDict_int_fromInt (x : Boxed (Stored int))
  -> Boxed (Stored int) attribute(inline) =
  x;


MultiplicativeDict_uint : MultiplicativeDict (Boxed (Stored uint));
MultiplicativeDict_uint_one : Boxed (Stored uint);
MultiplicativeDict_uint_mul : Boxed (Stored uint) -> Boxed (Stored uint)
                           -> Boxed (Stored uint);
MultiplicativeDict_uint_fromInt : Boxed (Stored int) -> Boxed (Stored uint);


MultiplicativeDict_float : MultiplicativeDict (Boxed (Stored float));
MultiplicativeDict_float_one : Boxed (Stored float) =
  boxed @(Stored float) (stored @float 1.0);


MultiplicativeDict_float_mul (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (mulF (unboxFloatValue x) (unboxFloatValue y));


MultiplicativeDict_float_fromInt (x : Boxed (Stored int))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (fromintF (unboxIntValue x));


RemainderDict_int_floordiv (x : Boxed (Stored int)) (y : Boxed (Stored int))
  -> Boxed (Stored int) attribute(inline) =
  boxIntValue (floordivI (unboxIntValue x) (unboxIntValue y));


RemainderDict_int_mod (x : Boxed (Stored int)) (y : Boxed (Stored int))
  -> Boxed (Stored int) attribute(inline) =
  boxIntValue (modI (unboxIntValue x) (unboxIntValue y));


RemainderDict_uint_floordiv : uint -> uint -> uint;
RemainderDict_uint_mod : uint -> uint -> uint;


RemainderDict_float_floordiv (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored int) attribute(inline) =
  boxIntValue (floordivF (unboxFloatValue x) (unboxFloatValue y));


RemainderDict_float_mod (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (modF (unboxFloatValue x) (unboxFloatValue y));


FractionalDict_float_div (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (divF (unboxFloatValue x) (unboxFloatValue y));


FloatingDict_float_fromfloat (x : Boxed (Stored float))
  -> Boxed (Stored float) = x;


FloatingDict_float_power (x : Boxed (Stored float)) (y : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (powF (unboxFloatValue x) (unboxFloatValue y));


FloatingDict_float_exp (x : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (expF (unboxFloatValue x));


FloatingDict_float_log (x : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (logF (unboxFloatValue x));


FloatingDict_float_sqrt (x : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (sqrtF (unboxFloatValue x));


FloatingDict_float_sin (x : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (sinF (unboxFloatValue x));


FloatingDict_float_cos (x : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (cosF (unboxFloatValue x));


FloatingDict_float_tan (x : Boxed (Stored float))
  -> Boxed (Stored float) attribute(inline) =
  boxFloatValue (tanF (unboxFloatValue x));


FloatingDict_float_pi : Boxed (Stored float) =
  boxed @(Stored float) (stored @float 3.141592653589793);


VectorDict_float_scale : float -> float -> float;
VectorDict_float_magnitude : float -> float;
VectorDict_float_dot : float -> float -> float;

CartesianDict_dim0_loBound
  (dom : dim0)
  -> Init (Maybe (index dim0))
  attribute(inline) =
  just @(Stored NoneType) (stored @NoneType None);


CartesianDict_dim0_hiBound
  (dom : dim0)
  -> Init (Maybe (index dim0))
  attribute(inline) =
  just @(Stored NoneType) (stored @NoneType None);


CartesianDict_dim0_stride
  (dom : dim0)
  -> Init (index dim0)
  attribute(inline) =
  stored @NoneType None;


CartesianDict_dim0_arrayDomain
  (lo : index dim0)
  (hi : index dim0)
  -> dim0
  attribute(inline) =
  mk_dim0;


CartesianDict_dim0_displaceDomain
  (dom : dim0)
  (ix : index dim0)
  -> dim0
  attribute(inline) =
  mk_dim0;


CartesianDict_dim0_multiplyDomain
  (dom : dim0)
  (n : Stored NoneType)
  -> dim0
  attribute(inline) =
  mk_dim0;


CartesianDict_dim0_divideDomain
  (dom : dim0)
  (n : Stored NoneType)
  -> dim0
  attribute(inline) =
  mk_dim0;


CartesianDict_dim0_multiplyIndex :
    AsBox (index dim0) -> AsBox (index dim0) -> AsBox (index dim0);

CartesianDict_dim0_divideIndex :
    AsBox (index dim0) -> AsBox (index dim0) -> AsBox (index dim0);

CartesianDict_dim0_unbounded :
    dim0;


CartesianDict_dim1_loBound
  (dom : dim1) -> Boxed (Maybe (index dim1))
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case lb of {
    justVal x.  boxed @(Maybe (index dim1))
                (just @(Stored int) (stored @int x))
  ; nothingVal. boxed @(Maybe (index dim1))
                (nothing @(Stored int))
  };


CartesianDict_dim1_hiBound
  (dom : dim1) -> Boxed (Maybe (index dim1))
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case ub of {
    justVal x.  boxed @(Maybe (index dim1))
                (just @(Stored int) (stored @int x))
  ; nothingVal. boxed @(Maybe (index dim1))
                (nothing @(Stored int))
  };


CartesianDict_dim1_stride
  (dom : dim1) -> Boxed (index dim1)
  attribute(inline) =
  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case lm of linearMap (stride : int) (alignment : int).
  boxIntValue stride;
  

CartesianDict_dim1_arrayDomain
  (lo : AsBox (index dim1))
  (hi : AsBox (index dim1))
  -> dim1
  attribute(inline, inline_final) =
  let lo_i = unboxIntValue lo in
  let hi_i = unboxIntValue hi in

  -- Check for empty range
  if lo_i ># hi_i
  then mk_dim1 (interval (justVal @int 0) (justVal @int 0)) (linearMap 1 0)
  else mk_dim1 (interval (justVal @int lo_i) (justVal @int hi_i))
               (linearMap 1 0);


CartesianDict_dim1_displaceDomain
  (dom : dim1)
  (ix : AsBox (index dim1))
  -> dim1
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (m : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case m of linearMap (stride : int) (alignment : int).
  let offset_i = unboxIntValue ix in

  let lb2 : MaybeVal int =
        case lb of {
          justVal lb_i. justVal @int (lb_i +# offset_i)
        ; nothingVal. nothingVal @int
        } in
  let ub2 : MaybeVal int =
        case ub of {
          justVal ub_i. justVal @int (ub_i +# offset_i)
        ; nothingVal. nothingVal @int
        } in
  mk_dim1 (interval lb2 ub2)
          (linearMap stride ((alignment +# offset_i) %# stride));


CartesianDict_dim1_multiplyDomain
  (dom : dim1)
  (n : Boxed (Stored int))
  -> dim1
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (m : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case m of linearMap (stride : int) (alignment : int).
  let n_u = unboxIntValue n in

  -- Stride must remain positive
  if n_u <=# 0 then except @dim1 else
  
  let lb2 : MaybeVal int =
        case lb of {
          justVal lb_i. justVal @int (lb_i *# n_u)
        ; nothingVal. nothingVal @int
        } in

  let ub2 : MaybeVal int =
        case ub of {
          justVal ub_i. justVal @int (ub_i *# n_u)
        ; nothingVal. nothingVal @int
        } in
  mk_dim1 (interval lb2 ub2)
          (linearMap (stride *# n_u) (alignment *# n_u));


CartesianDict_dim1_divideDomain
  (dom : dim1)
  (n : Boxed (Stored int))
  -> dim1
  attribute(inline, inline_sequential) =
  case dom of mk_dim1 (iv : Interval) (m : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case m of linearMap (stride : int) (alignment : int).
  let n_u = unboxIntValue n in

  -- Stride must remain positive
  if n_u <=# 0 then except @dim1 else

  -- Ensure that it divides exactly
  if or (stride %# n_u /=# 0) (alignment %# n_u /=# 0)
  then except @(dim1) else
  
  let lb2 : MaybeVal int =
        case lb of {
          justVal lb_i. justVal @int (lb_i //# n_u)
        ; nothingVal. nothingVal @int
        } in

  let ub2 : MaybeVal int =
        case ub of {
          justVal ub_i. justVal @int (ub_i //# n_u)
        ; nothingVal. nothingVal @int
        } in
  mk_dim1 (interval lb2 ub2)
          (linearMap (stride //# n_u) (alignment //# n_u));


CartesianDict_dim1_multiplyIndex :
    AsBox (index dim1) -> AsBox (index dim1) -> AsBox (index dim1);

CartesianDict_dim1_divideIndex :
    AsBox (index dim1) -> AsBox (index dim1) -> AsBox (index dim1);

CartesianDict_dim1_unbounded :
    dim1;


CartesianDict_dim2_loBound (dom : dim2) -> Boxed (Maybe (index dim2))
  attribute(inline, inline_final) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case dom_y of mk_dim1 (iv_y : Interval) (lm : LinearMap).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case lb_y of {
    justVal (y : int).
      case dom_x of mk_dim1 (iv_x : Interval) (lm : LinearMap).
      case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
      case lb_x of {
        justVal (x : int).
          boxed @(Maybe (index dim2))
          (just @(Tuple2 (Stored int) (Stored int))
                (tuple2 @(Stored int) @(Stored int)
                 (stored @int y) (stored @int x)))
      ; nothingVal.
          boxed @(Maybe (index dim2))
          (nothing @(Tuple2 (Stored int) (Stored int)))
      }
  ; nothingVal.
      boxed @(Maybe (index dim2))
      (nothing @(Tuple2 (Stored int) (Stored int)))
  };
  

CartesianDict_dim2_hiBound (dom : dim2) -> Boxed (Maybe (index dim2))
  attribute(inline, inline_final) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case dom_y of mk_dim1 (iv_y : Interval) (lm : LinearMap).
  case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case ub_y of {
    justVal (y : int).
      case dom_x of mk_dim1 (iv_x : Interval) (lm : LinearMap).
      case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
      case ub_x of {
        justVal (x : int).
          boxed @(Maybe (index dim2))
          (just @(Tuple2 (Stored int) (Stored int))
                (tuple2 @(Stored int) @(Stored int)
                (stored @int y) (stored @int x)))
      ; nothingVal.
          boxed @(Maybe (index dim2))
          (nothing @(Tuple2 (Stored int) (Stored int)))
      }
  ; nothingVal.
      boxed @(Maybe (index dim2))
      (nothing @(Tuple2 (Stored int) (Stored int)))
  };


CartesianDict_dim2_stride
  (dom : dim2) -> Boxed (index dim2)
  attribute(inline) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  boxed @(index dim2)
  (tuple2 @(Stored int) @(Stored int)
   (stored @int (unboxIntValue (CartesianDict_dim1_stride dom_y)))
   (stored @int (unboxIntValue (CartesianDict_dim1_stride dom_x))));


CartesianDict_dim2_arrayDomain
  (lo : Boxed (index dim2))
  (hi : Boxed (index dim2))
  -> dim2
  attribute(inline) =
  case lo of boxed u_lo.
  case u_lo of tuple2 lo_y lo_x.
  case lo_y of stored lo_y_i.
  case lo_x of stored lo_x_i.
  case hi of boxed u_hi.
  case u_hi of tuple2 hi_y hi_x.
  case hi_y of stored hi_y_i.
  case hi_x of stored hi_x_i.
  mk_dim2 (mk_dim1 (interval (justVal @int lo_y_i) (justVal @int hi_y_i))
                   (linearMap 1 0))
          (mk_dim1 (interval (justVal @int lo_x_i) (justVal @int hi_x_i))
                   (linearMap 1 0));


CartesianDict_dim2_displaceDomain
  (dom : dim2)
  (ix : Boxed (index dim2))
  -> dim2
  attribute(inline) =
  case ix of boxed u_ix.
  case u_ix of tuple2 (ix_y : Stored int) (ix_x : Stored int).
  let b_y = boxIntValue (case ix_y of stored n. n) in
  let b_x = boxIntValue (case ix_x of stored n. n) in
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  mk_dim2 (CartesianDict_dim1_displaceDomain dom_y b_y)
          (CartesianDict_dim1_displaceDomain dom_x b_x);


CartesianDict_dim2_multiplyDomain
  (dom : dim2)
  (v : Boxed (Tuple2 (Stored int) (Stored int)))
  -> dim2
  attribute(inline) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case v of boxed u_v.
  case u_v of tuple2 (v_y : Stored int) (v_x : Stored int).
  let b_y = boxIntValue (case v_y of stored n. n) in
  let b_x = boxIntValue (case v_x of stored n. n) in
  mk_dim2 (CartesianDict_dim1_multiplyDomain dom_y b_y)
          (CartesianDict_dim1_multiplyDomain dom_x b_x);
  
  
CartesianDict_dim2_divideDomain
  (dom : dim2)
  (v : Boxed (Tuple2 (Stored int) (Stored int)))
  -> dim2
  attribute(inline) =
  case dom of mk_dim2 (dom_y : dim1) (dom_x : dim1).
  case v of boxed u_v.
  case u_v of tuple2 (v_y : Stored int) (v_x : Stored int).
  let b_y = boxIntValue (case v_y of stored n. n) in
  let b_x = boxIntValue (case v_x of stored n. n) in
  mk_dim2 (CartesianDict_dim1_divideDomain dom_y b_y)
          (CartesianDict_dim1_divideDomain dom_x b_x);


CartesianDict_dim2_multiplyIndex :
    AsBox (index dim2) -> AsBox (index dim2) -> AsBox (index dim2);

CartesianDict_dim2_divideIndex :
    AsBox (index dim2) -> AsBox (index dim2) -> AsBox (index dim2);

CartesianDict_dim2_unbounded :
    dim2;


CartesianDict_dim3_loBound
  (dom : dim3) -> Boxed (Maybe (index dim3))
  attribute(inline, inline_final) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case dom_z of mk_dim1 (iv_z : Interval) (lm : LinearMap).
  case iv_z of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).
  case lb_z of {
    justVal (z : int).
      case dom_y of mk_dim1 (iv_y : Interval) (lm : LinearMap).
      case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
      case lb_y of {
        justVal (y : int).
          case dom_x of mk_dim1 (iv_x : Interval) (lm : LinearMap).
          case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
          case lb_x of {
            justVal (x : int).
              boxed @(Maybe (index dim3))
              (just @(Tuple3 (Stored int) (Stored int) (Stored int))
                    (tuple3 @(Stored int) @(Stored int) @(Stored int)
                     (stored @int z) (stored @int y) (stored @int x)))
          ; nothingVal.
              boxed @(Maybe (index dim3))
              (nothing @(Tuple3 (Stored int) (Stored int) (Stored int)))
          }
      ; nothingVal.
          boxed @(Maybe (index dim3))
          (nothing @(Tuple3 (Stored int) (Stored int) (Stored int)))
      }
  ; nothingVal.
      boxed @(Maybe (index dim3))
      (nothing @(Tuple3 (Stored int) (Stored int) (Stored int)))
  };
  

CartesianDict_dim3_hiBound
  (dom : dim3) -> Boxed (Maybe (index dim3))
  attribute(inline, inline_final) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case dom_z of mk_dim1 (iv_z : Interval) (lm : LinearMap).
  case iv_z of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).
  case ub_z of {
    justVal (z : int).
      case dom_y of mk_dim1 (iv_y : Interval) (lm : LinearMap).
      case iv_y of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
      case ub_y of {
        justVal (y : int).
          case dom_x of mk_dim1 (iv_x : Interval) (lm : LinearMap).
          case iv_x of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
          case ub_x of {
            justVal (x : int).
              boxed @(Maybe (index dim3))
              (just @(Tuple3 (Stored int) (Stored int) (Stored int))
                    (tuple3 @(Stored int) @(Stored int) @(Stored int)
                    (stored @int z) (stored @int y) (stored @int x)))
          ; nothingVal.
              boxed @(Maybe (index dim3))
              (nothing @(Tuple3 (Stored int) (Stored int) (Stored int)))
          }
      ; nothingVal.
          boxed @(Maybe (index dim3))
          (nothing @(Tuple3 (Stored int) (Stored int) (Stored int)))
      }
  ; nothingVal.
      boxed @(Maybe (index dim3))
      (nothing @(Tuple3 (Stored int) (Stored int) (Stored int)))
  };


CartesianDict_dim3_stride
  (dom : dim3) -> AsBox (index dim3)
  attribute(inline) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  boxed @(index dim3)
  (tuple3 @(Stored int) @(Stored int) @(Stored int)
   (stored @int (unboxIntValue (CartesianDict_dim1_stride dom_z)))
   (stored @int (unboxIntValue (CartesianDict_dim1_stride dom_y)))
   (stored @int (unboxIntValue (CartesianDict_dim1_stride dom_x))));


CartesianDict_dim3_arrayDomain
  (lo : Boxed (index dim3))
  (hi : Boxed (index dim3))
  -> dim3
  attribute(inline) =
  case lo of boxed u_lo.
  case u_lo of tuple3 lo_z lo_y lo_x.
  case lo_z of stored lo_z_i.
  case lo_y of stored lo_y_i.
  case lo_x of stored lo_x_i.
  case hi of boxed u_hi.
  case u_hi of tuple3 hi_z hi_y hi_x.
  case hi_z of stored hi_z_i.
  case hi_y of stored hi_y_i.
  case hi_x of stored hi_x_i.
  mk_dim3 (mk_dim1 (interval (justVal @int lo_z_i) (justVal @int hi_z_i))
                   (linearMap 1 0))
          (mk_dim1 (interval (justVal @int lo_y_i) (justVal @int hi_y_i))
                   (linearMap 1 0))
          (mk_dim1 (interval (justVal @int lo_x_i) (justVal @int hi_x_i))
                   (linearMap 1 0));


CartesianDict_dim3_displaceDomain
  (dom : dim3)
  (ix : Boxed (index dim3))
  -> dim3
  attribute(inline) =
  case ix of boxed u_ix.
  case u_ix of tuple3 ix_z ix_y ix_x.
  let b_z = boxIntValue (case ix_z of stored n. n) in
  let b_y = boxIntValue (case ix_y of stored n. n) in
  let b_x = boxIntValue (case ix_x of stored n. n) in
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  mk_dim3 (CartesianDict_dim1_displaceDomain dom_z b_z)
          (CartesianDict_dim1_displaceDomain dom_y b_y)
          (CartesianDict_dim1_displaceDomain dom_x b_x);


CartesianDict_dim3_multiplyDomain
  (dom : dim3)
  (v : Boxed (index dim3))
  -> dim3
  attribute(inline) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case v of boxed u_v.
  case u_v of tuple3 v_z v_y v_x.
  let b_z = boxIntValue (case v_z of stored n. n) in
  let b_y = boxIntValue (case v_y of stored n. n) in
  let b_x = boxIntValue (case v_x of stored n. n) in
  mk_dim3 (CartesianDict_dim1_multiplyDomain dom_z b_z)
          (CartesianDict_dim1_multiplyDomain dom_y b_y)
          (CartesianDict_dim1_multiplyDomain dom_x b_x);
  
  
CartesianDict_dim3_divideDomain
  (dom : dim3)
  (v : Boxed (index dim3))
  -> dim3
  attribute(inline) =
  case dom of mk_dim3 (dom_z : dim1) (dom_y : dim1) (dom_x : dim1).
  case v of boxed u_v.
  case u_v of tuple3 v_z v_y v_x.
  let b_z = boxIntValue (case v_z of stored n. n) in
  let b_y = boxIntValue (case v_y of stored n. n) in
  let b_x = boxIntValue (case v_x of stored n. n) in
  mk_dim3 (CartesianDict_dim1_divideDomain dom_z b_z)
          (CartesianDict_dim1_divideDomain dom_y b_y)
          (CartesianDict_dim1_divideDomain dom_x b_x);

CartesianDict_dim3_multiplyIndex :
    AsBox (index dim3) -> AsBox (index dim3) -> AsBox (index dim3);

CartesianDict_dim3_divideIndex :
    AsBox (index dim3) -> AsBox (index dim3) -> AsBox (index dim3);

CartesianDict_dim3_unbounded :
    dim3;

-------------------------------------------------------------------------------
-- Boxing/unboxing helper functions

boxIntValue (n : int) -> Boxed (Stored int) =
  boxed @(Stored int) (stored @int n);

unboxIntValue (n : Boxed (Stored int)) -> int =
  case n of boxed (stored un). un;

boxFloatValue (n : float) -> Boxed (Stored float) =
  boxed @(Stored float) (stored @float n);

unboxFloatValue (n : Boxed (Stored float)) -> float =
  case n of boxed (stored un). un;

boxBoolValue (n : bool) -> Boxed (Stored bool) =
  boxed @(Stored bool) (stored @bool n);

unboxBoolValue (n : Boxed (Stored bool)) -> bool =
  case n of boxed (stored un). un;

boxNoneValue (n : NoneType) -> Boxed (Stored NoneType) =
  boxed @(Stored NoneType) (stored @NoneType n);

unboxNoneValue (n : Boxed (Stored NoneType)) -> NoneType =
  case n of boxed (stored un). un;

unboxRefInit @(a : box) (w : Init (Ref a)) -> a =
  case stuckBox @(Ref a) w of stuckBox (ref x). x;

-------------------------------------------------------------------------------
-- other arithmetic

eqI : int -> int -> bool;
neI : int -> int -> bool;
ltI : int -> int -> bool;
leI : int -> int -> bool;
gtI : int -> int -> bool;
geI : int -> int -> bool;

addI : int -> int -> int attribute(builtin);
subI : int -> int -> int attribute(builtin);
negI : int -> int attribute(builtin);
-- zeroI = 0;

mulI : int -> int -> int attribute(builtin);
floordivI : int -> int -> int;
modI : int -> int -> int attribute(builtin);

minI : int -> int -> int;
maxI : int -> int -> int attribute(builtin);

eqU : uint -> uint -> bool;
neU : uint -> uint -> bool;
ltU : uint -> uint -> bool;
leU : uint -> uint -> bool;
gtU : uint -> uint -> bool;
geU : uint -> uint -> bool;

addU : uint -> uint -> uint attribute(builtin);
subU : uint -> uint -> uint attribute(builtin);
negU : uint -> uint;
-- zeroU = 0;

mulU : uint -> uint -> uint;
floordivU : uint -> uint -> uint;
modU : uint -> uint -> uint attribute(builtin);

minU : uint -> uint -> uint;
maxU : uint -> uint -> uint attribute(builtin);

eqF : float -> float -> bool;
neF : float -> float -> bool;
ltF : float -> float -> bool;
leF : float -> float -> bool;
gtF : float -> float -> bool;
geF : float -> float -> bool;

addF : float -> float -> float;
subF : float -> float -> float;
negF : float -> float;
-- zeroF = 0.0;

mulF : float -> float -> float;
fromintF : int -> float;
floordivF : float -> float -> int;
modF : float -> float -> float;
divF : float -> float -> float;
powF : float -> float -> float;
expF : float -> float;
logF : float -> float;
sqrtF : float -> float;
sinF : float -> float;
cosF : float -> float;
tanF : float -> float;


uintToInt : uint -> int attribute(builtin);
intToUint : int -> uint attribute(builtin);

floor : float -> int;

oper_BITWISEAND : int -> int -> int;
oper_BITWISEOR : int -> int -> int;
oper_BITWISEXOR : int -> int -> int;

lshift : int -> int -> int;
rshift : int -> int -> int;

or : bool -> bool -> bool attribute(builtin);
and : bool -> bool -> bool attribute(builtin);
not : bool -> bool attribute(builtin);

-- An internal slice object.
-- The two integers are (in_stride, in_offset).
--
-- The slice produces a view with bounds [lo, hi).
-- Element i of the view maps to element i * in_stride + in_offset.
data InternalSlice : box
{
  internalSlice @(lo hi : intindex) (IInt lo, IInt hi, int, int);
  emptySlice ();
};

-------------------------------------------------------------------------------
-- integer index arithmetic

-- Promote an integer to a type index
defineIntIndex : int -> SomeIInt;

type pos_infty : intindex;
type plus_i : intindex -> intindex -> intindex;
type minus_i : intindex -> intindex -> intindex;
type min_i : intindex -> intindex -> intindex;
type max_i : intindex -> intindex -> intindex;

zero_fii : FIInt 0;
one_fii : FIInt 1;

-- Operations on finite indexed ints aren't inlined until near the end,
-- because they don't enable other optimizations.  By delaying inlining,
-- code doesn't expand as much.

plus_fii @(m n : intindex) (x : FIInt m) (y : FIInt n)
	 -> FIInt (plus_i m n)
	 attribute(inline, inline_final) =
  case x of fiInt (x_i : int).
  case y of fiInt (y_i : int).
  fiInt @(plus_i m n) (x_i +# y_i);


minus_fii @(m n : intindex) (x : FIInt m) (y : FIInt n)
	  -> FIInt (minus_i m n)
	  attribute(inline, inline_final) =
  case x of fiInt (x_i : int).
  case y of fiInt (y_i : int).
  fiInt @(minus_i m n) (x_i -# y_i);


min_fii @(m n : intindex) (x : FIInt m) (y : FIInt n)
	-> FIInt (min_i m n)
	attribute(inline, inline_final) =
  case x of fiInt (x_i : int).
  case y of fiInt (y_i : int).
  fiInt @(min_i m n) (minI x_i y_i);


max_fii @(m n : intindex) (x : FIInt m) (y : FIInt n)
	-> FIInt (max_i m n)
	attribute(inline, inline_final) =
  case x of fiInt (x_i : int).
  case y of fiInt (y_i : int).
  fiInt @(max_i m n) (maxI x_i y_i);


zero_ii : IInt 0 = iInt @0 (fiInt @0 0);

one_ii : IInt 1 = iInt @1 (fiInt @1 1);

plus_ii @(m n : intindex) (a : IInt m) (b : IInt n)
  -> IInt (plus_i m n) attribute(inline) =
  let type sum_t = plus_i m n in
  case a of {
    iInt (fa : FIInt m).
      case b of {
        iInt (fb : FIInt n). iInt @sum_t (plus_fii @m @n fa fb)
      ; iPosInfty. iPosInfty @sum_t
      ; iNegInfty. iNegInfty @sum_t
      }
  ; iPosInfty.
      case b of {
        iInt (fb : FIInt n). iPosInfty @sum_t
      ; iPosInfty. iPosInfty @sum_t
      ; iNegInfty. except @(IInt sum_t) -- Cannot add +inf and -inf
      }
  ; iNegInfty.
      case b of {
        iInt (fb : FIInt n). iNegInfty @sum_t
      ; iPosInfty. except @(IInt sum_t) -- Cannot add +inf and -inf
      ; iNegInfty. iNegInfty @sum_t
      }
  };


minus_ii @(m n : intindex) (a : IInt m) (b : IInt n)
  -> IInt (minus_i m n) attribute(inline) =
  let type sum_t = minus_i m n in
  case a of {
    iInt (fa : FIInt m).
      case b of {
        iInt (fb : FIInt n). iInt @sum_t (minus_fii @m @n fa fb)
      ; iPosInfty. iNegInfty @sum_t
      ; iNegInfty. iPosInfty @sum_t
      }
  ; iPosInfty.
      case b of {
        iInt (fb : FIInt n). iPosInfty @sum_t
      ; iPosInfty. except @(IInt sum_t) -- Cannot add +inf and -inf
      ; iNegInfty. iPosInfty @sum_t
      }
  ; iNegInfty.
      case b of {
        iInt (fb : FIInt n). iNegInfty @sum_t
      ; iPosInfty. iNegInfty @sum_t
      ; iNegInfty. except @(IInt sum_t) -- Cannot add +inf and -inf
      }
  };


min_ii @(m n : intindex) (a : IInt m) (b : IInt n)
  -> IInt (min_i m n) attribute(inline) =
  let type sum_t = min_i m n in
  case a of {
    iInt (fa : FIInt m).
      case b of {
        iInt (fb : FIInt n). iInt @sum_t (min_fii @m @n fa fb)
      ; iPosInfty.
          case fa of fiInt (a_i : int). iInt @sum_t (fiInt @sum_t a_i)
      ; iNegInfty. iNegInfty @sum_t
      }
  ; iPosInfty.
      case b of {
        iInt (fb : FIInt n).
	  case fb of fiInt (b_i : int). iInt @sum_t (fiInt @sum_t b_i)
      ; iPosInfty. iPosInfty @sum_t
      ; iNegInfty. iNegInfty @sum_t
      }
  ; iNegInfty.
      iNegInfty @sum_t
  };


max_ii @(m n : intindex) (a : IInt m) (b : IInt n)
  -> IInt (max_i m n) attribute(inline) =
  let type sum_t = max_i m n in
  case a of {
    iInt (fa : FIInt m).
      case b of {
        iInt (fb : FIInt n). iInt @sum_t (max_fii @m @n fa fb)
      ; iNegInfty.
          case fa of fiInt (a_i : int). iInt @sum_t (fiInt @sum_t a_i)
      ; iPosInfty. iPosInfty @sum_t
      }
  ; iNegInfty.
      case b of {
        iInt (fb : FIInt n).
	  case fb of fiInt (b_i : int). iInt @sum_t (fiInt @sum_t b_i)
      ; iPosInfty. iPosInfty @sum_t
      ; iNegInfty. iNegInfty @sum_t
      }
  ; iPosInfty.
      iPosInfty @sum_t
  };


-- Determine if there are integers that are greater than or equal to @x@,
-- but less than @y@.
-- The result is False if @x == y@.
range_nonempty_ii @(m n : intindex) (x : IInt m) (y : IInt n) -> bool
  attribute(inline) =
  case x of {
    iInt (fx : FIInt m).
      case fx of fiInt (x_i : int).
      case y of {
        iInt (fy : FIInt n).
          case fy of fiInt (y_i : int).
          x_i <# y_i
      ; iPosInfty. True
      ; iNegInfty. False
      }
  ; iNegInfty.
      case y of {
        iNegInfty. False
      ; iInt (fy : FIInt n). True
      ; iPosInfty. True
      }
  ; iPosInfty. False
  };


gcd : int -> int -> int;
extgcd_x : int -> int -> int;

-- Test whether an interval is empty.
isEmptyInterval (iv : Interval) -> bool =
  case iv of interval (l : MaybeVal int) (u : MaybeVal int).
  case l of {
    justVal (ll : int).
      case u of {
        justVal (uu : int). ll ==# uu
      ; nothingVal. False
    }
  ; nothingVal. False
  };


-- Decide whether 'i' is in the interval.
inInterval (i : int) (iv : Interval) -> bool =
  case iv of interval (l : MaybeVal int) (u : MaybeVal int).

  -- Is 'i' within the lower bound?
  if case l of {
       nothingVal. True
     ; justVal (ll : int). i >=# ll
     }
  then -- Is 'i' within the upper bound?
       case u of {
         nothingVal. True
       ; justVal (uu : int). i <# uu
       }
  else False;


-- Compute the intersection of two intervals.
intersectInterval (iv1 : Interval) (iv2 : Interval) -> Interval
  attribute(inline, inline_final) =
  case iv1 of interval (l1 : MaybeVal int) (u1 : MaybeVal int).
  case iv2 of interval (l2 : MaybeVal int) (u2 : MaybeVal int).

  -- Lower bound is the maximum of the two bounds
  let l3 : MaybeVal int =
        case l1 of {
          nothingVal.
            l2
        ; justVal (ll1 : int).
            case l2 of {
              nothingVal.
                l1
            ; justVal (ll2 : int).
                justVal @int (maxI ll1 ll2)
            }
        } in

  -- Upper bound is the minimum of the two bounds
  let u3 : MaybeVal int =
        case u1 of {
          nothingVal.
            u2
        ; justVal (uu1 : int).
            case u2 of {
              nothingVal.
                u1
            ; justVal (uu2 : int).
                justVal @int (minI uu1 uu2)
            }
        } in
  case l3 of {
    justVal (x : int).
      case u3 of {
        justVal (y : int).
          if x ># y
          then interval (justVal @int 0) (justVal @int 0) -- Empty interval
          else interval l3 u3
      ; nothingVal.
          interval l3 u3
      }
  ; nothingVal.
      interval l3 u3
  };


-- Get an interval consisting of the points {x + y | x <- i1, y <- i2}.
convolveInterval (i1 : Interval) (i2 : Interval) -> Interval
  attribute(inline, inline_final) =

  case i1 of interval (lo1 : MaybeVal int) (hi1 : MaybeVal int).
  case i2 of interval (lo2 : MaybeVal int) (hi2 : MaybeVal int).

  -- If either input is empty, the result is empty
  if or (isEmptyInterval i1) (isEmptyInterval i2)
  then interval (justVal @int 0) (justVal @int 0) else

  -- Add the lower bounds
  let lo3 : MaybeVal int =
        case lo1 of {
          justVal (ilo1 : int).
            case lo2 of {
              justVal (ilo2 : int). justVal @int (ilo1 +# ilo2)
            ; nothingVal. nothingVal @int
            }
        ; nothingVal. nothingVal @int
        } in

  -- Add the upper bounds.  Since the upper bound is exclusive,
  -- we must subtract 1 from the result.
  let hi3 : MaybeVal int =
        case hi1 of {
          justVal (ihi1 : int).
            case hi2 of {
              justVal (ihi2 : int). justVal @int (ihi1 +# ihi2 -# 1)
            ; nothingVal. nothingVal @int
            }
        ; nothingVal. nothingVal @int
        } in
  interval lo3 hi3;


-- Test whether i1 is a subset of i2.
subsetInterval (i1 : Interval) (i2 : Interval) -> bool attribute(inline) =

  case i1 of interval (lo1 : MaybeVal int) (hi1 : MaybeVal int).
  case i2 of interval (lo2 : MaybeVal int) (hi2 : MaybeVal int).

  -- An empty interval is a subset of anything
  if isEmptyInterval i1 then True else

  -- Check that each bound of i1 is inside the bound of i2
  let lower_subset : bool =
        case lo2 of {
          justVal (ilo2 : int).
            case lo1 of {
              justVal (ilo1 : int). ilo1 >=# ilo2
            ; nothingVal. False
            }
        ; nothingVal. True
        } in
  let upper_subset : bool =
        case hi2 of {
          justVal (ihi2 : int).
            case hi1 of {
              justVal (ihi1 : int). ihi1 <=# ihi2
            ; nothingVal. False
            }
        ; nothingVal. True
        } in
  and lower_subset upper_subset;


-- Decide whether 'i' is a member of the linear map's range.
inLM (i : int) (m : LinearMap) -> bool =
  case m of linearMap (s : int) (a : int). (i %# s) ==# (a %# s);
  

-- Evaluate a linear map at 'i'. 
evalLM (i : int) (m : LinearMap) -> int =
  case m of linearMap (s : int) (a : int). s *# i +# a;


-- Evaluate the inverse of a linear map at 'i'.
-- The result is undefined if 'i' is not in the range of the map.
invEvalLM (i : int) (m : LinearMap) -> int =
  case m of linearMap (s : int) (a : int). (i -# a) //# s;


-- Compute the intersection of two linear maps.
-- If the intersection is empty, 'Nothing' is returned.
intersectLM (m1 : LinearMap) (m2 : LinearMap) -> MaybeVal LinearMap
  attribute(inline, inline_final) =
  case m1 of linearMap (s1 : int) (a1 : int).
  case m2 of linearMap (s2 : int) (a2 : int).

  -- Special case handling when stride is 1
  if s1 ==# 1 then justVal @LinearMap m2 else
  if s2 ==# 1 then justVal @LinearMap m1 else

  let g : int = gcd s1 s2 in
  let align_remainder : int = (a2 -# a1) %# g in
  let align_quot : int = (a2 -# a1) //# g in

  -- Check if intersection is empty
  if align_remainder /=# 0 then nothingVal @LinearMap else

  let s1p : int = s1 //# g in
  let s2p : int = s2 //# g in
  let s3 : int = s1p *# s2 in
  let yp : int = extgcd_x s1p s2p in
  let y : int = align_quot *# yp in
  let a3 : int = (s1 *# y +# a1) %# s3 in
  justVal @LinearMap (linearMap s3 a3);


trimInterval (iv : Interval) (m : LinearMap) -> Interval
  attribute(inline, inline_final) =
  case iv of interval (l : MaybeVal int) (u : MaybeVal int).
  case m of linearMap (s : int) (a : int).

  let l2 : MaybeVal int =
        case l of {
          nothingVal. nothingVal @int
        ; justVal (n : int). justVal @int (n +# (a -# n) %# s) 
        } in
  let u2 : MaybeVal int =
        case u of {
          nothingVal. nothingVal @int
        ; justVal (n : int). justVal @int (n +# (a -# n) %# s) 
        } in
  interval l2 u2;


internalApplyListSlice (slice_obj : SliceObject) (dom : list_dim)
  -> (list_dim, LinearMap)
  attribute(inline, inline_final) =
  case slice_obj of sliceObject m_slice_lo m_slice_hi m_m_stride.
  case dom of mk_list_dim (list_size : MaybeVal int).
  let stride : int =
        case m_m_stride of {
          nothingVal. 1
        ; justVal (m_stride : MaybeVal int).
            case m_stride of {
              nothingVal. 1
            ; justVal (stride : int). stride
            }
        } in
  if stride ==# 0 then except @(list_dim, LinearMap) else
  let counting_up : bool = stride ># 0 in

  -- Get the slice's inclusive lower bound.
  -- There must be a lower bound, determined either by the slice or the
  -- list domain.
  let slice_lo : int =
        if counting_up
        then case m_slice_lo of {
               nothingVal. 0
             ; justVal (l : int). maxI 0 l
             }
        else case m_slice_lo of {
               justVal (h : int).
                 case list_size of {
                   justVal (n : int). minI h (n -# 1)
                 ; nothingVal. h
                 }
             ; nothingVal.
                 case list_size of {
                   justVal (n : int). n -# 1
                 ; nothingVal. except @int
                 }
             } in

  -- Get the slice's exclusive upper bound.
  let slice_hi : MaybeVal int =
        if counting_up
        then case m_slice_hi of {
               nothingVal.
                 list_size
             ; justVal (h : int).
                 case list_size of {
                   nothingVal. justVal @int h
                 ; justVal (n : int). justVal @int (minI h n)
                 }
             }
        else case m_slice_hi of {
               nothingVal. justVal @int -1
             ; justVal (h : int). justVal @int (maxI h -1)
             } in

  -- If the slice is nonempty, this is the map from slice member to list member
  let linear_map : LinearMap = linearMap stride slice_lo in

  -- Compute the new list size, which may be unbounded
  let size : MaybeVal int =
        case slice_hi of {
          nothingVal. nothingVal @int
        ; justVal (h : int).
            let abs_stride : int = if counting_up
                                   then stride
                                   else negI stride in

            let abs_delta : int =
                  let delta : int = h -# slice_lo in
                  if delta <# 0
                  then negI delta
                  else delta in

            justVal @int ((abs_delta +# abs_stride -# 1) //# abs_stride)
        } in
  case size of {
    justVal (n : int).
      if n <# 0
      then (mk_list_dim (justVal @int 0), linearMap 0 0)
      else (mk_list_dim size, linear_map)
  ; nothingVal. (mk_list_dim size, linear_map)
  };


sliceToDomain (slice_obj : SliceObject) -> dim1
  attribute(inline, inline_final) =
  case slice_obj of
    sliceObject (m_slice_lo : MaybeVal int)
                (m_slice_hi : MaybeVal int)
                (m_m_stride : MaybeVal (MaybeVal int)).
  let stride : int =
        case m_m_stride of {
          nothingVal. 1
        ; justVal (m_stride : MaybeVal int).
            case m_stride of {
              nothingVal. 1
            ; justVal (stride : int). stride
            }
        } in
  let alignment : int =
        case m_slice_lo of {
          nothingVal. 0
        ; justVal (n : int). n %# stride
        } in

  -- Stride must be positive
  if stride <=# 0 then except @dim1 else

  let map : LinearMap = linearMap stride alignment in
  let iv : Interval = trimInterval (interval m_slice_lo m_slice_hi) map in
  mk_dim1 iv map;


internalApplyArraySlice (slice_obj : SliceObject) (dom : dim1) -> dim1 =
  let slice_dom : dim1 = sliceToDomain slice_obj in
  ShapeDict_dim1_intersect slice_dom dom;


-------------------------------------------------------------------------------
-- Coercions

-- Construct an identity coercion.  This function is safe.
idCoercion : forall a : box. coerce @box a a;
idBareCoercion : forall a : bare. coerce @bare a a;

-- The type functions 'index' and 'cartesianDomain' are inverses where
-- they are defined.
cartesianIndexCoercion : forall sh : box.
                         coerce @box (cartesianDomain (index sh)) sh;

-- Construct a coercion.  This function is unsafe.
unsafeMakeCoercion : forall a b : box. coerce @box a b;

-- Construct a coercion.  This function is unsafe.
unsafeMakeBareCoercion : forall a b : bare. coerce @bare a b;

-- Construct a coercion.  This function is unsafe.
unsafeMakeViewCoercion : forall d : box.
                         coerce @(bare -> box) (Stream d) (view d);

-------------------------------------------------------------------------------
-- Debugging

traceInt_int : int -> int -> int;
traceInt_box : forall a : box. int -> a -> a;

-------------------------------------------------------------------------------
-- Domain functions

fun_list_dim (size : Maybe (Stored int)) -> list_dim
  attribute(inline) =
  mk_list_dim (case size of {
                 just (si : Stored int).
                   case si of stored i. justVal @int i
               ; nothing.
                   nothingVal @int
               });


fun_dim1 (lo_bound : Maybe (Stored int)) (hi_bound : Maybe (Stored int))
         (stride : int) (alignment : int) -> dim1
  attribute(inline) =

  letfun
    cvt_Maybe (x : Maybe (Stored int)) -> MaybeVal int =
      case x of {
        just (si : Stored int).
          case si of stored i. justVal @int i
      ; nothing.
          nothingVal @int
      } in

  if stride <=# 0 then except @dim1 else

  -- Create an interval from the given bounds.  If the low bound is
  -- greater than the high bound, use an empty interval.
  let iv : Interval =
        case lo_bound of {
          just (lb : Stored int).
            case lb of stored lb_i.
            case hi_bound of {
              just (ub : Stored int).
                case ub of stored ub_i.
                if lb_i ># ub_i
                then interval (justVal @int 0) (justVal @int 0)
                else interval (justVal @int lb_i) (justVal @int ub_i)
            ; nothing.
                interval (justVal @int lb_i) (nothingVal @int)
            }
        ; nothing.
          case hi_bound of {
            just (ub : Stored int).
              case ub of stored ub_i.
              interval (nothingVal @int) (justVal @int ub_i)
          ; nothing.
              interval (nothingVal @int) (nothingVal @int)
          }
        } in
  let m : LinearMap = linearMap stride (alignment %# stride) in
  mk_dim1 (trimInterval iv m) m;


make_sliceObject
  (has_lower : Boxed (Stored bool))
  (lower : Boxed (Stored int))
  (has_upper : Boxed (Stored bool))
  (upper : Boxed (Stored int))
  (has_has_stride : Boxed (Stored bool))
  (has_stride : Boxed (Stored bool))
  (stride : Boxed (Stored int))
  -> Boxed SliceObject
  attribute(inline) =

  boxed @(SliceObject)
  (sliceObject
   (if unboxBoolValue has_lower
    then justVal @int (unboxIntValue lower)
    else nothingVal @int)
   (if unboxBoolValue has_upper
    then justVal @int (unboxIntValue upper)
    else nothingVal @int)
   (if unboxBoolValue has_has_stride
    then justVal @(MaybeVal int)
         (if unboxBoolValue has_stride
          then justVal @int (unboxIntValue stride)
          else nothingVal @int)
    else nothingVal @(MaybeVal int)));


-------------------------------------------------------------------------------
-- Stream consumers

build_list_dim_list @(a : bare)
  (rep : Repr a) (vw : view list_dim (AsBox a)) (ret : OutPtr (list a))
  -> Store
  attribute(inline, inline_dimensionality) =
  case vw of mk_view (dom : list_dim) f.
  case dom of mk_list_dim (m_size : MaybeVal int).
  case m_size of {
    justVal (size : int).
      -- Finite view
      case defineIntIndex size of someIInt @(N : intindex) (sz : FIInt N).
      make_list @a @N sz
      (stuckBox @(arr N a)
       (arr1D_build @N @a rep sz
        (\ (i : int) (ret : OutPtr a) -> Store.
           asbare @a rep (f (boxIntValue i)) ret)))
      ret

  ; nothingVal.
      -- Infinte views can't be turned into lists
      except @Store
  };


build_dim1_array @(a : bare)
  (rep : Repr a)
  (vw : view dim1 (AsBox a))
  (ret : OutPtr (array1 a))
  -> Store
  attribute(inline, inline_dimensionality) =

  case vw of mk_view (dom : dim1) f.
  case dim1ToArraySize dom of arraySize @(N : intindex) lb stride size.

  let linear_map : LinearMap = linearMap stride lb in

  mk_array1 @a @N lb stride size
  (stuckBox @(arr N a)
   (arr1D_build @N @a rep size
    (\ (i : int) (ret : OutPtr a) -> Store.
        -- Compute the logical index corresponding to array index 'i'
        let logical_i : int = evalLM i linear_map in
        asbare @a rep (f (boxIntValue logical_i)) ret)))
   ret;


reduce_list_dim @(a : bare)
  (rep : Repr a)
  (f : a -> a -> Init a)
  (init : a)
  (vw : view list_dim (AsBox a))
  -> Init a
  attribute(inline, inline_dimensionality) =
  case vw of mk_view (dom : list_dim) gen.

  letfun
    gen2 (x : Stored int) (ret : OutPtr a) -> Store =
      case x of stored ux. asbare @a rep (gen (boxIntValue ux)) ret
  in

  primitive_list_dim_reduce @a rep dom gen2 f init;


reduce1_list_dim @(a : bare)
  (rep : Repr a)
  (f : a -> a -> Init a)
  (vw : view list_dim (AsBox a))
  -> Init a
  attribute(inline, inline_dimensionality) =
  case vw of mk_view (dom : list_dim) gen.

  letfun
    gen2 (x : Stored int) (ret : OutPtr a) -> Store =
      case x of stored ux. asbare @a rep (gen (boxIntValue ux)) ret
  in

  primitive_list_dim_reduce1 @a rep dom gen2 f;


reduce_dim1 : forall a : bare.
    Repr a
  -> (a -> a -> Init a)
  -> a
  -> view dim1 (AsBox a)
  -> Init a;

scatter_dim1 : forall i r : bare.
               Repr i -> Repr r -> Scatter r i -> view dim1 (AsBox i) -> Init r;

reduce1_dim1 : forall a : bare.
     Repr a
  -> (a -> a -> Init a)
  -> view dim1 (AsBox a)
  -> Init a;

scatter_list_dim @(i r : bare)
  (repr_i : Repr i)
  (repr_r : Repr r)
  (op : Scatter r i)
  (src : view list_dim (AsBox i))
  (ret : OutPtr r)
  -> Store
  attribute(inline, inline_dimensionality) =

  case src of mk_view (dom : list_dim) gen.

  letfun
    gen2 (x : Stored int) (ret : OutPtr i) -> Store =
      case x of stored ux. asbare @i repr_i (gen (boxIntValue ux)) ret
  in

  primitive_list_dim_scatter @i @r repr_i repr_r dom op gen2 ret;


permute1D_list_dim @(a : bare)
  (rep : Repr a)
  (dom : dim1)
  (vw : view list_dim (Boxed (Tuple2 (Stored int) a)))
  (ret : OutPtr (array1 a))
  -> Store
  attribute(inline, inline_dimensionality) =

  let rep_tuple : Repr (Tuple2 (Stored int) a) =
        repr_Tuple2 @(Stored int) @a repr_int rep in

  let rep_array : Repr (array1 a) = repr_array1 @a in

  -- Create an array of the given size
  case dim1ToArraySize dom of arraySize @(N : intindex) lb stride count.
  case count of fiInt (count_int : int).

  mk_array1 @a @N lb stride count
  (stuckBox @(arr N a)

   (\ (ret : OutPtr (arr N a)) -> Store.

    -- Loop over the inputs
    case vw of mk_view (input_dom : list_dim) gen.

    case input_dom of mk_list_dim (msize : MaybeVal int).
    case msize of {
      justVal (size : int).
        case defineIntIndex size of
          someIInt @(M : intindex) (count : FIInt M).

        -- For each input value
        doall @M @(arr N a) @(arr N a) count
        (\ (i : int) -> Store.

           -- Get a value
           case gen (boxIntValue i) of boxed pval.
           case pval of tuple2 s_index val.
           case s_index of stored ix.

           -- Convert to real index
           let offset_index : int = ix -# lb in
           let real_index : int = offset_index //# stride in

           -- Check bounds
           if offset_index %# stride /=# 0 then except @Store else
           if or (real_index <# 0) (real_index >=# count_int) then except @Store else

           -- Write it to the output
           copy @a rep val
           (subscript_out @N @a (reprSizeAlign @a rep) ret real_index))
    ; nothingVal.
        except @Store
    }))
  ret;


boxedPermute1D_list_dim @(a : bare)
  (rep : Repr a)
  (dom : dim1)
  (vw : view list_dim (Boxed (Tuple2 (Stored int) a)))
  (ret : OutPtr (barray1 a))
  -> Store
  attribute(inline, inline_dimensionality) =

  let type Boxed_a = StuckRef (AsBox a) in

  let rep_Ref : Repr (StuckRef (AsBox a)) = repr_StuckRef @(AsBox a) in

  let rep_tuple : Repr (Tuple2 (Stored int) a) =
        repr_Tuple2 @(Stored int) @a repr_int rep in

  -- Create an array of the given size
  case dim1ToArraySize dom of arraySize @(N : intindex) lb stride count.
  case count of fiInt (count_int : int).

  mk_barray1 @a
  (mk_array1 @Boxed_a @N lb stride count
   (stuckBox @(arr N Boxed_a)

    (\ (ret : OutPtr (arr N Boxed_a)) -> Store.

     -- Loop over the inputs
     case vw of mk_view (input_dom : list_dim) gen.

     case input_dom of mk_list_dim (msize : MaybeVal int).
     case msize of {
       justVal (size : int).
         case defineIntIndex size of
           someIInt @(M : intindex) (count : FIInt M).

         -- For each input value
         doall @M @(arr N Boxed_a) @(arr N Boxed_a) count
         (\ (i : int) -> Store.
            -- Get a value
            case gen (boxIntValue i) of boxed pval.
            case pval of tuple2 s_index val.
            case s_index of stored (ix : int).

            -- Convert to real index
            let offset_index : int = ix -# lb in
            let real_index : int = offset_index //# stride in

            -- Check bounds
            if offset_index %# stride /=# 0 then except @Store else
            if or (real_index <# 0) (real_index >=# count_int) then except @Store else

            -- Write it to the output
            stuckRef @(AsBox a)
            (asbox @a rep (copy @a rep val))
            (subscript_out @N @Boxed_a (reprSizeAlign @Boxed_a rep_Ref) ret real_index))
     ; nothingVal.
         except @Store
     })))
  ret;


fold_list_dim @(a acc : bare)
  (repr_a : Repr a)
  (repr_acc : Repr acc)
  (f : acc -> a -> Init acc)
  (init : acc)
  (vw : view list_dim (AsBox a))
  (ret : OutPtr acc)
  -> Store
  attribute(inline, inline_dimensionality) =

  case vw of mk_view (dom : list_dim) g.

  primitive_list_dim_fold @acc repr_acc dom
  (\ (ix : index list_dim) (x : acc) (ret : OutPtr acc) -> Store.
     case ix of stored u_ix.
     f x (boxToBare @a repr_a (g (boxIntValue u_ix))) ret)
  init
  ret;

fold_dim1 : forall a acc : bare.
            Repr a -> Repr acc
         -> (acc -> a -> Init acc)
         -> acc
         -> view dim1 (AsBox a)
         -> Init acc;

reduce_dim2 : forall a : bare.
     Repr a
  -> (a -> a -> Init a)
  -> a
  -> view dim2 (AsBox a)
  -> Init a;

reduce1_dim2 : forall a : bare.
     Repr a
  -> (a -> a -> Init a)
  -> view dim2 (AsBox a)
  -> Init a;

scatter_dim2 : forall i r : bare.
               Repr i -> Repr r -> Scatter r i -> view dim2 (AsBox i) -> Init r;

fold_dim2 : forall a acc : bare.
            Repr a -> Repr acc
         -> (acc -> a -> Init acc)
         -> acc
         -> view dim2 (AsBox a)
         -> Init acc;

-------------------------------------------------------------------------------
-- Stream and Traversable dictionary-like internal methods

view_generate @(sh : box) (shape_dict : ShapeDict sh)
  -> forall a : box. Repr (AsBare a) -> sh -> (AsBox (index sh) -> a) -> view sh a
  attribute(inline, inline_dimensionality) =

  \ @(a : box) (rep : Repr (AsBare a)) (dom : sh) (f : AsBox (index sh) -> a)
    -> view sh a.
    mk_view @sh @a dom f;


view_map @(sh : box) (shape_dict : ShapeDict sh)
  -> forall a b : box. Repr (AsBare a) -> Repr (AsBare b)
  -> (a -> b) -> view sh a -> view sh b
  attribute(inline, inline_dimensionality) =

  \ @(a b : box) (rep_a : Repr (AsBare a)) (rep_b : Repr (AsBare b))
    (t : a -> b) (s1 : view sh a) -> view sh b.

    case s1 of mk_view (d : sh) (f : AsBox (index sh) -> a).
    mk_view @sh @b d
    (\ (ix : AsBox (index sh)) -> b. t (f ix));


view_zipWith @(sh : box)
  (shape_dict : ShapeDict sh)
  -> forall a b c : box. Repr (AsBare a) -> Repr (AsBare b) -> Repr (AsBare c) ->
     (a -> b -> c) ->
     view sh a ->
     view sh b ->
     view sh c
  attribute(inline, inline_dimensionality) =

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten
    shape_generate shape_map shape_zipWith shape_zipWith3 shape_zipWith4
    shape_slice.

  \ @(a b c : box) (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b)) (repr_c : Repr (AsBare c))
     (t : a -> b -> c)
     (sa : view sh a)
     (sb : view sh b)
     -> view sh c.
    case sa of mk_view (dA : sh) fA.
    case sb of mk_view (dB : sh) fB.
    let dC : sh = shape_intersect dA dB in
    mk_view @sh @c dC
    (\ (ix : AsBox (index sh)) -> c. t (fA ix) (fB ix));


view_zipWith3 @(sh : box)
  (shape_dict : ShapeDict sh)
  -> forall a b c d : box. Repr (AsBare a) -> Repr (AsBare b) -> Repr (AsBare c) -> Repr (AsBare d) ->
     (a -> b -> c -> d) ->
     view sh a ->
     view sh b ->
     view sh c ->
     view sh d
  attribute(inline, inline_dimensionality) =

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten
    shape_generate shape_map shape_zipWith shape_zipWith3 shape_zipWith4
    shape_slice.

  \ @(a b c d : box) (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b)) (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d))
     (t : a -> b -> c -> d)
     (sa : view sh a)
     (sb : view sh b)
     (sc : view sh c)
     -> view sh d.
    case sa of mk_view (dA : sh) fA.
    case sb of mk_view (dB : sh) fB.
    case sc of mk_view (dC : sh) fC.
    let dD : sh = shape_intersect (shape_intersect dA dB) dC in
    mk_view @sh @d dD
    (\ (ix : AsBox (index sh)) -> d. t (fA ix) (fB ix) (fC ix));


view_zipWith4 @(sh : box)
  (shape_dict : ShapeDict sh)
  -> forall a b c d e : box. Repr (AsBare a) -> Repr (AsBare b) -> Repr (AsBare c) -> Repr (AsBare d) -> Repr (AsBare e) ->
     (a -> b -> c -> d -> e) ->
     view sh a ->
     view sh b ->
     view sh c ->
     view sh d ->
     view sh e
  attribute(inline, inline_dimensionality) =

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten
    shape_generate shape_map shape_zipWith shape_zipWith3 shape_zipWith4
    shape_slice.

  \ @(a b c d e : box)
     (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b)) (repr_c : Repr (AsBare c)) (repr_d : Repr (AsBare d)) (repr_e : Repr (AsBare e))
     (t : a -> b -> c -> d -> e)
     (sa : view sh a)
     (sb : view sh b)
     (sc : view sh c)
     (sd : view sh d)
     -> view sh e.
    case sa of mk_view (dA : sh) fA.
    case sb of mk_view (dB : sh) fB.
    case sc of mk_view (dC : sh) fC.
    case sd of mk_view (dD : sh) fD.
    let dE : sh =
          shape_intersect (shape_intersect (shape_intersect dA dB) dC) dD in
    mk_view @sh @e dE
    (\ (ix : AsBox (index sh)) -> e. t (fA ix) (fB ix) (fC ix) (fD ix));


Sequence_flatten : forall a : bare. Repr a -> Sequence (AsBox a) -> Stream dim1 (AsBox a);

Sequence_generate @(a : bare)
  (rep : Repr a) (size : list_dim) (f : index list_dim -> Init a)
  -> Sequence (AsBox a)
  attribute(inline, inline_final) =

  let type Sint = Stored int in
  let type st = Boxed (Stored int) in
  case size of mk_list_dim (m_list_size : MaybeVal int).
  case m_list_size of {
    justVal (list_size : int).
      -- Finite stream
      letfun
        next (state : st) -> StreamNext st (AsBox a) =
	  case state of boxed (state_s : Sint).
	  case state_s of stored (state_u : int).
	  if state_u <# list_size
	  then let next_value : AsBox a =
	             asbox @a rep (f state_s) in
	       let next_state : st =
	             boxed @Sint (stored @int (state_u +# 1)) in
	       streamValue @st @(AsBox a) next_state next_value
	  else streamEmpty @st @(AsBox a)
      in
      sequence @(AsBox a) @st (boxIntValue 0) next

  ; nothingVal.
      -- Infinite stream
      letfun
        next (state : st) -> StreamNext st (AsBox a) =
	  case state of boxed (state_s : Stored int).
	  case state_s of stored (state_u : int).
	  let next_value : AsBox a =
	        asbox @a rep (f state_s) in
	  let next_state : st =
	        boxed @Sint (stored @int (state_u +# 1)) in
	  streamValue @st @(AsBox a) next_state next_value
      in
      sequence @(AsBox a) @st (boxIntValue 0) next
  };


Sequence_from_llist @(a : bare) (rep : Repr a) (l : llist a)
  -> Sequence (AsBox a) attribute(inline, inline_final) =
  sequence @(AsBox a) @(llist a) l
  (\ (l : llist a) -> StreamNext (llist a) (AsBox a).
     case l of {
       cons (h : a) (t : llist a).
         streamValue @(llist a) @(AsBox a) t (asbox @a rep (copy @a rep h))
     ; nil. streamEmpty @(llist a) @(AsBox a)
     });


Sequence_map @(a b : bare) (repr_a : Repr a) (repr_b : Repr b)
          (transformer : a -> Init b) (sq : Sequence (AsBox a))
  -> Sequence (AsBox b)
  attribute(inline, inline_final) =
  case sq of
    sequence @(st : box) (state : st) (next : st -> StreamNext st (AsBox a)).

  letfun
    go (state : st) -> StreamNext st (AsBox b) =
      case next state of {
        streamValue (next_state : st) (value : AsBox a).
          let output_value : AsBox b =
                case boxed @a (asbare @a repr_a value) of boxed x.
		asbox @b repr_b (transformer x)
          in streamValue @st @(AsBox b) next_state output_value;

        streamEmpty.
          streamEmpty @st @(AsBox b)
      }
  in sequence @(AsBox b) @st state go;


Sequence_zipWith
  @(a b c : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c)
  (transformer : a -> b -> Init c)
  (sqA : Sequence (AsBox a))
  (sqB : Sequence (AsBox b))
  -> Sequence (AsBox c)
  attribute(inline, inline_final) =
  case sqA
  of sequence @(st_a : box) state_a next_a.
  case sqB
  of sequence @(st_b : box) state_b next_b.

  let type st_c = Stored (st_a, st_b) in
  
  letfun
    go (state : Boxed st_c) -> StreamNext (Boxed st_c) (AsBox c) =
      -- Unpack the state
      case state of boxed (u_state : st_c).
      case u_state of stored i_state.
      case i_state of (state_a : st_a, state_b : st_b).

      -- Get next value of stream A
      case next_a state_a of {
        streamValue (next_state_a : st_a) (value_a : AsBox a).
          
	  -- Get next value of stream B
	  case next_b state_b of {
            streamValue (next_state_b : st_b) (value_b : AsBox b).

	      -- Create output value
	      let value : AsBox c =
	            case boxed @a (asbare @a repr_a value_a) of boxed x.
	            case boxed @b (asbare @b repr_b value_b) of boxed y.
		    asbox @c repr_c (transformer x y) in
	      let next_state : Boxed st_c =
	            boxed @st_c (stored @(st_a, st_b) (next_state_a, next_state_b)) in
	      streamValue @(Boxed st_c) @(AsBox c) next_state value;

	    streamEmpty.
	      streamEmpty @(Boxed st_c) @(AsBox c)
          };

	streamEmpty.
	  streamEmpty @(Boxed st_c) @(AsBox c)
      }
  in sequence @(AsBox c) @(Boxed st_c)
       (boxed @st_c (stored @(st_a, st_b) (state_a, state_b)))
       go;


Sequence_zipWith3
  @(a b c d : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d)
  (transformer : a -> b -> c -> Init d)
  (sqA : Sequence (AsBox a))
  (sqB : Sequence (AsBox b))
  (sqC : Sequence (AsBox c))
  -> Sequence (AsBox d)
  attribute(inline, inline_final) =
  case sqA of sequence @(st_a : box) state_a next_a.
  case sqB of sequence @(st_b : box) state_b next_b.
  case sqC of sequence @(st_c : box) state_c next_c.

  let type st_d = Stored (st_a, st_b, st_c) in
  
  letfun
    go (state : Boxed st_d) -> StreamNext (Boxed st_d) (AsBox d) =
      -- Unpack the state
      case state of boxed u_state.
      case u_state of stored i_state.
      case i_state of (state_a : st_a, state_b : st_b, state_c : st_c).

      -- Get next value of stream A
      case next_a state_a of {
        streamValue (next_state_a : st_a) (value_a : AsBox a).

	  -- Get next value of stream B
	  case next_b state_b of {
            streamValue (next_state_b : st_b) (value_b : AsBox b).

              -- Get next value of stream C
              case next_c state_c of {
                streamValue (next_state_c : st_c) (value_c : AsBox c).

                  -- Create output value
                  let value : AsBox d =
                        case boxed @a (asbare @a repr_a value_a) of boxed x.
                        case boxed @b (asbare @b repr_b value_b) of boxed y.
                        case boxed @c (asbare @c repr_c value_c) of boxed z.
                        asbox @d repr_d (transformer x y z) in
                  let next_state : Boxed st_d =
                        boxed @st_d (stored @(st_a, st_b, st_c) (next_state_a, next_state_b, next_state_c)) in
                  streamValue @(Boxed st_d) @(AsBox d) next_state value;

                  streamEmpty.
                    streamEmpty @(Boxed st_d) @(AsBox d)
                };

              streamEmpty.
                streamEmpty @(Boxed st_d) @(AsBox d)
            };

        streamEmpty.
          streamEmpty @(Boxed st_d) @(AsBox d)
      }
  in sequence @(AsBox d) @(Boxed st_d)
       (boxed @st_d (stored @(st_a, st_b, st_c) (state_a, state_b, state_c)))
       go;


Sequence_zipWith4
  @(a b c d e : bare)
  (repr_a : Repr a) (repr_b : Repr b) (repr_c : Repr c) (repr_d : Repr d) (repr_e : Repr e)
  (transformer : a -> b -> c -> d -> Init e)
  (sqA : Sequence (AsBox a))
  (sqB : Sequence (AsBox b))
  (sqC : Sequence (AsBox c))
  (sqD : Sequence (AsBox d))
  -> Sequence (AsBox e)
  attribute(inline, inline_final) =
  case sqA of sequence @(st_a : box) state_a next_a.
  case sqB of sequence @(st_b : box) state_b next_b.
  case sqC of sequence @(st_c : box) state_c next_c.
  case sqD of sequence @(st_d : box) state_d next_d.

  let type st_e = Stored (st_a, st_b, st_c, st_d) in
  
  letfun
    go (state : Boxed st_e) -> StreamNext (Boxed st_e) (AsBox e) =
      -- Unpack the state
      case state of boxed u_state.
      case u_state of stored i_state.
      case i_state of (state_a : st_a, state_b : st_b, state_c : st_c, state_d : st_d).

      -- Get next value of stream A
      case next_a state_a of {
        streamValue (next_state_a : st_a) (value_a : AsBox a).

	  -- Get next value of stream B
	  case next_b state_b of {
            streamValue (next_state_b : st_b) (value_b : AsBox b).

              -- Get next value of stream C
              case next_c state_c of {
                streamValue (next_state_c : st_c) (value_c : AsBox c).

                  -- Get next value of stream D
                  case next_d state_d of {
                    streamValue (next_state_d : st_d) (value_d : AsBox d).

                      -- Create output value
                      let value : AsBox e =
                            case boxed @a (asbare @a repr_a value_a) of boxed x.
                            case boxed @b (asbare @b repr_b value_b) of boxed y.
                            case boxed @c (asbare @c repr_c value_c) of boxed z.
                            case boxed @d (asbare @d repr_d value_d) of boxed w.
                            asbox @e repr_e (transformer x y z w) in
                      let next_state : Boxed st_e =
                            boxed @st_e (stored @(st_a, st_b, st_c, st_d) (next_state_a, next_state_b, next_state_c, next_state_d)) in
                      streamValue @(Boxed st_e) @(AsBox e) next_state value;

                      streamEmpty.
                        streamEmpty @(Boxed st_e) @(AsBox e)
                    };

                  streamEmpty.
                    streamEmpty @(Boxed st_e) @(AsBox e)
                };

              streamEmpty.
                streamEmpty @(Boxed st_e) @(AsBox e)
            };

        streamEmpty.
          streamEmpty @(Boxed st_e) @(AsBox e)
      }
  in sequence @(AsBox e) @(Boxed st_e)
       (boxed @st_e (stored @(st_a, st_b, st_c, st_d) (state_a, state_b, state_c, state_d)))
       go;

-------------------------------------------------------------------------------
-- Sequence operations

--view1_fold : forall a acc : bare.
--          -> Repr a -> Repr acc
--          -> (acc -> a -> Init acc) -> acc -> view list_dim a
--          -> Init acc;

Sequence_reduce @(a : bare)
  (rep : Repr a)
  (f : a -> a -> Init a)
  (init : a)
  (sq : Sequence (AsBox a))
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_final) =
  Sequence_fold @a @a rep rep f init sq ret;


Sequence_reduce1 @(a : bare)
  (rep : Repr a)
  (f : a -> a -> Init a)
  (sq : Sequence (AsBox a))
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_final) =
  -- Use the stream's first element as the initial value
  case sq of sequence @(st : box) state next.

  case next state of {
    streamValue (next_state : st) (init : AsBox a).
      case boxed @a (asbare @a rep init) of boxed u_init.
      let new_sequence = sequence @(AsBox a) @st next_state next in
      Sequence_fold @a @a rep rep f u_init new_sequence ret;

    streamEmpty.
      except @Store
  };


Sequence_scatter @(i r : bare)
  (repr_i : Repr i)
  (repr_r : Repr r)
  (op : Scatter r i)
  (src : Sequence (AsBox i))
  (ret : OutPtr r)
  -> Store
  attribute(inline, inline_sequential) =

  case op of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s r)
    (make_updater : i -> updF)
    (make_init : iniF).

  finish_scatter @r @s repr_r repr_s finalizer
  (Sequence_partial_scatter @i @s @iniF @updF
   repr_i repr_s initializer updater make_updater make_init src)
  ret;


Sequence_permute1D @(a : bare)
  (rep : Repr a)
  (dom : dim1)
  (s : Sequence (AsBox (Tuple2 (Stored int) a)))
  (ret : OutPtr (array1 a))
  -> Store
  attribute(inline, inline_final) =

  let rep_tuple : Repr (Tuple2 (Stored int) a) =
        repr_Tuple2 @(Stored int) @a repr_int rep in

  let rep_array : Repr (array1 a) = repr_array1 @a in

  let type SEffTok = Stored EffTok in

  -- Create an array of the given size
  case dim1ToArraySize dom of arraySize @(N : intindex) lb stride size.
  case size of fiInt (size_int : int).

  mk_array1 @a @N lb stride size
  (stuckBox @(arr N a)

   (\ (ret : OutPtr (arr N a)) -> Store.

    -- Loop over the inputs
    case boxed @SEffTok (stored @EffTok emptyEffTok) of boxed eff_tok_in.

    case boxed @SEffTok
         (Sequence_fold @(Tuple2 (Stored int) a) @SEffTok
          rep_tuple repr_EffTok
          (\ (acc : SEffTok) (x : Tuple2 (Stored int) a)
             (eff_ret : OutPtr SEffTok)
             -> Store.

             case x of tuple2 (s_index : Stored int) (val : a).
             case s_index of stored ix.

             -- Convert to real index
             let offset_index : int = ix -# lb in
             let real_index : int = offset_index //# stride in

             -- Check bounds
             if offset_index %# stride /=# 0 then except @Store else
             if or (real_index <# 0) (real_index >=# size_int) then except @Store else

             -- Store it
             case acc of stored (u_acc : EffTok).
             let new_acc : EffTok =
                   seqEffTok u_acc
                   (toEffTok @a
                    (copy @a rep val
                     (subscript_out @N @a (reprSizeAlign @a rep) ret real_index))) in
             stored @EffTok new_acc eff_ret)
          eff_tok_in s) of
      boxed eff_tok_out.

    case eff_tok_out of stored tok.
    fromEffTok @(arr N a) tok))
  ret;


Sequence_boxedPermute1D @(a : bare)
  (rep : Repr a)
  (dom : dim1)
  (s : Sequence (AsBox (Tuple2 (Stored int) a)))
  (ret : OutPtr (barray1 a))
  -> Store
  attribute(inline, inline_final) =

  let type Boxed_a = StuckRef (AsBox a) in

  let rep_Ref : Repr Boxed_a = repr_StuckRef @(AsBox a) in

  let rep_tuple : Repr (Tuple2 (Stored int) a) =
        repr_Tuple2 @(Stored int) @a repr_int rep in

  let type SEffTok = Stored EffTok in

  -- Create an array of the given size
  case dim1ToArraySize dom of arraySize @(N : intindex) lb stride size.
  case size of fiInt (size_int : int).

  mk_barray1 @a
  (mk_array1 @Boxed_a @N lb stride size
   (stuckBox @(arr N Boxed_a)

    (\ (ret : OutPtr (arr N Boxed_a)) -> Store.

     -- Loop over the inputs
     case boxed @SEffTok (stored @EffTok emptyEffTok) of boxed eff_tok_in.

     case boxed @SEffTok
          (Sequence_fold @(Tuple2 (Stored int) a) @SEffTok
           rep_tuple repr_EffTok
           (\ (acc : SEffTok) (x : Tuple2 (Stored int) a)
              (eff_ret : OutPtr SEffTok)
              -> Store.

              case x of tuple2 (s_index : Stored int) (val : a).
              case s_index of stored ix.

              -- Convert to real index
              let offset_index : int = ix -# lb in
              let real_index : int = offset_index //# stride in

              -- Check bounds
              if offset_index %# stride /=# 0 then except @Store else
              if or (real_index <# 0) (real_index >=# size_int) then except @Store else

              -- Store it
              case acc of stored (u_acc : EffTok).
              let new_acc : EffTok =
                    seqEffTok u_acc
                    (toEffTok @Boxed_a
                     (stuckRef @(AsBox a)
                      (asbox @a rep (copy @a rep val))
                      (subscript_out @N @Boxed_a (reprSizeAlign @Boxed_a rep_Ref) ret real_index))) in
              stored @EffTok new_acc eff_ret)
           eff_tok_in s) of
       boxed eff_tok_out.

     case eff_tok_out of stored tok.
     fromEffTok @(arr N Boxed_a) tok)))
  ret;


Sequence_fold @(a acc : bare)
  (repr_a : Repr a)
  (repr_acc : Repr acc)
  (f : acc -> a -> Init acc)
  (init : acc)
  (src : Sequence (AsBox a))
  (ret : OutPtr acc)
  -> Store
  attribute(inline, inline_final) =
  case src of
    sequence @(st : box) state next.

  letfun
    go (state : st) (accumulator : AsBox acc) (ret : OutPtr acc)
      -> Store =
      case next state of {

        -- Obtain value from stream
        streamValue (next_state : st) (result : AsBox a).
          -- Compute the new value
          let new_accumulator : AsBox acc =
                case boxed @a (asbare @a repr_a result) of boxed y.
                case boxed @acc (asbare @acc repr_acc accumulator) of boxed x.
                asbox @acc repr_acc (f x y)

          in go next_state new_accumulator ret;

	-- Stream is depleted
	streamEmpty.
	  asbare @acc repr_acc accumulator ret
      }
  in go state (asbox @acc repr_acc (copy @acc repr_acc init)) ret;


Sequence_parallel_reduce @(a : bare)
  (rep : Repr a)
  (dom : list_dim)
  (f : a -> a -> Init a)
  (init : a)
  (g : Stored int -> Sequence (AsBox a))
  (ret : OutPtr a)
  -> Store =
  case dom of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal (size : int).
      -- Create combiner and reducer functions using 'f' and 'g'
      let type b = AsBox a in
      letfun
        combiner (x : b) (y : b) -> b =
          case boxed @a (asbare @a rep x) of boxed bx.
          case boxed @a (asbare @a rep y) of boxed by.
          asbox @a rep (f bx by)
      in
      letfun
        reducer @(range_N : intindex)
          (lb : int) (count : FIInt range_N) (acc_in : b) -> b =

          -- Reduce over the sequence [lb, lb + count)
          case boxed @a (asbare @a rep acc_in) of boxed acc.
          case count of fiInt (count_i : int).
          asbox @a rep
          (Sequence_reduce @a rep f acc
           (Sequence_generate_bind @a (mk_list_dim (justVal @int count_i))
            (\ (si : Boxed (Stored int)) -> Sequence (AsBox a).
               -- Add 'lb' to the index
               let i = unboxIntValue si in
               case boxed @(Stored int) (stored @int (lb +# i)) of
                 boxed real_si.
               g real_si)))
      in
      case defineIntIndex size of someIInt @(N : intindex) (count : FIInt N).
      let boxed_init : b = asbox @a rep (copy @a rep init) in
      asbare @a rep
      (blocked_1d_reduce @N @b count combiner boxed_init reducer)
      ret

  ; nothingVal.
      except @Store
  };


Sequence_parallel_build @(a : bare)
  (rep : Repr a) (dom : list_dim) (f : Stored int -> Sequence (AsBox a))
  (ret : OutPtr (list a))
  -> Store
  attribute(inline) =

  let reduced_tree : PBTree a = PBTree_parallel_build @a rep dom f in

  PBTree_flatten @a rep reduced_tree ret;


-- Run a blocked parallel computation over a sequence.
-- Collect the results into a tree, where each tree leaf is the result of one
-- parallel step.
PBTree_parallel_build @(a : bare)
  (rep : Repr a) (dom : list_dim)
  (f : Stored int -> Sequence (AsBox a))
  -> PBTree a
  attribute(inline) =

  case dom of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal (size : int).
      letfun
        -- Sequentially build a list from a subset of the original range.
        -- Put the list in a tree leaf.
        rangeProc @(M : intindex)
          (start : int) (count : FIInt M) (init : PBTree a) -> PBTree a =
          case count of fiInt (count_new : int).
          let count_i : int = count_new in
          let outLeaf : PBTree a =
                pbLeaf @a
                (Sequence_list_build @a rep
                 (Sequence_generate_bind @a (mk_list_dim (justVal @int count_i))
                  (\ (si : Boxed (Stored int)) -> Sequence (AsBox a).
                     -- Add 'start' to the index
                     let i = unboxIntValue si in
                     case boxed @(Stored int) (stored @int (start +# i)) of
                     boxed real_si.
                     f real_si))) in
          PBTree_branch @a outLeaf init in

      case defineIntIndex size of
        someIInt @(n : intindex) (range_count : FIInt n).

      -- Create lists in parallel and build a tree out of them
      blocked_1d_reduce @n @(PBTree a)
      range_count (PBTree_branch @a) (pbEmpty @a) rangeProc

  ; nothingVal.
      except @(PBTree a)
  };


Sequence_parallel_scatter @(i r : bare)
  (rep_i : Repr i) (rep_r : Repr r)
  (dom : list_dim)
  (scatter : Scatter r i)
  (f : Stored int -> Sequence (AsBox i))
  (ret : OutPtr r)
  -> Store
  attribute(inline) =

  case scatter of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (rep_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s r)
    (update_func : i -> updF)
    (init_func : iniF).

  let type bs = StuckBox s in

  letfun
    -- Version of 'combiner' for boxed objects
    boxed_combiner (x : bs) (y : bs) -> bs =
      case x of stuckBox ux.
      case y of stuckBox uy.
      stuckBox @s (combiner ux uy)
  in

  case dom of mk_list_dim (maybe_size : MaybeVal int).

  case maybe_size of {
    justVal (count : int).
      case defineIntIndex count of someIInt @(N : intindex) (size : FIInt N).

      -- Perform a parallel reduction over this range
      case blocked_1d_reduceip @N @bs size
           boxed_combiner
           (\ @(M : intindex) (start : int) (range_size : FIInt M) -> bs.
              -- Sequential reduction over this sub-range
              case range_size of fiInt (range_count : int).
              let subdom : list_dim = mk_list_dim (justVal @int range_count) in
                    
              stuckBox @s
              (Sequence_partial_scatter @i @s @iniF @updF rep_i rep_s
               initializer updater update_func init_func
               (Sequence_generate_bind @i subdom
                (\ (sindex : Boxed (Stored int)) -> Sequence (AsBox i).
                   -- Add 'start' to the index
                   let uindex = unboxIntValue sindex in
                   case stuckBox @(Stored int)
                        (stored @int (uindex +# start)) of
                     stuckBox sindex2.
                     f sindex2)))) of
        stuckBox (final_state : s).

      -- Create the final object
      finish_scatter @r @s rep_r rep_s finalizer
      (copy @s rep_s final_state) ret

  ; nothingVal.
      except @Store
  };

-------------------------------------------------------------------------------
-- High-level stream and container functions

fun_map @(t : box -> box)
        @(a b : box)
        (traversable : TraversableDict t)
        (shape_dict : ShapeDict (shape t))
        (repr_a : Repr (AsBare a))
        (repr_b : Repr (AsBare b))
        (transformer : a -> b)
        (container : t a)
        -> t b
 	attribute(inline) =
  let type sh = shape t in

  case traversable of traversableDict traverse build.

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  build @b repr_b
  (shape_map @a @b repr_a repr_b transformer
   (traverse @a repr_a container));


fun_filter @(t : box -> box) @(a : box)
     (traversable : TraversableDict t)
     (is_list : coerce @box (shape t) list_dim)
     (rep : Repr (AsBare a))
     (predicate : a -> Boxed (Stored bool))
     (input : t a)
     -> t a
     attribute(inline) =
  case traversable of traversableDict traverse build.

  -- Traverse the input
  let input_stream : Stream1 a =
        coerce @(Stream (shape t) a) @(Stream1 a)
        (traverse @a rep input) in

  -- Guard.  For each stream element,
  -- return the element if predicate evaluates to true.
  -- Otherwise, return nothing.
  let s : Stream1 a =
        Stream1_bind @a @a rep rep input_stream
        (\ (x : a) -> Stream1 a.
           if unboxBoolValue (predicate x)
           then sequenceStream @a (Sequence_return @(AsBare a) rep (asbare @(AsBare a) rep x))
           else sequenceStream @a (Sequence_empty @(AsBare a) rep)) in

  -- Build the return value
  build @a rep (coerce @(Stream1 a) @(Stream (shape t) a) s);


fun_zip @(t1 t2 : box -> box) @(a b : box)
        (traversable1 : TraversableDict t1)
        (traversable2 : TraversableDict t2)
        (equal12 : coerce @box (shape t1) (shape t2))
	(shape_dict : ShapeDict (shape t1))
        (reprA : Repr (AsBare a)) (reprB : Repr (AsBare b))
        (inputA : t1 a) (inputB : t2 b)
  -> Stream (shape t1) (Boxed (Tuple2 (AsBare a) (AsBare b)))
  attribute(inline) =
  case traversable1 of traversableDict traverse1 build1.
  case traversable2 of traversableDict traverse2 build2.
  let stream1 = traverse1 @a reprA inputA in
  let stream2 =
        coerce @(Stream (shape t2) b) @(Stream (shape t1) b)
	(traverse2 @b reprB inputB) in

  let type sh = shape t1 in
  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  letfun
    transformer (x : a) (y : b) -> Boxed (Tuple2 (AsBare a) (AsBare b)) =
      boxed @(Tuple2 (AsBare a) (AsBare b))
      (tuple2 @(AsBare a) @(AsBare b) (asbare @(AsBare a) reprA x) (asbare @(AsBare b) reprB y))
  in

  shape_zipWith @a @b @(Boxed (Tuple2 (AsBare a) (AsBare b)))
  reprA reprB (repr_Tuple2 @(AsBare a) @(AsBare b) reprA reprB)
  transformer stream1 stream2;

fun_zip3 @(t1 t2 t3 : box -> box) @(a b c : box)
        (traversable1 : TraversableDict t1)
        (traversable2 : TraversableDict t2)
        (traversable3 : TraversableDict t3)
        (equal12 : coerce @box (shape t1) (shape t2))
        (equal23 : coerce @box (shape t2) (shape t3))
	(shape_dict : ShapeDict (shape t1))
        (reprA : Repr (AsBare a)) (reprB : Repr (AsBare b)) (reprC : Repr (AsBare c))
        (inputA : t1 a) (inputB : t2 b) (inputC : t3 c)
  -> Stream (shape t1) (Boxed (Tuple3 (AsBare a) (AsBare b) (AsBare c)))
  attribute(inline) =
  case traversable1 of traversableDict traverse1 build1.
  case traversable2 of traversableDict traverse2 build2.
  case traversable3 of traversableDict traverse3 build3.
  let stream1 : Stream (shape t1) a = traverse1 @a reprA inputA in
  let stream2 : Stream (shape t1) b =
        coerce @(Stream (shape t2) b) @(Stream (shape t1) b)
	(traverse2 @b reprB inputB) in
  let stream3 : Stream (shape t1) c =
        coerce @(Stream (shape t3) c) @(Stream (shape t1) c)
	(traverse3 @c reprC inputC) in

  let type sh = shape t1 in
  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  letfun
    transformer (x : a) (y : b) (z : c)
      -> Boxed (Tuple3 (AsBare a) (AsBare b) (AsBare c)) =
      boxed @(Tuple3 (AsBare a) (AsBare b) (AsBare c))
      (tuple3 @(AsBare a) @(AsBare b) @(AsBare c)
       (asbare @(AsBare a) reprA x) (asbare @(AsBare b) reprB y) (asbare @(AsBare c) reprC z))
  in

  shape_zipWith3 @a @b @c @(Boxed (Tuple3 (AsBare a) (AsBare b) (AsBare c)))
  reprA reprB reprC (repr_Tuple3 @(AsBare a) @(AsBare b) @(AsBare c) reprA reprB reprC)
  transformer stream1 stream2 stream3;


fun_zip4 @(t1 t2 t3 t4 : box -> box) @(a b c d : box)
        (traversable1 : TraversableDict t1)
        (traversable2 : TraversableDict t2)
        (traversable3 : TraversableDict t3)
        (traversable4 : TraversableDict t4)
        (equal12 : coerce @box (shape t1) (shape t2))
        (equal23 : coerce @box (shape t2) (shape t3))
        (equal34 : coerce @box (shape t3) (shape t4))
	(shape_dict : ShapeDict (shape t1))
        (reprA : Repr (AsBare a)) (reprB : Repr (AsBare b)) (reprC : Repr (AsBare c)) (reprD : Repr (AsBare d))
        (inputA : t1 a) (inputB : t2 b) (inputC : t3 c) (inputD : t4 d)
  -> Stream (shape t1) (Boxed (Tuple4 (AsBare a) (AsBare b) (AsBare c) (AsBare d)))
  attribute(inline) =

  case traversable1 of traversableDict traverse1 build1.
  case traversable2 of traversableDict traverse2 build2.
  case traversable3 of traversableDict traverse3 build3.
  case traversable4 of traversableDict traverse4 build4.
  let stream1 : Stream (shape t1) a = traverse1 @a reprA inputA in
  let stream2 : Stream (shape t1) b =
        coerce @(Stream (shape t2) b) @(Stream (shape t1) b)
	(traverse2 @b reprB inputB) in
  let stream3 : Stream (shape t1) c =
        coerce @(Stream (shape t3) c) @(Stream (shape t1) c)
	(traverse3 @c reprC inputC) in
  let stream4 : Stream (shape t1) d =
        coerce @(Stream (shape t4) d) @(Stream (shape t1) d)
	(traverse4 @d reprD inputD) in

  let type sh = shape t1 in
  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  letfun
    transformer (x : a) (y : b) (z : c) (w : d)
      -> Boxed (Tuple4 (AsBare a) (AsBare b) (AsBare c) (AsBare d)) =
      boxed @(Tuple4 (AsBare a) (AsBare b) (AsBare c) (AsBare d))
      (tuple4 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d)
       (asbare @(AsBare a) reprA x) (asbare @(AsBare b) reprB y)
       (asbare @(AsBare c) reprC z) (asbare @(AsBare d) reprD w))
  in

  shape_zipWith4 @a @b @c @d @(Boxed (Tuple4 (AsBare a) (AsBare b) (AsBare c) (AsBare d)))
  reprA reprB reprC reprD
  (repr_Tuple4 @(AsBare a) @(AsBare b) @(AsBare c) @(AsBare d) reprA reprB reprC reprD)
  transformer stream1 stream2 stream3 stream4;


fun_reduce @(t : box -> box) @(a : box)
  (traversable : TraversableDict t)
  (shape_dict : ShapeDict (shape t))
  (rep : Repr (AsBare a))
  (reducer : a -> a -> a)
  (init : a)
  (input : t a)
  -> a
  attribute(inline, inline_dimensionality) =
  let type sh = shape t in

  case traversable of traversableDict traverse build.

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  letfun
    bare_f (x : AsBare a) (y : AsBare a) (ret : OutPtr (AsBare a)) -> Store =
      asbare @(AsBare a) rep
      (reducer (bareToBox @(AsBare a) rep x) (bareToBox @(AsBare a) rep y)) ret
  in

  case stuckBox @(AsBare a) (asbare @(AsBare a) rep init) of stuckBox b_init.

  let s : Stream1 a = shape_flatten @a rep (traverse @a rep input) in
  case s of {
    viewStream vw.
      asbox @(AsBare a) rep
      (reduce_list_dim @(AsBare a) rep bare_f b_init vw)
  ; sequenceStream sq.
      asbox @(AsBare a) rep
      (Sequence_reduce @(AsBare a) rep bare_f b_init sq)
  };


fun_reduce1 @(t : box -> box) @(a : box)
  (traversable : TraversableDict t)
  (shape_dict : ShapeDict (shape t))
  (rep : Repr (AsBare a))
  (reducer : a -> a -> a)
  (input : t a)
  -> a
  attribute(inline, inline_dimensionality) =
  let type sh = shape t in

  case traversable of traversableDict traverse build.

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  letfun
    bare_f (x : AsBare a) (y : AsBare a) (ret : OutPtr (AsBare a)) -> Store =
      asbare @(AsBare a) rep
      (reducer (bareToBox @(AsBare a) rep x) (bareToBox @(AsBare a) rep y)) ret
  in

  let s : Stream1 a = shape_flatten @a rep (traverse @a rep input) in
  case s of {
    viewStream (vw : view list_dim a).
      asbox @(AsBare a) rep
      (reduce1_list_dim @(AsBare a) rep bare_f vw)
  ; sequenceStream (sq : Sequence a).
      asbox @(AsBare a) rep
      (Sequence_reduce1 @(AsBare a) rep bare_f sq)
  };


fun_sum @(t : box -> box) @(a : box)
  (traversable : TraversableDict t)
  (shp : ShapeDict (shape t))
  (rep : Repr (AsBare a))
  (additive : AdditiveDict a)
  (src : t a)
  -> a
  attribute(inline) =

  case additive of additiveDict add sub negate zero.
  fun_reduce @t @a traversable shp rep add zero src;


fun_indices @(sh : box) (shape_dict : ShapeDict sh) (shp : sh)
  -> Stream sh (AsBox (index sh))
  attribute(inline) =

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  shape_generate @(AsBox (index sh)) index_repr shp (\ (x : AsBox (index sh)) -> AsBox (index sh). x);


displaceView @(t : box -> box) @(a : box)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (cartesian : CartesianDict (shape t))
  (additive : AdditiveDict (AsBox (index (shape t))))
  (rep : Repr (AsBare a))
  (c : t a)
  (disp : AsBox (index (shape t)))
  -> view (shape t) a
  attribute(inline) =

  let type sh = shape t in
  let type ix = index (shape t) in
  case cartesian of cartesianDict has_shape loBound hiBound get_stride
    arrayDomain displaceDomain multiplyDomain divideDomain
    multiplyIndex divideIndex unbounded.

  case indexable of indexableDict at_index get_shape.

  case additive of additiveDict add sub negate zero.

  -- Note that we transform from new index to old index by subtracting the
  -- displacement 
  view_generate @sh shape_dict @a rep (displaceDomain (get_shape @a c) disp)
  (\ (i : AsBox ix) -> a. at_index @a rep c (sub i disp));


multiplyView @(t : box -> box) @(a : box)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (cartesian : CartesianDict (shape t))
  (additive : AdditiveDict (AsBox (index (shape t))))
  (rep : Repr (AsBare a))
  (c : t a)
  (scale : AsBox (index (shape t)))
  -> view (shape t) a
  attribute(inline) =

  let type sh = shape t in
  let type ix = index (shape t) in

  case cartesian of cartesianDict has_shape loBound hiBound get_stride
    arrayDomain displaceDomain multiplyDomain divideDomain
    multiplyIndex divideIndex unbounded.

  case indexable of indexableDict at_index get_shape.

  -- Note that we transform from new index to old index by dividing the
  -- scale factor 
  view_generate @sh shape_dict @a rep (multiplyDomain (get_shape @a c) scale)
  (\ (i : AsBox ix) -> a. at_index @a rep c (divideIndex i scale));


divideView @(t : box -> box) @(a : box)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (cartesian : CartesianDict (shape t))
  (additive : AdditiveDict (AsBox (index (shape t))))
  (rep : Repr (AsBare a))
  (c : t a)
  (scale : AsBox (index (shape t)))
  -> view (shape t) a
  attribute(inline) =

  let type sh = shape t in
  let type ix = index (shape t) in

  case cartesian of cartesianDict has_shape loBound hiBound get_stride
    arrayDomain displaceDomain multiplyDomain divideDomain
    multiplyIndex divideIndex unbounded.

  case indexable of indexableDict at_index get_shape.

  -- Note that we transform from new index to old index by multiplying the
  -- scale factor.
  -- 'divideDomain' will throw an error if the scale factor is invalid.
  view_generate @sh shape_dict @a rep (divideDomain (get_shape @a c) scale)
  (\ (i : AsBox ix) -> a. at_index @a rep c (multiplyIndex i scale));


-------------------------------------------------------------------------------
-- Domain loops (sequential)

primitive_list_dim_chain @(a : bare) (rep : Repr a)
  (v1 : view list_dim (AsBox a))
  (v2 : view list_dim (AsBox a))
  -> view list_dim (AsBox a)
  attribute(inline, inline_final) =
  case v1 of mk_view (dom1 : list_dim) f1.
  case v2 of mk_view (dom2 : list_dim) f2.

  case dom1 of mk_list_dim (size1 : MaybeVal int).
  case dom2 of mk_list_dim (size2 : MaybeVal int).
  case size1 of {
    justVal (sz : int).
      let dom : list_dim =
            mk_list_dim (case size2 of {
                           justVal (sz2 : int). justVal @int (sz +# sz2)
                         ; nothingVal. nothingVal @int}) in
      mk_view @list_dim @(AsBox a) dom
      (\ (ix : Boxed (Stored int)) -> AsBox a.
         -- Get a value from the first or the second view
         let i = unboxIntValue ix in
         if i <# sz
         then f1 ix
         else f2 (boxIntValue (i -# sz)))

  ; nothingVal.
      -- The first domain is infinite, so the second is unreachable
      mk_view @list_dim @(AsBox a) dom1 f1
  };


primitive_list_dim_reduce @(a : bare)
  (rep : Repr a)
  (dom : list_dim)
  (generator : Stored int -> Init a)
  (reducer : a -> a -> Init a)
  (init : a)
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_final) =
  case dom of mk_list_dim (m_size : MaybeVal int).
  case m_size of {
    justVal (size : int).
      case defineIntIndex size of someIInt @(N : intindex) (sz : FIInt N).

      for @N @a rep sz init
      (\ (i : int) (x : a) (loop_ret : OutPtr a) -> Store.
         case boxed @(Stored int) (stored @int i) of
           boxed (s_i : Stored int).
         case boxed @a (generator s_i) of boxed y.
         reducer x y loop_ret)
      ret

  ; nothingVal.
      -- Can't evaluate on an infinite domain
      except @Store
  };


primitive_list_dim_reduce1 @(a : bare)
  (rep : Repr a)
  (dom : list_dim)
  (generator : Stored int -> Init a)
  (reducer : a -> a -> Init a)
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_final) =
  case dom of mk_list_dim (m_size : MaybeVal int).
  case m_size of {
    justVal (size : int).
      -- Can't reduce on empty range
      if size ==# 0 then except @Store else

      -- Evaluate at index 0 to get initial value
      case boxed @(Stored int) (stored @int 0) of boxed s_zero.
      case boxed @a (generator s_zero) of boxed init.

      -- Reduce remaining values
      case defineIntIndex (size -# 1) of
        someIInt @(N : intindex) (sz : FIInt N).

      for @N @a rep sz init
      (\ (i : int) (x : a) (loop_ret : OutPtr a) -> Store.
         case boxed @(Stored int) (stored @int (i +# 1)) of boxed s_i.
         case boxed @a (generator s_i) of boxed y.
         reducer x y loop_ret)
      ret

  ; nothingVal.
      -- Can't evaluate on an infinite domain
      except @Store
  };


primitive_list_dim_scatter @(i r : bare)
  (repr_i : Repr i)
  (repr_r : Repr r)
  (dom : list_dim)
  (op : Scatter r i)
  (src : Stored int -> Init i)
  (ret : OutPtr r)
  -> Store
  attribute(inline, inline_sequential) =

  case op of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (repr_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s r)
    (make_updater : i -> updF)
    (make_init : iniF).

  finish_scatter @r @s repr_r repr_s finalizer
  (partial_list_dim_scatter @i @s @iniF @updF repr_i repr_s
   initializer updater make_updater make_init dom src)
  ret;


primitive_list_dim_fold @(acc : bare)
  (rep : Repr acc)
  (d : list_dim)
  (f : index list_dim -> acc -> Init acc)
  (init : acc)
  (ret : OutPtr acc)
  -> Store
  attribute(inline) =

  case d of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal (size : int).
      case defineIntIndex size of someIInt @(N : intindex) (count : FIInt N).
      
      for @N @acc rep count init
      (\ (i : int) (loop_acc : acc) (ret : OutPtr acc) -> Store.
         case boxed @(Stored int) (stored @int i) of boxed real_index.

         -- Accumulate value
         f real_index loop_acc ret)
      ret

  ; nothingVal.
      except @Store
  };


primitive_dim1_reduce @(a : bare)
  (rep : Repr a)
  (dom : dim1)
  (generator : Stored int -> Init a)
  (reducer : a -> a -> Init a)
  (init : a)
  (ret : OutPtr a)
  -> Store
  attribute(inline, inline_final) =

  case dim1ToArraySize dom of arraySize @(N : intindex) lb stride size.

  let linear_map : LinearMap = linearMap stride lb in

  for @N @a rep size init
  (\ (i : int) (x : a) (loop_ret : OutPtr a) -> Store.
     let logical_i : int = evalLM i linear_map in
     case boxed @(Stored int) (stored @int logical_i) of boxed s_i.
      case boxed @a (generator s_i) of boxed y.
      reducer x y loop_ret)
  ret;


primitive_dim1_reduce1 : forall a : bare.
    Repr a
  -> dim1
  -> (Stored int -> Init a)
  -> (a -> a -> Init a)
  -> Init a;


primitive_dim1_fold @(acc : bare)
  (rep : Repr acc)
  (d : dim1)
  (f : index dim1 -> acc -> Init acc)
  (init : acc)
  (ret : OutPtr acc)
  -> Store
  attribute(inline) =

  case dim1ToArraySize d of arraySize @(N : intindex) lb stride count.

  -- Loop over the domain
  for @N @acc rep count init
  (\ (i : int) (loop_acc : acc) (ret : OutPtr acc) -> Store.

     -- Compute the real index in this loop iteration
     case boxed @(Stored int) (stored @int (lb +# i *# stride)) of
       boxed real_index.

     -- Accumulate value
     f real_index loop_acc ret)
  ret;


primitive_dim2_reduce : forall a : bare. Repr a -> dim2
  -> (Tuple2 (Stored int) (Stored int) -> Init a)
  -> (a -> a -> Init a)
  -> a
  -> Init a;

primitive_dim2_reduce1 : forall a : bare. Repr a -> dim2
  -> (Tuple2 (Stored int) (Stored int) -> Init a)
  -> (a -> a -> Init a)
  -> Init a;


-------------------------------------------------------------------------------
-- Domain loops (parallel)

parallel_list_dim_reduce @(a : bare)
  (rep : Repr a)
  (dom : list_dim)
  (g : Stored int -> Init a)
  (f : a -> a -> Init a)
  (init : a)
  (ret : OutPtr a)
  -> Store =

  case dom of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal (size : int).
      -- Create combiner and reducer functions using 'f' and 'g'
      let type b = AsBox a in
      letfun
        combiner (x : b) (y : b) -> b =
          case boxed @a (asbare @a rep x) of boxed bx.
          case boxed @a (asbare @a rep y) of boxed by.
          asbox @a rep (f bx by)
      in
      letfun
        reducer @(range_N : intindex)
          (lb : int) (count : FIInt range_N) (acc_in : b) -> b =
          for_box @range_N @b count acc_in
          (\ (i : int) (acc_loop : b) -> b.
            -- Add the lower bound to get the real index
            case boxed @(Stored int) (stored @int (i +# lb)) of
              boxed real_index.

            -- Call 'g' to compute a value, and 'f' to combine it
            case boxed @a (asbare @a rep acc_loop) of boxed x.
            case boxed @a (g real_index) of boxed y.
            asbox @a rep (f x y))
      in
      case defineIntIndex size of someIInt @(N : intindex) (count : FIInt N).
      let boxed_init : b = asbox @a rep (copy @a rep init) in
      asbare @a rep
      (blocked_1d_reduce @N @b count combiner boxed_init reducer)
      ret

  ; nothingVal.
      except @Store
  };


parallel_dim1_reduce @(a : bare)
  (rep : Repr a)
  (dom : dim1)
  (g : Stored int -> Init a)
  (f : a -> a -> Init a)
  (init : a)
  (ret : OutPtr a)
  -> Store
  attribute(inline) =

  case dom of mk_dim1 (iv : Interval) (lm : LinearMap).
  case lm of linearMap (stride : int) (alignemnt : int).
  case iv of
    interval (lower_bound : MaybeVal int) (upper_bound : MaybeVal int).
  case lower_bound of {
    justVal (lb : int).
      case upper_bound of {
        justVal (ub : int).          
          -- Create combiner and reducer functions using 'f' and 'g'
          let type b = AsBox a in
          letfun
            combiner (x : b) (y : b) -> b =
              case boxed @a (asbare @a rep x) of boxed bx.
              case boxed @a (asbare @a rep y) of boxed by.
              asbox @a rep (f bx by)
          in
          letfun
            reducer @(range_N : intindex)
              (lb : int) (count : FIInt range_N) (acc_in : b) -> b =
              for_box @range_N @b count acc_in
              (\ (i : int) (acc_loop : b) -> b.
                -- Compute the real index from iteration 'i'
                let real_index_u : int = lb +# i *# stride in
                case boxed @(Stored int) (stored @int real_index_u) of
                  boxed real_index.

                -- Call 'g' to compute a value, and 'f' to combine it
                case boxed @a (asbare @a rep acc_loop) of boxed x.
                case boxed @a (g real_index) of boxed y.
                asbox @a rep (f x y))
          in
          let size : int = (ub -# lb) //# stride in
          case defineIntIndex size of
            someIInt @(N : intindex) (count : FIInt N).
          let boxed_init : b = asbox @a rep (copy @a rep init) in
          asbare @a rep
          (blocked_1d_reduce @N @b count combiner boxed_init reducer)
          ret

      ; nothingVal.
          except @Store
      }
  ; nothingVal.
      except @Store
  };


parallel_list_dim_reduce1 @(a : bare)
  (rep : Repr a)
  (dom : list_dim)
  (g : Stored int -> Init a)
  (f : a -> a -> Init a)
  (ret : OutPtr a)
  -> Store =

  let mrepr : Repr (Maybe a) = repr_Maybe @a rep in
  case dom of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal (size : int).
      -- Create combiner and reducer functions using 'f' and 'g'
      let type ma = Maybe a in
      let type b = AsBox ma in
      letfun
        combiner (x : b) (y : b) -> b =
          -- Combine 'Maybe' values.  Use 'f' if both values are 'Just'.
          case boxed @ma (asbare @ma mrepr x) of boxed maybe_x.
          case maybe_x of {
            just (bx : a).
              case boxed @ma (asbare @ma mrepr y) of boxed maybe_y.
              case maybe_y of {
                just (by : a). asbox @ma mrepr (just @a (f bx by))
              ; nothing. x
            }
          ; nothing. y
          }
      in
      letfun
        reducer @(range_N : intindex)
          (lb : int) (count : FIInt range_N) (acc_in : b) -> b =
          case boxed @ma (asbare @ma mrepr acc_in) of boxed m_acc_in.

          letfun
            reduce_with_initial_value @(subrange_N : intindex)
              (subrange_lb : int)
              (subrange_count : FIInt subrange_N)
              (subrange_acc : a)
              -> b =
            asbox @ma mrepr
            (just @a
             (for @subrange_N @a rep subrange_count subrange_acc
              (\ (i : int) (x : a) (ret : OutPtr a) -> Store.
                 -- Add the lower bound to get the real index
                 case boxed @(Stored int) (stored @int (i +# subrange_lb)) of
                   boxed real_index.
               
                 -- Call 'g' to compute a value, and 'f' to combine it
                 case boxed @a (g real_index) of boxed y.
                 f x y ret)))
          in
          -- Get an initial value.  The value comes from either
          -- the given accumulator or the beginning of the range.
          -- We know the range is nonempty.
          case m_acc_in of {
            just (b_acc_in : a).
              reduce_with_initial_value @range_N lb count b_acc_in
          ; nothing.
              case boxed @(Stored int) (stored @int lb) of
                boxed (first_index : Stored int).
              case boxed @a (g first_index) of boxed b_acc_in.

              reduce_with_initial_value @(minus_i range_N 1)
              (lb +# 1)
              (minus_fii @range_N @1 count one_fii)
              b_acc_in
          }
      in
      case defineIntIndex size of someIInt @(N : intindex) (count : FIInt N).
      let boxed_init : b = asbox @ma mrepr (nothing @a) in
      case boxed @ma
           (asbare @ma mrepr
            (blocked_1d_reduce @N @b count combiner boxed_init reducer)) of
        boxed (m_result : Maybe a).
      case m_result of {
        just (result : a). copy @a rep result ret
      ; nothing. except @Store
      }

  ; nothingVal.
      except @Store
  };


parallel_list_dim_scatter @(i r : bare)
  (repr_i : Repr i) (repr_r : Repr r)
  (dom : list_dim)
  (op : Scatter r i)
  (f : Stored int -> Init i)
  (ret : OutPtr r)
  -> Store
  attribute(inline) =

  case op of
    mk_scatter @(s : bare) @(iniF : box) @(updF : box)
    (rep_s : Repr s)
    (initializer : iniF -> OutPtr s -> EffTok)
    (updater : updF -> i -> EffTok -> OutPtr s -> EffTok)
    (combiner : s -> s -> Init s)
    (finalizer : UpdateInPlaceFinalizer s r)
    (update_func : i -> updF)
    (init_func : iniF).

  let type bs = StuckBox s in

  letfun
    -- Version of 'combiner' for boxed objects
    boxed_combiner (x : bs) (y : bs) -> bs =
      case x of stuckBox ux.
      case y of stuckBox uy.
      stuckBox @s (combiner ux uy)
  in

  case dom of mk_list_dim (maybe_size : MaybeVal int).

  case maybe_size of {
    justVal (count : int).
      case defineIntIndex count of someIInt @(N : intindex) (size : FIInt N).

      -- Perform a parallel reduction over this range
      case blocked_1d_reduceip @N @bs size
           boxed_combiner
           (\ @(M : intindex) (start : int) (range_size : FIInt M) -> bs.
              -- Sequential reduction over this sub-range
              case range_size of fiInt (range_count : int).
              let subdom : list_dim = mk_list_dim (justVal @int range_count) in
                    
              stuckBox @s
              (partial_list_dim_scatter @i @s @iniF @updF repr_i rep_s
               initializer updater update_func init_func subdom
               (\ (sindex : Stored int) (local_ret : OutPtr i) -> Store.
                  -- Add 'start' to the index
                  case sindex of stored uindex.
                  case stuckBox @(Stored int)
                       (stored @int (uindex +# start)) of stuckBox sindex2.
                  f sindex2 local_ret))) of
        stuckBox (final_state : s).

      -- Create the final object
      finish_scatter @r @s repr_r rep_s finalizer
      (copy @s rep_s final_state) ret

  ; nothingVal.
      except @Store
  };


parallel_dim1_reduce1 : forall a : bare.
     Repr a
  -> dim1
  -> (Stored int -> Init a)
  -> (a -> a -> Init a)
  -> Init a;

parallel_dim2_reduce : forall a : bare.
     Repr a
  -> dim2
  -> (Tuple2 (Stored int) (Stored int) -> Init a)
  -> (a -> a -> Init a)
  -> a
  -> Init a;

parallel_dim2_reduce1 : forall a : bare.
     Repr a
  -> dim2
  -> (Tuple2 (Stored int) (Stored int) -> Init a)
  -> (a -> a -> Init a)
  -> Init a;

-------------------------------------------------------------------------------
-- Other functions

fun_undefined @(a : box) (dummy : Boxed (Stored NoneType)) -> a = except @a;

-- Convert an indexed int to a finite indexed int.  Raise an exception
-- if not finite.
fromIndInt @(N : intindex) (ii : IInt N) -> FIInt N attribute(inline) =
  case ii of {
    iInt (fii : FIInt N). fii;
    iPosInfty. except @(FIInt N);
    iNegInfty. except @(FIInt N)
  };

-- A dummy boxed object that is used as a placeholder for a dead value.
deadBox : forall a : box. a;

-- A dummy referenced object that is used as a placeholder for a dead value.
deadRef : forall a : bare. Init a;


fun_isNothing @(a : box)
  (rep : Repr (AsBare a)) (x : Boxed (Maybe (AsBare a)))
  -> Boxed (Stored bool) attribute(inline) =
  case x of boxed ux.
  case ux of {
    just value. boxBoolValue False
  ; nothing. boxBoolValue True
  };


fun_isJust @(a : box)
  (rep : Repr (AsBare a)) (x : Boxed (Maybe (AsBare a)))
  -> Boxed (Stored bool) attribute(inline) =
  case x of boxed ux.
  case ux of {
    just value. boxBoolValue True
  ; nothing. boxBoolValue False
  };
  

fun_fromJust @(a : box) (rep : Repr (AsBare a)) (x : Boxed (Maybe (AsBare a)))
  -> a attribute(inline) =
  case x of boxed ux.
  case ux of {
    just value. bareToBox @(AsBare a) rep value
  ; nothing. except @a
  };


isCons @(a : box) (rep : Repr (AsBare a)) (l : llist (AsBare a))
  -> Boxed (Stored bool) attribute(inline) =
  case l of {
    cons h t. boxBoolValue True
  ; nil. boxBoolValue False
  };


isNil @(a : box) (rep : Repr (AsBare a)) (l : llist (AsBare a))
  -> Boxed (Stored bool) attribute(inline) =
  case l of {
    cons h t. boxBoolValue False
  ; nil. boxBoolValue True
  };


head @(a : box) (rep : Repr (AsBare a)) (l : llist (AsBare a))
  -> a attribute(inline) =
  case l of {
    cons h t. bareToBox @(AsBare a) rep h
  ; nil. except @a
  };


tail @(a : box) (rep : Repr (AsBare a)) (l : llist (AsBare a))
  -> llist (AsBare a) attribute(inline) =
  case l of {
    cons h t. t
  ; nil. except @(llist (AsBare a))
  };


arr1D_build @(N : intindex) @(a : bare)
  (rep : Repr a) (size : FIInt N) (f : int -> Init a)
  (arr_ptr : OutPtr (arr N a))
  -> Store
  attribute(inline) =

  doall @N @(arr N a) @a size
  (\ (i : int) -> Store.
     f i (subscript_out @N @a (reprSizeAlign @a rep) arr_ptr i));


arr2D_build @(M N : intindex) @(a : bare)
  (rep : Repr a)
  (size_y : FIInt M) (size_x : FIInt N) (f : int -> int -> Init a)
  (arr_ptr : OutPtr (arr M (arr N a)))
  -> Store
  attribute(inline) =

  let row_repr : Repr (arr N a) = repr_arr @N @a size_x rep in
  doall @M @(arr M (arr N a)) @(arr N a) size_y
  (\ (y : int) -> Store.
     doall @N @(arr N a) @a size_x
     (\ (x : int) -> Store.
        f y x
        (subscript_out @N @a (reprSizeAlign @a rep)
         (subscript_out @M @(arr N a) (reprSizeAlign @(arr N a) row_repr)
          arr_ptr y) x)));


arr3D_build @(L M N : intindex) @(a : bare)
  (rep : Repr a)
  (size_z : FIInt L)
  (size_y : FIInt M)
  (size_x : FIInt N)
  (f : int -> int -> int -> Init a)
  (arr_ptr : OutPtr (arr L (arr M (arr N a))))
  -> Store
  attribute(inline) =

  let row_repr : Repr (arr N a) = repr_arr @N @a size_x rep in
  let plane_repr : Repr (arr M (arr N a)) =
        repr_arr @M @(arr N a) size_y row_repr in
  doall @L @(arr L (arr M (arr N a))) @(arr M (arr N a)) size_z
  (\ (z : int) -> Store.
     doall @M @(arr M (arr N a)) @(arr N a) size_y
     (\ (y : int) -> Store.
        doall @N @(arr N a) @a size_x
        (\ (x : int) -> Store.
           f z y x
           (subscript_out @N @a (reprSizeAlign @a rep)
            (subscript_out @M @(arr N a) (reprSizeAlign @(arr N a) row_repr)
             (subscript_out @L @(arr M (arr N a)) (reprSizeAlign @(arr M (arr N a)) plane_repr)
              arr_ptr z) y) x))));


empty_list_dim_view : forall a : bare. Repr a -> view list_dim (AsBox a);


-- Wrapper around viewToSequence
Stream1ToSequence @(a : box) (rep : Repr (AsBare a)) (s : Stream list_dim a)
  -> Sequence a attribute(inline) =
  case s of {
    sequenceStream sq. sq
  ; viewStream vw. viewToSequence @(AsBare a) rep vw
  };


viewToSequence @(a : bare) (rep : Repr a) (vw : view list_dim (AsBox a))
  -> Sequence (AsBox a) attribute(inline, inline_dimensionality) =
  case vw of mk_view (dom : list_dim) f.
  letfun
    bare_f (x : Stored int) (ret : OutPtr a) -> Store =
      asbare @a rep (f (bareToBox @(Stored int) repr_int x)) ret
  in
  Sequence_generate @a rep dom bare_f;


sequenceToView @(a : bare) (rep : Repr a) (sq : Sequence (AsBox a))
  -> view list_dim (AsBox a) attribute(inline, inline_dimensionality) =
  -- Write the entire sequence to a list
  case boxed @(list a) (Sequence_list_build @a rep sq)
  of boxed (ls : list a).

  -- Then traverse the list
  case ls of make_list @(N : intindex) size aref.
  case aref of stuckBox (ay : arr N a).

  case size of fiInt (size_i : int).
  let dom : list_dim = mk_list_dim (justVal @int size_i) in
  view_generate @list_dim ShapeDict_list_dim @(AsBox a) rep dom
  (\ (bi : Boxed (Stored int)) -> AsBox a.
     let i = unboxIntValue bi in
     bareToBox @a rep (subscript @N @a (reprSizeAlign @a rep) ay i));


-- Given a mapping from old to new domains and from new to old indices,
-- transform a view.
view_transform @(sh : box) @(a : bare)
  (rep : Repr a)
  (transform_domain : sh -> sh)
  (transform_index : AsBox (index sh) -> AsBox (index sh))
  (vw : view sh (AsBox a))
  -> view sh (AsBox a)
  attribute(inline, inline_dimensionality) =
  case vw of mk_view (dom : sh) f.
  mk_view @sh @(AsBox a) (transform_domain dom)
  (\ (i : AsBox (index sh)) -> AsBox a. f (transform_index i));


count : Stream list_dim (Boxed (Stored int)) attribute(inline) =
  viewStream @(Boxed (Stored int))
  (view_generate @list_dim ShapeDict_list_dim @(Boxed (Stored int)) repr_int
   (mk_list_dim (nothingVal @int))
   (\ (i : Boxed (Stored int)) -> Boxed (Stored int). i));


range (length : Boxed (Stored int)) -> Stream list_dim (Boxed (Stored int))
  attribute(inline) =
  viewStream @(Boxed (Stored int))
  (view_generate @list_dim ShapeDict_list_dim @(Boxed (Stored int)) repr_int
   (mk_list_dim (justVal @int (unboxIntValue length)))
   (\ (i : Boxed (Stored int)) -> Boxed (Stored int). i));


arrayRange @(sh : box) (shp : ShapeDict sh) (cartesian : CartesianDict sh)
  (lo : AsBox (index sh)) (hi : AsBox (index sh))
  -> Stream sh (AsBox (index sh))
  attribute(inline) =

  let type ix = index sh in

  case cartesian of cartesianDict has_shape loBound hiBound get_stride
    arrayDomain displaceDomain multiplyDomain divideDomain
    multiplyIndex divideIndex unbounded.

  fun_indices @sh shp (arrayDomain lo hi);


singletonIter @(a : box) (rep : Repr (AsBare a)) (x : a) -> Stream list_dim a
  attribute(inline) =
  viewStream @a (singleton_list_dim_view @a rep x);


-- Helper function for 'singletonIter'
singleton_list_dim_view @(a : box) (rep : Repr (AsBare a)) (x : a)
  -> view list_dim a
  attribute(inline, inline_dimensionality) =
  view_generate @list_dim ShapeDict_list_dim @a rep
  (mk_list_dim (justVal @int 1))
  (\ (i : Boxed (Stored int)) -> a. x);


-- Helper function for stream rewriting transformations
peel_generate_bind @(a r : bare)
  (rep_a : Repr a)
  (rep_r : Repr r)
  (dom : list_dim)
  (proceed : int -> list_dim -> Init r -> Init r)
  (failure : Init r)
  (ret : OutPtr r)
  -> Store
  attribute(inline) =

  case dom of mk_list_dim (msize : MaybeVal int).
  case msize of {
    justVal (size : int).
      letfun
        -- Loop over each element of the domain
        loop (i : int) (ret : OutPtr r) -> Store =
          if i <# size
          then let new_dom : list_dim =
                     mk_list_dim (justVal @int (size -# i -# 1)) in

               -- Pass the index, leftover domain, and loop continuation
               -- to 'proceed'.  'proceed' will call the continuation or
               -- do its own thing.
               proceed i new_dom (loop (i +# 1)) ret
          else failure ret
      in loop 0 ret

  ; nothingVal.
      except @Store
  };


peel_generate @(a r : bare)
  (rep_a : Repr a)
  (rep_r : Repr r)
  (dom : list_dim)
  (proceed : list_dim -> Init r)
  (failure : Init r)
  (ret : OutPtr r)
  -> Store
  attribute(inline) =

  case dom of mk_list_dim (msize : MaybeVal int).
  case msize of {
    justVal (size : int).
      if size ==# 0
      then failure ret
      else let new_dom : list_dim = mk_list_dim (justVal @int (size -# 1)) in
           proceed new_dom ret

  ; nothingVal.
      except @Store
  };


chain @(a : box)
  (rep : Repr (AsBare a)) (i1 : Stream list_dim a) (i2 : Stream list_dim a)
  -> Stream list_dim a
  attribute(inline) =
  case i1 of {
    viewStream (v1 : view list_dim a).
      case i2 of {
        viewStream (v2 : view list_dim a).
          viewStream @a (primitive_list_dim_chain @(AsBare a) rep v1 v2)
      ; sequenceStream (s2 : Sequence a).
          sequenceStream @a
          (Sequence_chain @(AsBare a) rep (viewToSequence @(AsBare a) rep v1) s2)
      }
  ; sequenceStream (s1 : Sequence a).
      case i2 of {
        viewStream (v2 : view list_dim a).
          sequenceStream @a
          (Sequence_chain @(AsBare a) rep s1 (viewToSequence @(AsBare a) rep v2))
      ; sequenceStream (s2 : Sequence a).
          sequenceStream @a
          (Sequence_chain @(AsBare a) rep s1 s2)
      }
  };


len @(t : box -> box) @(a : box)
  (is_linear : coerce @box (shape t) list_dim)
  (indexable : IndexableDict t)
  (container : t a)
  -> Boxed (Stored int)
  attribute(inline) =
  case indexable of indexableDict at_index get_shape.

  let sh : list_dim = coerce @(shape t) @list_dim (get_shape @a container) in
  case sh of mk_list_dim (list_size : MaybeVal int).
  case list_size of {
    justVal n. boxIntValue n
  ; nothingVal. except @(Boxed (Stored int))
  };


width @(t : box -> box) @(a : box)
  (is_2d : coerce @box (shape t) dim2)
  (indexable : IndexableDict t)
  (container : t a)
  -> Boxed (Stored int)
  attribute(inline) =
  case indexable of indexableDict at_index get_shape.

  let sh : dim2 = coerce @(shape t) @dim2 (get_shape @a container) in
  case sh of mk_dim2 (dim_y : dim1) (dim_x : dim1).
  case dim_x of mk_dim1 (iv : Interval) (lm : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case lb of {
    justVal lb_i.
      case ub of {
        justVal ub_i. boxIntValue (ub_i -# lb_i)
      ; nothingVal. except @(Boxed (Stored int))
      }
    ; nothingVal. except @(Boxed (Stored int))
  };


height @(t : box -> box) @(a : box)
  (is_2d : coerce @box (shape t) dim2)
  (indexable : IndexableDict t)
  (container : t a)
  -> Boxed (Stored int)
  attribute(inline) =
  case indexable of indexableDict at_index get_shape.

  let sh : dim2 = coerce @(shape t) @dim2 (get_shape @a container) in
  case sh of mk_dim2 (dim_y : dim1) (dim_x : dim1).
  case dim_y of mk_dim1 (iv : Interval) (lm : LinearMap).
  case iv of interval (lb : MaybeVal int) (ub : MaybeVal int).
  case lb of {
    justVal (lb_i : int).
      case ub of {
        justVal ub_i. boxIntValue (ub_i -# lb_i)
      ; nothingVal. except @(Boxed (Stored int))
      }
    ; nothingVal. except @(Boxed (Stored int))
  };


safeIndex @(t : box -> box) @(a : box)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (rep : Repr (AsBare a))
  (container : t a)
  (ix : AsBox (index (shape t)))
  -> a
  attribute(inline) =

  let type sh = shape t in
  case indexable of indexableDict at_index get_shape.

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  let container_shape : sh = get_shape @a container in
  if unboxBoolValue (shape_member container_shape ix)
  then at_index @a rep container ix
  else except @a;


safeSlice @(t : box -> box) @(a : box)
  (indexable : IndexableDict t)
  (shape_dict : ShapeDict (shape t))
  (rep : Repr (AsBare a))
  (container : t a)
  (sl : AsBox (slice (shape t)))
  -> view (shape t) a
  attribute(inline) =
  
  let type sh = shape t in
  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  shape_slice @t @a (idCoercion @sh) indexable rep container sl;


rows @(t : box -> box) @(a : box)
  (indexable : IndexableDict t)
  (shape_is_dim2 : coerce @box (shape t) dim2)
  (rep : Repr (AsBare a))
  (container : t a)
  -> view dim1 (view dim1 a)
  attribute(inline) =
  case indexable of indexableDict at_index get_shape.
  case coerce @(shape t) @dim2 (get_shape @a container) of
    mk_dim2 (shape_y : dim1) (shape_x : dim1).

  view_generate @dim1
  ShapeDict_dim1 @(view dim1 a)
  (repr_Box @(view dim1 a)) shape_y
  (\ (s_y : Boxed (Stored int)) -> view dim1 a.
    view_generate @dim1 ShapeDict_dim1
    @a rep shape_x
    (\ (s_x : Boxed (Stored int)) -> a.
      let ix = boxed @(index dim2)
               (tuple2 @(Stored int) @(Stored int)
                (asbare @(Stored int) repr_int s_y)
                (asbare @(Stored int) repr_int s_x)) in
      at_index @a rep container
      (coerce @(Boxed (index dim2)) @(AsBox (index (shape t))) ix)));
  

cols @(t : box -> box) @(a : box)
  (indexable : IndexableDict t)
  (shape_is_dim2 : coerce @box (shape t) dim2)
  (rep : Repr (AsBare a))
  (container : t a)
  -> view dim1 (view dim1 a)
  attribute(inline) =
  case indexable of indexableDict at_index get_shape.
  case coerce @(shape t) @dim2 (get_shape @a container) of
    mk_dim2 (shape_y : dim1) (shape_x : dim1).

  view_generate @dim1
  ShapeDict_dim1 @(view dim1 a)
  (repr_Box @(view dim1 a)) shape_x
  (\ (s_x : Boxed (Stored int)) -> view dim1 a.
    view_generate @dim1
    ShapeDict_dim1 @a rep shape_y
    (\ (s_y : Boxed (Stored int)) -> a.
      let ix = boxed @(index dim2)
               (tuple2 @(Stored int) @(Stored int)
                (asbare @(Stored int) repr_int s_y)
                (asbare @(Stored int) repr_int s_x)) in
       at_index @a rep container
       (coerce @(Boxed (index dim2)) @(AsBox (index (shape t))) ix)));


outerproduct @(t u : box -> box) @(a b : box)
  (traversable_t : TraversableDict t)
  (traversable_u : TraversableDict u)
  (t_is_linear : coerce @box (shape t) dim1)
  (u_is_linear : coerce @box (shape u) dim1)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (container_t : t a)
  (container_u : u b)
  -> Stream dim2 (Boxed (Tuple2 (AsBare a) (AsBare b)))
  attribute(inline) =

  case traversable_t of traversableDict traverseT buildT.
  case traversable_u of traversableDict traverseU buildU.

  let sa : Stream dim1 a =
        coerce @(Stream (shape t) a) @(Stream dim1 a)
        (traverseT @a repr_a container_t) in
  let sb : Stream dim1 b =
        coerce @(Stream (shape u) b) @(Stream dim1 b)
        (traverseU @b repr_b container_u) in

  outerproductStream @a @b repr_a repr_b sa sb;


outerproductStream @(a b : box)
  (repr_a : Repr (AsBare a)) (repr_b : Repr (AsBare b))
  (sa : Stream dim1 a)
  (sb : Stream dim1 b)
  -> Stream dim2 (Boxed (Tuple2 (AsBare a) (AsBare b)))
  attribute(inline, inline_dimensionality) =

  case sa of mk_view (domA : dim1) fA.
  case sb of mk_view (domB : dim1) fB.

  let type Sint = Stored int in
  let type out_type = Tuple2 (AsBare a) (AsBare b) in

  view_generate @dim2 ShapeDict_dim2 @(Boxed out_type)
  (repr_Tuple2 @(AsBare a) @(AsBare b) repr_a repr_b)
  (mk_dim2 domA domB)
  (\ (ix : Boxed (Tuple2 Sint Sint)) -> Boxed out_type.

    -- Index each view with one component of the index
    case ix of boxed u_ix.
    case u_ix of tuple2 ix_y ix_x.
    case ix_y of stored u_ix_y.
    case ix_x of stored u_ix_x.

    let valueA = fA (boxIntValue u_ix_y) in
    let valueB = fB (boxIntValue u_ix_x) in

    boxed @(Tuple2 (AsBare a) (AsBare b))
    (tuple2 @(AsBare a) @(AsBare b) (asbare @(AsBare a) repr_a valueA) (asbare @(AsBare b) repr_b valueB)));


transpose : forall t : box -> box, a : box.
            IndexableDict t
	 -> coerce @box (shape t) dim2
	 -> Repr (AsBare a)
	 -> t a -> view dim2 a;


boxedStencil2D @(t : box -> box) @(a b : box)
  (indexable : IndexableDict t)
  (is_2d : coerce @box (shape t) dim2)
  (repr_a : Repr (AsBare a))
  (repr_b : Repr (AsBare b))
  (output_dom : dim2)
  (stencil_dom : dim2)
  (gen_f : view dim2 a -> b)
  (input : t a)
  -> Boxed (barray2 (AsBare b))
  attribute(inline, inline_dimensionality) =

  -- This function is defined in terms of stencil2D.
  let type boxed_b = StuckRef b in
  let repr_boxed_b : Repr boxed_b = repr_StuckRef @b in

  boxed @(barray2 (AsBare b))
  (mk_barray2 @(AsBare b)
   (asbare @(array2 boxed_b) (repr_array2 @boxed_b)
    (stencil2D @t @a @(AsBox boxed_b)
     indexable is_2d repr_a repr_boxed_b
     output_dom stencil_dom
     (\ (vw : view dim2 a) -> AsBox boxed_b.

        -- Call 'gen_f' and re-box the result
        boxed @boxed_b
        (stuckRef @b (gen_f vw)))
     input)));


stencil2D @(t : box -> box) @(a b : box)
  (indexable : IndexableDict t)
  (is_2d : coerce @box (shape t) dim2)
  (repr_a : Repr (AsBare a))
  (repr_b : Repr (AsBare b))
  (output_dom : dim2)
  (stencil_dom : dim2)
  (gen_f : view dim2 a -> b)
  (input : t a)
  -> Boxed (array2 (AsBare b))
  attribute(inline, inline_dimensionality) =

  case indexable of indexableDict at_index get_shape.

  let type return_type = Boxed (array2 (AsBare b)) in
  let input_dom : dim2 = coerce @(shape t) @dim2 (get_shape @a input) in

  case output_dom of mk_dim2 (output_dom_y : dim1) (output_dom_x : dim1).
  case output_dom_y of mk_dim1 (output_y_iv : Interval) (output_y_lm : LinearMap).
  case output_dom_x of mk_dim1 (output_x_iv : Interval) (output_x_lm : LinearMap).
  case output_y_lm of linearMap (output_y_stride : int) (output_y_align : int).
  case output_x_lm of linearMap (output_x_stride : int) (output_x_align : int).

  case input_dom of mk_dim2 (input_dom_y : dim1) (input_dom_x : dim1).
  case input_dom_y of mk_dim1 (input_y_iv : Interval) (input_y_lm : LinearMap).
  case input_dom_x of mk_dim1 (input_x_iv : Interval) (input_x_lm : LinearMap).
  case input_y_lm of linearMap (input_y_stride : int) (input_y_align : int).
  case input_x_lm of linearMap (input_x_stride : int) (input_x_align : int).

  case stencil_dom of mk_dim2 (stencil_dom_y : dim1) (stencil_dom_x : dim1).
  case stencil_dom_y of mk_dim1 (stencil_y_iv : Interval) (stencil_y_lm : LinearMap).
  case stencil_dom_x of mk_dim1 (stencil_x_iv : Interval) (stencil_x_lm : LinearMap).
  case stencil_y_lm of linearMap (stencil_y_stride : int) (stencil_y_align : int).
  case stencil_x_lm of linearMap (stencil_x_stride : int) (stencil_x_align : int).

  -- Verify that all stencil inputs are in the input domain:

  -- 1. any linear combination of output and stencil strides must be a
  -- multiple of the input stride.
  if gcd output_y_stride stencil_y_stride %# input_y_stride /=# 0
  then except @return_type else

  if gcd output_x_stride stencil_x_stride %# input_x_stride /=# 0
  then except @return_type else

  -- 2. The alignment of the output plus the alignment of the stencil must be
  --    equal to the alignment of the input, modulo the input stride.
  if (output_y_align +# stencil_y_align -# input_y_align) %# input_y_stride /=# 0
  then except @return_type else

  if (output_x_align +# stencil_x_align -# input_x_align) %# input_x_stride /=# 0
  then except @return_type else

  -- 3. The bounds of the output range plus the bounds of the stencil range
  --    must be within the bounds of the input range.
  if not (subsetInterval (convolveInterval output_y_iv stencil_y_iv) input_y_iv)
  then except @return_type else

  if not (subsetInterval (convolveInterval output_x_iv stencil_x_iv) input_x_iv)
  then except @return_type else

  -- Loop over all stencil indices
  let output_view : view dim2 b =
        view_generate @dim2 ShapeDict_dim2 @b repr_b output_dom
        (\ (ix : Boxed (index dim2)) -> b.
           case ix of boxed u_ix.
           case u_ix of tuple2 ix_y ix_x.
           case ix_y of stored o_y.
           case ix_x of stored o_x.

           -- Apply the generator function to a view of the input array
           gen_f
           (view_generate @dim2 ShapeDict_dim2 @a repr_a stencil_dom
            (\ (s_ix : Boxed (index dim2)) -> a.
               case s_ix of boxed u_s_ix.
               case u_s_ix of tuple2 s_ix_y s_ix_x.
               case s_ix_y of stored s_y.
               case s_ix_x of stored s_x.

               -- The real index is the output index plus the stencil index
               let real_ix = boxed @(index dim2)
                             (tuple2 @(Stored int) @(Stored int)
                              (stored @int (o_y +# s_y))
                              (stored @int (o_x +# s_x))) in
               at_index @a repr_a input
               (coerce @(AsBox (index dim2)) @(AsBox (index (shape t))) real_ix)))) in

  TraversableDict_array2_build @b repr_b output_view;


boxedStencil3D @(t : box -> box) @(a b : box)
  (indexable : IndexableDict t)
  (is_3d : coerce @box (shape t) dim3)
  (repr_a : Repr (AsBare a))
  (repr_b : Repr (AsBare b))
  (output_dom : dim3)
  (stencil_dom : dim3)
  (gen_f : view dim3 a -> b)
  (input : t a)
  -> Boxed (barray3 (AsBare b))
  attribute(inline, inline_dimensionality) =

  -- This function is defined in terms of stencil3D.
  let type boxed_b = StuckRef b in
  let repr_boxed_b : Repr boxed_b = repr_StuckRef @b in

  boxed @(barray3 (AsBare b))
  (mk_barray3 @(AsBare b)
   (asbare @(array3 (StuckRef b)) (repr_array3 @(StuckRef b))
    (stencil3D @t @a @(AsBox (StuckRef b))
     indexable is_3d repr_a repr_boxed_b
     output_dom stencil_dom
     (\ (vw : view dim3 a) -> Boxed boxed_b.
        boxed @boxed_b (stuckRef @b (gen_f vw)))
     input)));


stencil3D @(t : box -> box) @(a b : box)
  (indexable : IndexableDict t)
  (is_3d : coerce @box (shape t) dim3)
  (repr_a : Repr (AsBare a))
  (repr_b : Repr (AsBare b))
  (output_dom : dim3)
  (stencil_dom : dim3)
  (gen_f : view dim3 a -> b)
  (input : t a)
  -> Boxed (array3 (AsBare b))
  attribute(inline, inline_dimensionality) =

  case indexable of indexableDict at_index get_shape.

  let type return_type = Boxed (array3 (AsBare b)) in
  let input_dom : dim3 = coerce @(shape t) @dim3 (get_shape @a input) in

  case output_dom of mk_dim3 (output_dom_z : dim1) (output_dom_y : dim1) (output_dom_x : dim1).
  case output_dom_z of mk_dim1 (output_z_iv : Interval) (output_z_lm : LinearMap).
  case output_dom_y of mk_dim1 (output_y_iv : Interval) (output_y_lm : LinearMap).
  case output_dom_x of mk_dim1 (output_x_iv : Interval) (output_x_lm : LinearMap).
  case output_z_lm of linearMap (output_z_stride : int) (output_z_align : int).
  case output_y_lm of linearMap (output_y_stride : int) (output_y_align : int).
  case output_x_lm of linearMap (output_x_stride : int) (output_x_align : int).

  case input_dom of mk_dim3 (input_dom_z : dim1) (input_dom_y : dim1) (input_dom_x : dim1).
  case input_dom_z of mk_dim1 (input_z_iv : Interval) (input_z_lm : LinearMap).
  case input_dom_y of mk_dim1 (input_y_iv : Interval) (input_y_lm : LinearMap).
  case input_dom_x of mk_dim1 (input_x_iv : Interval) (input_x_lm : LinearMap).
  case input_z_lm of linearMap (input_z_stride : int) (input_z_align : int).
  case input_y_lm of linearMap (input_y_stride : int) (input_y_align : int).
  case input_x_lm of linearMap (input_x_stride : int) (input_x_align : int).

  case stencil_dom of mk_dim3 (stencil_dom_z : dim1) (stencil_dom_y : dim1) (stencil_dom_x : dim1).
  case stencil_dom_z of mk_dim1 (stencil_z_iv : Interval) (stencil_z_lm : LinearMap).
  case stencil_dom_y of mk_dim1 (stencil_y_iv : Interval) (stencil_y_lm : LinearMap).
  case stencil_dom_x of mk_dim1 (stencil_x_iv : Interval) (stencil_x_lm : LinearMap).
  case stencil_z_lm of linearMap (stencil_z_stride : int) (stencil_z_align : int).
  case stencil_y_lm of linearMap (stencil_y_stride : int) (stencil_y_align : int).
  case stencil_x_lm of linearMap (stencil_x_stride : int) (stencil_x_align : int).

  -- Verify that all stencil inputs are in the input domain:

  -- 1. any linear combination of output and stencil strides must be a
  -- multiple of the input stride.
  if gcd output_z_stride stencil_z_stride %# input_z_stride /=# 0
  then except @return_type else

  if gcd output_y_stride stencil_y_stride %# input_y_stride /=# 0
  then except @return_type else

  if gcd output_x_stride stencil_x_stride %# input_x_stride /=# 0
  then except @return_type else

  -- 2. The alignment of the output plus the alignment of the stencil must be
  --    equal to the alignment of the input, modulo the input stride.
  if (output_z_align +# stencil_z_align -# input_z_align) %# input_z_stride /=# 0
  then except @return_type else

  if (output_y_align +# stencil_y_align -# input_y_align) %# input_y_stride /=# 0
  then except @return_type else

  if (output_x_align +# stencil_x_align -# input_x_align) %# input_x_stride /=# 0
  then except @return_type else

  -- 3. The bounds of the output range plus the bounds of the stencil range
  --    must be within the bounds of the input range.
  if not (subsetInterval (convolveInterval output_z_iv stencil_z_iv) input_z_iv)
  then except @return_type else

  if not (subsetInterval (convolveInterval output_y_iv stencil_y_iv) input_y_iv)
  then except @return_type else

  if not (subsetInterval (convolveInterval output_x_iv stencil_x_iv) input_x_iv)
  then except @return_type else

  -- Loop over all stencil indices
  let type Sint = Stored int in
  let output_view : view dim3 b =
        view_generate @dim3 ShapeDict_dim3 @b repr_b output_dom
        (\ (ix : Boxed (index dim3)) -> b.
           case ix of boxed u_ix.
           case u_ix of tuple3 ix_z ix_y ix_x.
           case ix_z of stored o_z.
           case ix_y of stored o_y.
           case ix_x of stored o_x.

           -- Apply the generator function to a view of the input array
           gen_f
           (view_generate @dim3 ShapeDict_dim3 @a repr_a stencil_dom
            (\ (s_ix : Boxed (index dim3)) -> a.
               case s_ix of boxed u_s_ix.
               case u_s_ix of tuple3 s_ix_z s_ix_y s_ix_x.
               case s_ix_z of stored s_z.
               case s_ix_y of stored s_y.
               case s_ix_x of stored s_x.

               -- The real index is the output index plus the stencil index
               let real_index = boxed @(index dim3)
                                (tuple3 @Sint @Sint @Sint
                                 (stored @int (o_z +# s_z))
                                 (stored @int (o_y +# s_y))
                                 (stored @int (o_x +# s_x))) in
               at_index @a repr_a input
               (coerce @(AsBox (index dim3)) @(AsBox (index (shape t))) real_index)))) in

  TraversableDict_array3_build @b repr_b output_view;


extend2D @(t : box -> box) @(a : box)
  (indexable_dict : IndexableDict t)
  (is_2d : coerce @box (shape t) dim2)
  (rep : Repr (AsBare a))
  (container : t a)
  -> view dim2 a
  attribute(inline, inline_sequential) =
  case indexable_dict of indexableDict at_index get_shape.

  let type Sint = Stored int in
  case coerce @(shape t) @dim2 (get_shape @a container) of
    mk_dim2 (dim_y : dim1) (dim_x : dim1).
  case dim_y of mk_dim1 (y_interval : Interval) (y_linear_map : LinearMap).
  case y_interval of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case y_linear_map of linearMap (stride_y : int) (alignment_y : int).
  case dim_x of mk_dim1 (x_interval : Interval) (x_linear_map : LinearMap).
  case x_interval of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case x_linear_map of linearMap (stride_x : int) (alignment_x : int).

  -- Input must be nonempty
  if or (case lb_y of {
           justVal (lb_y_i : int).
             case ub_y of {
               justVal (ub_y_i : int). lb_y_i ==# ub_y_i
             ; nothingVal. False
             }
         ; nothingVal. False
         })
         (case lb_x of {
           justVal (lb_x_i : int).
             case ub_x of {
               justVal (ub_x_i : int). lb_x_i ==# ub_x_i
             ; nothingVal. False
             }
         ; nothingVal. False
         })
  then except @(view dim2 a) else

  -- Create a view with no bounds
  let unbounded_interval : Interval =
        interval (nothingVal @int) (nothingVal @int) in
  let dom : dim2 =
        mk_dim2 (mk_dim1 unbounded_interval y_linear_map)
                (mk_dim1 unbounded_interval x_linear_map) in

  mk_view @dim2 @a dom
  (\ (ix : Boxed (Tuple2 Sint Sint)) -> a.
     case ix of boxed u_ix.
     case u_ix of tuple2 sy sx.
     case sy of stored y.
     case sx of stored x.

     -- Coerce the x and y indices to be in bounds
     letfun
       coerce_to_bounds
         (i : int) (lb : MaybeVal int) (ub : MaybeVal int) (stride : int)
         -> int =
         letfun
           coerce_upper (dummy : NoneType) -> int =
             case ub of {
               justVal (ub_i : int).
                 if i >=# ub_i then ub_i -# stride else i
             ; nothingVal. i
             } in
         case lb of {
           justVal (lb_i : int).
             if i <# lb_i then lb_i else coerce_upper None
         ; nothingVal. coerce_upper None
         } in
     let real_y : int = coerce_to_bounds y lb_y ub_y stride_y in
     let real_x : int = coerce_to_bounds x lb_x ub_x stride_x in

     -- Create new index
     let inbounds_ix = boxed @(Tuple2 Sint Sint)
          (tuple2 @Sint @Sint
           (stored @int real_y) (stored @int real_x)) in
     at_index @a rep container
     (coerce @(AsBox (index dim2)) @(AsBox (index (shape t))) inbounds_ix));


extend3D @(t : box -> box) @(a : box)
  (indexable : IndexableDict t)
  (is_3d : coerce @box (shape t) dim3)
  (rep : Repr (AsBare a))
  (container : t a)
  -> view dim3 a
  attribute(inline, inline_sequential) =
  case indexable of indexableDict at_index get_shape.

  case coerce @(shape t) @dim3 (get_shape @a container) of
    mk_dim3 (dim_z : dim1) (dim_y : dim1) (dim_x : dim1).
  case dim_z of mk_dim1 (z_interval : Interval) (z_linear_map : LinearMap).
  case z_interval of interval (lb_z : MaybeVal int) (ub_z : MaybeVal int).
  case z_linear_map of linearMap (stride_z : int) (alignment_z : int).
  case dim_y of mk_dim1 (y_interval : Interval) (y_linear_map : LinearMap).
  case y_interval of interval (lb_y : MaybeVal int) (ub_y : MaybeVal int).
  case y_linear_map of linearMap (stride_y : int) (alignment_y : int).
  case dim_x of mk_dim1 (x_interval : Interval) (x_linear_map : LinearMap).
  case x_interval of interval (lb_x : MaybeVal int) (ub_x : MaybeVal int).
  case x_linear_map of linearMap (stride_x : int) (alignment_x : int).

  -- Input must be nonempty
  if or (case lb_z of {
           justVal (lb_z_i : int).
             case ub_z of {
               justVal (ub_z_i : int). lb_z_i ==# ub_z_i
             ; nothingVal. False
             }
         ; nothingVal. False
         })
        (or (case lb_y of {
               justVal (lb_y_i : int).
                 case ub_y of {
                   justVal (ub_y_i : int). lb_y_i ==# ub_y_i
                 ; nothingVal. False
                 }
             ; nothingVal. False
             })
             (case lb_x of {
               justVal (lb_x_i : int).
                 case ub_x of {
                   justVal (ub_x_i : int). lb_x_i ==# ub_x_i
                 ; nothingVal. False
                 }
             ; nothingVal. False
             }))
  then except @(view dim3 a) else

  -- Create a view with no bounds
  let unbounded_interval : Interval =
        interval (nothingVal @int) (nothingVal @int) in
  let dom : dim3 =
        mk_dim3 (mk_dim1 unbounded_interval z_linear_map)
                (mk_dim1 unbounded_interval y_linear_map)
                (mk_dim1 unbounded_interval x_linear_map) in

  let type Sint = Stored int in
  mk_view @dim3 @a dom
  (\ (ix : Boxed (Tuple3 Sint Sint Sint)) -> a.
     case ix of boxed u_ix.
     case u_ix of tuple3 sz sy sx.
     case sz of stored z.
     case sy of stored y.
     case sx of stored x.

     -- Coerce the indices to be in bounds
     letfun
       coerce_to_bounds
         (i : int) (lb : MaybeVal int) (ub : MaybeVal int) (stride : int)
         -> int =
         letfun
           coerce_upper (dummy : NoneType) -> int =
             case ub of {
               justVal (ub_i : int).
                 if i >=# ub_i then ub_i -# stride else i
             ; nothingVal. i
             } in
         case lb of {
           justVal (lb_i : int).
             if i <# lb_i then lb_i else coerce_upper None
         ; nothingVal. coerce_upper None
         } in
     let real_z : int = coerce_to_bounds z lb_z ub_z stride_z in
     let real_y : int = coerce_to_bounds y lb_y ub_y stride_y in
     let real_x : int = coerce_to_bounds x lb_x ub_x stride_x in

     -- Create new index
     let inbounds_ix = boxed @(Tuple3 Sint Sint Sint)
                       (tuple3 @Sint @Sint @Sint
                        (stored @int real_z) (stored @int real_y) (stored @int real_x)) in
     at_index @a rep container
     (coerce @(AsBox (index dim3)) @(AsBox (index (shape t))) inbounds_ix));


-- Take the union of an inner and outer view
unionView3D @(a : box) (rep : Repr (AsBare a))
  (inner : view dim3 a) (edge : view dim3 a)
  -> view dim3 a attribute(inline, inline_dimensionality) =

  case inner of mk_view (inner_dom : dim3) inner_f.
  case edge of mk_view (edge_dom : dim3) edge_f.

  case inner_dom of mk_dim3 (inner_dom_z : dim1) (inner_dom_y : dim1) (inner_dom_x : dim1).
  case inner_dom_z of mk_dim1 (inner_z_iv : Interval) (inner_z_lm : LinearMap).
  case inner_dom_y of mk_dim1 (inner_y_iv : Interval) (inner_y_lm : LinearMap).
  case inner_dom_x of mk_dim1 (inner_x_iv : Interval) (inner_x_lm : LinearMap).
  case inner_z_lm of linearMap (inner_z_stride : int) (inner_z_align : int).
  case inner_y_lm of linearMap (inner_y_stride : int) (inner_y_align : int).
  case inner_x_lm of linearMap (inner_x_stride : int) (inner_x_align : int).

  case edge_dom of mk_dim3 (edge_dom_z : dim1) (edge_dom_y : dim1) (edge_dom_x : dim1).
  case edge_dom_z of mk_dim1 (edge_z_iv : Interval) (edge_z_lm : LinearMap).
  case edge_dom_y of mk_dim1 (edge_y_iv : Interval) (edge_y_lm : LinearMap).
  case edge_dom_x of mk_dim1 (edge_x_iv : Interval) (edge_x_lm : LinearMap).
  case edge_z_lm of linearMap (edge_z_stride : int) (edge_z_align : int).
  case edge_y_lm of linearMap (edge_y_stride : int) (edge_y_align : int).
  case edge_x_lm of linearMap (edge_x_stride : int) (edge_x_align : int).

  -- Verify that the inner domain is a subset of the outer domain.
  -- The outer domain's stride must divide the inner domain's stride.
  if inner_z_stride %# edge_z_stride /=# 0
  then except @(view dim3 a) else

  if inner_y_stride %# edge_y_stride /=# 0
  then except @(view dim3 a) else

  if inner_x_stride %# edge_x_stride /=# 0
  then except @(view dim3 a) else

  -- The outer domain's stride must divide the difference in alignments.
  if (edge_z_align -# inner_z_align) %# edge_z_stride /=# 0
  then except @(view dim3 a) else

  if (edge_y_align -# inner_y_align) %# edge_y_stride /=# 0
  then except @(view dim3 a) else

  if (edge_x_align -# inner_x_align) %# edge_x_stride /=# 0
  then except @(view dim3 a) else

  -- THe inner domain's interval is a subset of the outer domain's interval
  if not (subsetInterval inner_x_iv edge_x_iv)
  then except @(view dim3 a) else

  if not (subsetInterval inner_y_iv edge_y_iv)
  then except @(view dim3 a) else

  if not (subsetInterval inner_z_iv edge_z_iv)
  then except @(view dim3 a) else

  let type Sint = Stored int in

  -- If an element of the new map is an element of the inner view,
  -- its value is the inner view's; otherwise it is the outer view's
  view_generate @dim3 ShapeDict_dim3 @a rep edge_dom
  (\ (ix : Boxed (Tuple3 Sint Sint Sint)) -> a.

    case ix of boxed u_ix.
    case u_ix of tuple3 sz sy sx.
    case sz of stored z.
    case sy of stored y.
    case sx of stored x.

    -- Is this part of the inner view?
    let in_stride : bool =
          and (and (inLM z inner_z_lm) (inLM y inner_y_lm))
              (inLM x inner_x_lm) in
    let in_interval : bool =
          and (and (inInterval z inner_z_iv) (inInterval y inner_y_iv))
              (inInterval x inner_x_iv) in

    if and in_stride in_interval
    then inner_f ix
    else edge_f ix);


permute1D @(t : box -> box) @(a : box)
  (shape_dict : ShapeDict (shape t))
  (traversable : TraversableDict t)
  (rep_s : Repr (AsBare (t a)))
  (rep_a : Repr (AsBare a))
  (dom : dim1)
  (src : t (Boxed (Tuple2 (Stored int) (AsBare a))))
  -> Boxed (array1 (AsBare a))
  attribute(inline) =

  let type indexval = Tuple2 (Stored int) (AsBare a) in

  let type sh = shape t in
  case traversable of traversableDict traverse build.

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  let rep_tuple : Repr indexval =
        repr_Tuple2 @(Stored int) @(AsBare a) repr_int rep_a in

  -- Do a sequential in-place update
  case shape_flatten @(AsBox indexval)
       rep_tuple (traverse @(AsBox indexval) rep_tuple src) of {
    viewStream vw.
      boxed @(array1 (AsBare a))
      (permute1D_list_dim @(AsBare a) rep_a dom vw)

  ; sequenceStream sq.
      boxed @(array1 (AsBare a))
      (Sequence_permute1D @(AsBare a) rep_a dom sq)
  };


boxedPermute1D @(t : box -> box) @(a : box)
  (shape_dict : ShapeDict (shape t))
  (traversable : TraversableDict t)
  (rep_s : Repr (AsBare (t a)))
  (rep_a : Repr (AsBare a))
  (dom : dim1)
  (src : t (Boxed (Tuple2 (Stored int) (AsBare a))))
  -> Boxed (barray1 (AsBare a))
  attribute(inline) =

  let type indexval = Tuple2 (Stored int) (AsBare a) in

  let type sh = shape t in
  case traversable of traversableDict traverse build.

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  let rep_tuple : Repr indexval =
        repr_Tuple2 @(Stored int) @(AsBare a) repr_int rep_a in

  -- Do a sequential in-place update
  case shape_flatten @(AsBox indexval)
       rep_tuple (traverse @(AsBox indexval) rep_tuple src) of {
    viewStream vw.
      boxed @(barray1 (AsBare a))
      (boxedPermute1D_list_dim @(AsBare a) rep_a dom vw)

  ; sequenceStream sq.
      boxed @(barray1 (AsBare a))
      (Sequence_boxedPermute1D @(AsBare a) rep_a dom sq)
  };


fun_scatter @(t : box -> box) @(i r : box)
  (shape_dict : ShapeDict (shape t))
  (traversable : TraversableDict t)
  (repr_s : Repr (AsBare (t i)))
  (repr_i : Repr (AsBare i))
  (repr_r : Repr (AsBare r))
  (op : Scatter (AsBare r) (AsBare i))
  (src : t i)
  -> r
  attribute(inline) =

  let type sh = shape t in
  case traversable of traversableDict traverse build.

  case shape_dict of
    shapeDict index_repr slice_repr
    shape_member shape_intersect shape_flatten shape_generate
    shape_map shape_zipWith shape_zipWith3 shape_zipWith4 shape_slice.

  -- Do a sequential in-place update
  case shape_flatten @i repr_i (traverse @i repr_i src) of {
    viewStream vw.
      asbox @(AsBare r) repr_r
      (scatter_list_dim @(AsBare i) @(AsBare r) repr_i repr_r op vw)

  ; sequenceStream sq.
      asbox @(AsBare r) repr_r
      (Sequence_scatter @(AsBare i) @(AsBare r) repr_i repr_r op sq)
  };


histogram @(sh : box)
  (shape_dict : ShapeDict sh)
  (lo_bound : Boxed (Stored int))
  (hi_bound : Boxed (Stored int))
  (input : Stream sh (Boxed (Stored int)))
  -> Boxed (array1 (Stored int))
  attribute(inline) =

  let type Sint = Stored int in
  let type SNone = Stored NoneType in
  let sr : Scatter (array1 Sint) (Tuple2 Sint SNone) =
        array1Scatter @(AsBox Sint) @(AsBox SNone)
        repr_NoneType
        repr_int
        (mk_dim1 (interval (justVal @int (unboxIntValue lo_bound))
                           (justVal @int (unboxIntValue hi_bound)))
                 (linearMap 1 0))
        countingScatter in

  let traversable =
        traversableDict @(Stream sh)
        (\ @(a : box) (rep : Repr (AsBare a)) (x : Stream sh a)
           -> Stream sh a. x)
        (\ @(a : box) (rep : Repr (AsBare a)) (x : Stream sh a)
           -> Stream sh a. x) in

  -- For each input value x, create a tuple (x, None)
  let tupled_input =
        fun_map @(Stream sh)
                @(Boxed Sint) @(Boxed (Tuple2 Sint SNone))
                traversable
                shape_dict
                repr_int
                (repr_Tuple2 @Sint @SNone repr_int repr_NoneType)
                (\ (x : Boxed Sint) -> Boxed (Tuple2 Sint SNone).
                  boxed @(Tuple2 Sint SNone)
                  (tuple2 @Sint @SNone (asbare @Sint repr_int x)
                                       (stored @NoneType None)))
                input in

  fun_scatter @(Stream sh)
  @(Boxed (Tuple2 Sint SNone)) @(Boxed (array1 Sint))
  shape_dict
  traversable
  (repr_Box @(Stream sh (Boxed (Tuple2 Sint SNone))))
  (repr_Tuple2 @Sint @SNone repr_int repr_NoneType)
  (repr_array1 @(Stored int))
  sr
  tupled_input;

subscript : forall n : intindex, a : bare.
            SizeAlign a
         -> arr n a
         -> int
         -> a
         attribute(conlike);

-- Like subscript, but modifies an output pointer
subscript_out : forall n : intindex, a : bare.
                SizeAlign a
             -> OutPtr (arr n a)
             -> int
             -> OutPtr a;

-------------------------------------------------------------------------------
-- Other rewritable functions

-- Stream1_empty @(a : bare) (repr : Repr a) -> Stream1 a attribute(inline) =
--   sequenceStream @a (Sequence_empty @a repr);


Stream1_return @(a : box) (rep : Repr (AsBare a)) (x : a) -> Stream1 a
  attribute(inline) =
  sequenceStream @a (Sequence_return @(AsBare a) rep (asbare @(AsBare a) rep x));


Stream1_guard @(a : box)
  (rep : Repr (AsBare a))
  (condition : Boxed (Stored bool))
  (s : Stream1 a)
  -> Stream1 a
  attribute(inline) =
  let sq = Stream1ToSequence @a rep s in
  sequenceStream @a (Sequence_guard @(AsBare a) rep (unboxBoolValue condition) sq);


Stream1_bind @(a b : box)
  (repr_a : Repr (AsBare a))
  (repr_b : Repr (AsBare b))
  (s : Stream1 a)
  (t : a -> Stream1 b)
  -> Stream1 b
  attribute(inline) =
  let sq = Stream1ToSequence @a repr_a s in
  letfun
    sq_t (x : a) -> Sequence b = Stream1ToSequence @b repr_b (t x)
  in
  
  sequenceStream @b (Sequence_bind @(AsBare a) @(AsBare b) repr_a sq sq_t);


Sequence_empty @(a : bare) (rep : Repr a) -> Sequence (AsBox a)
  attribute(inline, inline_final) =
  let type st = Boxed (Stored NoneType) in
  sequence @(AsBox a) @st
  (boxed @(Stored NoneType) (stored @NoneType None))
  (\ (x : st) -> StreamNext st (AsBox a). streamEmpty @st @(AsBox a));


Sequence_return @(a : bare)
  (rep : Repr a)
  (ret : Init a)
  -> Sequence (AsBox a)
  attribute(inline, inline_final) =
  let type st = Boxed (Stored bool) in
  sequence @(AsBox a) @st
  (boxBoolValue False)
  (\ (depleted : st) -> StreamNext st (AsBox a).
     if unboxBoolValue depleted
     then streamEmpty @st @(AsBox a)
     else streamValue @st @(AsBox a)
     	  (boxed @(Stored bool) (stored @bool True))
	  (asbox @a rep ret));


Sequence_chain @(a : bare)
  (rep : Repr a)
  (s1 : Sequence (AsBox a))
  (s2 : Sequence (AsBox a))
  -> Sequence (AsBox a)
  attribute(inline, inline_final) =
  -- Create a stream consisting of all contents of s1 followed by all contents
  -- of s2
  case s1 of sequence @(state1 : box) (s1 : state1) f1.
  case s2 of sequence @(state2 : box) (s2 : state2) f2.

  let type state = ChainState state1 state2 in
  sequence @(AsBox a) @state (chainFromFirst @state1 @state2 s1 s2)
  (\ (s : state) -> StreamNext state (AsBox a).
     letfun
       pull_from_second (s2 : state2) -> StreamNext state (AsBox a) =
         -- Pull from second stream
         case f2 s2 of {
           streamValue (new_s2 : state2) (result : AsBox a).
             streamValue @state @(AsBox a) (chainFromNext @state1 @state2 new_s2) result
         ; streamEmpty.
             streamEmpty @state @(AsBox a)
         } in
     case s of {
       chainFromFirst (s1 : state1) (s2 : state2).
         -- Pull from first stream
         case f1 s1 of {
           streamValue (new_s1 : state1) (result : AsBox a).
             streamValue @state @(AsBox a) (chainFromFirst @state1 @state2 new_s1 s2) result
         ; streamEmpty.
             pull_from_second s2
         }
     ; chainFromNext (s2 : state2).
         pull_from_second s2
     });


Sequence_guard @(a : bare)
  (rep : Repr a) (condition : bool) (s : Sequence (AsBox a)) -> Sequence (AsBox a)
  attribute(inline) =
  if condition then s else Sequence_empty @a rep;


Sequence_bind @(bare_a bare_b : bare)
  (rep : Repr bare_a)
  (src : Sequence (AsBox bare_a))
  (trans : AsBox bare_a -> Sequence (AsBox bare_b))
  -> Sequence (AsBox bare_b)
  attribute(inline, inline_final) =
  case src of sequence @(src_st : box) src_state src_next.

  let type a = AsBox bare_a in
  let type b = AsBox bare_b in
  let type bind_state = BindState src_st a b in

  letfun {
    next_from_source (src_state : src_st) -> StreamNext bind_state b =
      case src_next src_state of {
        streamValue src_next_state src_value.
	  case trans src_value of
	    sequence @(trans_st : box) trans_state trans_next.
	  next_from_trans @trans_st src_next_state trans_state trans_next
      ; streamEmpty.
	  streamEmpty @bind_state @b
      };

    next_from_trans @(trans_st : box)
      (src_state : src_st)
      (trans_state : trans_st)
      (trans_next : trans_st -> StreamNext trans_st b)
      -> StreamNext bind_state b =
      case trans_next trans_state of {
        streamValue trans_next_state trans_value.
          let next_state : bind_state =
	        bindFromTrans @src_st @a @b @trans_st
		src_state trans_next_state trans_next in
          streamValue @bind_state @b next_state trans_value
      ; streamEmpty.
	  next_from_source src_state
      };

    next (state : bind_state) -> StreamNext bind_state b =
      case state of {
        bindFromSource (src_state : src_st).
	  next_from_source src_state
      ; bindFromTrans @(trans_st : box)
      	(src_state : src_st)
	(trans_state : trans_st)
	(trans_next : trans_st -> StreamNext trans_st b).
	  next_from_trans @trans_st src_state trans_state trans_next
      }
  } in

  sequence @b @bind_state (bindFromSource @src_st @a @b src_state) next;


-- A fused version of 'bind' and 'generate'.
Sequence_generate_bind @(a : bare)
  (shp : list_dim) (transformer : Boxed (Stored int) -> Sequence (AsBox a))
  -> Sequence (AsBox a)
  attribute(inline, inline_final) =
  Sequence_bind @(Stored int) @a repr_int
  (Sequence_generate @(Stored int) repr_int shp (copy @(Stored int) repr_int))
  transformer;


view_array1_build : forall a : bare.
                    Repr a
                 -> view dim1 (AsBox a)
                 -> Init (array1 a);

Sequence_list_build @(a : bare)
  (rep : Repr a) (sq : Sequence (AsBox a)) (ret : OutPtr (list a))
  -> Store
  attribute(inline, inline_sequential) =

  let type acc = Stored (ListBuilder a) in
  let repr_acc : Repr acc = repr_ListBuilder @a in

  -- Build a list by repeatedly appending to it
  append_build_list @a rep
  (\ (writer : Init a -> ListBuilder a -> ListBuilder a)
     (init_state : ListBuilder a)
     -> ListBuilder a.
     case stuckBox @acc (stored @(ListBuilder a) init_state) of
       stuckBox (stored_init_state : acc).

     -- The list-building process is a fold
     case stuckBox @acc
          (Sequence_fold @a @acc rep repr_acc
           (\ (local_state : acc) (item : a) (ret : OutPtr acc) -> Store.
              case local_state of
                stored (u_local_state : ListBuilder a).

              -- Call the writer to save this value to the list
              let u_new_state : ListBuilder a =
                    writer (copy @a rep item) u_local_state in

              stored @(ListBuilder a) u_new_state ret)
           stored_init_state
           sq) of
       stuckBox (stored_final_state : acc).
       case stored_final_state of stored final_state.
       final_state)
  ret;


Sequence_array1_build : forall a : bare.
		        Repr a
		     -> Sequence (AsBox a)
		     -> Init (array1 a);

llist_fold @(a r : bare)
  (repr_a : Repr a)
  (repr_r : Repr r)
  (f : a -> r -> Init r)
  (init : r)
  (source : llist a)
  (ret : OutPtr r)
  -> Store attribute(inline, inline_final) =

  letfun
    go (source : llist a) (acc : r) (ret : OutPtr r) -> Store =
      case source of {
        cons (h : a) (t : llist a).
          case stuckBox @r (f h acc) of stuckBox new_acc.
          go t new_acc ret
      ; nil. copy @r repr_r acc ret
      } in

  go source init ret;

-------------------------------------------------------------------------------
-- Loops

-- Parallelizable loop
doall : forall n : intindex, a b : bare.
        FIInt n
     -> (int -> Store)
     -> Store;

-- A doall loop that won't be parallelized
sequential_doall @(n : intindex) @(a b : bare)
     (count : FIInt n)
     (f : int -> Store)
     -> Store
     attribute(inline, inline_sequential) =

     doall @n @a @b count f;

-- Sequential loop
for @(N : intindex) @(acc : bare)
  (rep : Repr acc) (count : FIInt N) (init : acc)
  (f : int -> acc -> Init acc) (ret : OutPtr acc)
  -> Store
  attribute(inline, inline_final) =

  -- Unpack the indexed int
  case count of fiInt (bound : int).

  -- Main loop
  letfun
    loop (i : int) (x : acc) (r : OutPtr acc) -> Store =
      if i ==# bound
      then copy @acc rep x r
      else case boxed @acc (f i x) of boxed y. loop (i +# 1) y r
  in loop 0 init ret;


for_box @(N : intindex) @(acc : box)
  (count : FIInt N)
  (init : acc)
  (f : int -> acc -> acc)
  -> acc
  attribute(inline, inline_final) =

  -- Unpack the indexed int
  case count of fiInt (bound : int).

  -- Main loop
  letfun
    loop (i : int) (x : acc) -> acc =
      if i ==# bound
      then x
      else loop (i +# 1) (f i x)
  in loop 0 init;


parallel_doall @(N : intindex) @(a b : bare)
  (count : FIInt N)
  (f : int -> Store)
  -> Store
  attribute(inline, inline_sequential) =

  letfun
    do_range @(M : intindex)
      (lb : int) (range_count : FIInt M)
      -> Store =
    doall @M @b @b range_count
    (\ (range_i : int) -> Store. f (range_i +# lb))
  in
  blocked_doall @N @a @b count do_range;


parallel_doall2 : forall M N : intindex, a b : bare.
        FIInt M
     -> FIInt N
     -> (int -> int -> Store)
     -> Store;

-- Blocked parallel reduction, implemented in low-level.
blocked_1d_reduce :
    forall N : intindex, acc : box.
    FIInt N		-- Size of range
 -> (acc -> acc -> acc) -- Reducer
 -> acc			-- Initial value
 -> (forall M : intindex. int -> FIInt M -> acc -> acc)
    -- ^ Generate and combine a value on a part of the domain
 -> acc;

-- Blocked 2D parallel reduction
blocked_2d_reduce :
    forall M N : intindex, acc : box.
    FIInt M		-- Size of range
 -> FIInt N		-- Size of range
 -> (acc -> acc -> acc) -- Reducer
 -> acc			-- Initial value
 -> (forall M N : intindex. int -> FIInt M -> int -> FIInt N -> acc -> acc)
    -- ^ Generate and combine a value on a part of the domain
 -> acc;

-- Blocked parallel in-place reduction, implemented in low-level.

blocked_1d_reduceip :
    forall N : intindex, acc : box.
    FIInt N		-- Size of range
 -> (acc -> acc -> acc) -- Reducer
 -> (forall M : intindex. int -> FIInt M -> acc)
    -- ^ Generate and combine a value on a part of the domain
 -> acc;

-- Blocked parallel loop
blocked_doall :
    forall N : intindex, a b : bare.
    FIInt N
 -> (forall M : intindex. int -> FIInt M -> Store)
 -> Store;

-- Blocked 2D parallel loop
blocked_doall2 :
    forall M N : intindex, a b : bare.
    FIInt M
 -> FIInt N
 -> (forall M N : intindex. int -> FIInt M -> int -> FIInt N -> Store)
 -> Store;

-- Blocked parallel loop over a PBTree
blocked_PBTree_doall :
    forall a b : bare.
    PBTree a
 -> (int -> PBTree a -> Store)
 -> Store;
