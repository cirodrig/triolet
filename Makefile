
# Platform-specific settings
include config.mk

## Convert parameters into command line option strings

PACKAGE_FLAGS=$(foreach pkg, $(PACKAGES), -package $(pkg))
LIB_FLAGS=$(foreach lib, $(LIBS), -l$(lib))
INCLUDEDIR_FLAGS=-Isrc/program -I$(BUILDDIR) $(foreach dir, $(INCLUDEDIRS), -I$(dir))
LIBDIR_FLAGS=$(foreach dir, $(LIBDIRS), -L$(dir))

HS_HSC2HS_OPTS=$(HSC2HSFLAGS) $(INCLUDEDIR_FLAGS)
HS_C_OPTS=$(HCFLAGS) \
	-XMultiParamTypeClasses $(INCLUDEDIR_FLAGS) $(PACKAGE_FLAGS)
C_C_OPTS=$(CCFLAGS) $(INCLUDEDIR_FLAGS)
L_OPTS=$(LFLAGS) $(PACKAGE_FLAGS) $(LIDIR_FLAGS) $(LIB_FLAGS)

## File lists

PYON_C_SRCS=Main_c.c \
	PythonInterface/Python_c.c \
	PythonInterface/HsObject_c.c \
	Gluon/Gluon_c.c
PYON_C_GENERATED_SRCS=Parser/Driver_stub.c \
	Gluon/Gluon_stub.c
PYON_HS_SRCS=Main.hs \
	Parser/Driver.hs \
	Parser/Parser.hs \
	Parser/Output.hs \
	Parser/ParserSyntax.hs \
	Gluon/Gluon.hs \
	Gluon/Globals.hs \
	Gluon/Builtins/Pyon.hs \
	Gluon/Pyon/Syntax.hs \
	Gluon/Pyon/Rename.hs \
	Gluon/Pyon/Typecheck.hs

PYON_HS_GENERATED_SRCS=Paths_pyon.hs \
	PythonInterface/Python.hs \
	PythonInterface/HsObject.hs

PYON_HS_OBJECTS=$(patsubst %.hs, %.o, $(PYON_HS_SRCS) $(PYON_HS_GENERATED_SRCS))
PYON_C_OBJECTS=$(patsubst %.c, %.o, $(PYON_C_SRCS) $(PYON_C_GENERATED_SRCS))
PYON_OBJECTS=$(PYON_HS_OBJECTS) $(PYON_C_OBJECTS)

PYON_SCRIPTS=pyon_testsuite pyon_compile
PYON_GENERATED_SCRIPTS=$(foreach sc, $(PYON_SCRIPTS), build/scripts/$(sc))

PYON_TARGET=build/program/pyon

# Object files with full path
PYON_OBJECT_FILES=$(foreach obj, $(PYON_OBJECTS), $(BUILDDIR)/$(obj))

###############################################################################
# Targets

.PHONY : all install clean veryclean build_bin build_python build_scripts install_bin install_python install_scripts

all : build_bin build_python build_scripts

install : install_bin install_python install_scripts $(PYON_TARGET)

clean :
	rm -f src/pyon/data_dir.py
	if [ -d build ]; then rm -rf build; fi

veryclean : clean
	find src -name "*~" -exec rm {} ';'
	rm -f config.log
	rm -f config.status
	rm -f config.mk
	rm -f configure
	rm -rf autom4te.cache
	if [ -d bin ]; then rm -f bin/*; rmdir bin; fi

bin :
	mkdir bin

build :
	mkdir build

build_bin : $(PYON_TARGET)

build_python : src/pyon/data_dir.py
	python setup.py build

build_scripts : $(PYON_GENERATED_SCRIPTS)

install_bin : build_bin
	install -d $(bindir)
	install $(PYON_TARGET) $(bindir)/pyon

install_python : build_python
	python setup.py install --prefix=$(prefix) --exec-prefix=$(exec_prefix)

install_scripts : build_scripts
	install -d $(bindir)
	cd build/scripts; for sc in *; do install $${sc} $(bindir)/$${sc}; done

src/pyon/data_dir.py :
	echo "DATA_DIR=\"$(prefix)/share/pyon\" # Autogenerated" > src/pyon/data_dir.py

###############################################################################
# Program 'pyon'

# Dependences
$(BUILDDIR)/Main_c.o : $(BUILDDIR)/Parser/Driver_stub.h
$(BUILDDIR)/Main_c.o : $(SRCDIR)/PythonInterface/HsObject.h
$(BUILDDIR)/PythonInterface/HsObject.o : $(SRCDIR)/PythonInterface/HsObject.h
$(BUILDDIR)/Main.o : $(BUILDDIR)/Parser/Driver_stub.h
$(BUILDDIR)/Main.o : $(BUILDDIR)/PythonInterface/Python.hi
$(BUILDDIR)/Parser/Driver_stub.c \
 $(BUILDDIR)/Parser/Driver_stub.h \
 $(BUILDDIR)/Parser/Driver.o : $(BUILDDIR)/PythonInterface/Python.hi
$(BUILDDIR)/Parser/Driver_stub.c \
 $(BUILDDIR)/Parser/Driver_stub.h \
 $(BUILDDIR)/Parser/Driver.o : $(BUILDDIR)/Parser/Parser.hi
$(BUILDDIR)/Parser/Driver_stub.c \
 $(BUILDDIR)/Parser/Driver_stub.h \
 $(BUILDDIR)/Parser/Driver.o : $(BUILDDIR)/Parser/Output.hi
$(BUILDDIR)/Parser/Output.o : $(BUILDDIR)/PythonInterface/Python.hi
$(BUILDDIR)/Parser/Output.o : $(BUILDDIR)/Parser/ParserSyntax.hi
$(BUILDDIR)/Parser/Parser.o : $(BUILDDIR)/Parser/ParserSyntax.hi
$(BUILDDIR)/Gluon/Globals.o : $(BUILDDIR)/Gluon/Builtins/Pyon.hi
$(BUILDDIR)/Gluon/Gluon_stub.c \
 $(BUILDDIR)/Gluon/Gluon_stub.h \
 $(BUILDDIR)/Gluon/Gluon.o \
 : $(BUILDDIR)/PythonInterface/HsObject.o
$(BUILDDIR)/Gluon/Gluon_stub.c \
 $(BUILDDIR)/Gluon/Gluon_stub.h \
 $(BUILDDIR)/Gluon/Gluon.o \
 : $(BUILDDIR)/Gluon/Globals.o
$(BUILDDIR)/Gluon/Gluon_c.o : $(BUILDDIR)/Gluon/Gluon_stub.h
$(BUILDDIR)/Gluon/Builtins/Pyon.o : $(BUILDDIR)/Paths_pyon.hi
$(BUILDDIR)/Gluon/Pyon/Rename.o : $(BUILDDIR)/Gluon/Pyon/Syntax.hi
$(BUILDDIR)/Gluon/Pyon/Typecheck.o : $(BUILDDIR)/Gluon/Pyon/Syntax.hi
$(BUILDDIR)/Gluon/Pyon/Typecheck.o : $(BUILDDIR)/Gluon/Pyon/Rename.hi

# After invoking the compiler,
# touch interface files to ensure that their timestamps are updated
define PYON_COMPILE_HS_SOURCE
$(BUILDDIR)/$(patsubst %.hs,%.o,$(1)) : $(BUILDDIR)/$(1)
	$(HC) -c $$< -o $$@ -i$(BUILDDIR) $(HS_C_OPTS)
	touch $(BUILDDIR)/$(patsubst %.hs,%.hi,$(1))

endef

$(BUILDDIR)/PythonInterface/Python.hs : $(SRCDIR)/PythonInterface/Python.hsc
	mkdir -p $(BUILDDIR)/PythonInterface
	$(HSC2HS) $(HS_HSC2HS_OPTS) $< -o $@

$(BUILDDIR)/PythonInterface/HsObject.hs : $(SRCDIR)/PythonInterface/HsObject.hsc
	mkdir -p $(BUILDDIR)/PythonInterface
	$(HSC2HS) $(HS_HSC2HS_OPTS) $< -o $@

$(eval $(call PYON_COMPILE_HS_SOURCE,Main.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,PythonInterface/Python.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,PythonInterface/HsObject.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,Parser/Parser.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,Parser/Output.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,Parser/ParserSyntax.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,Gluon/Globals.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,Gluon/Builtins/Pyon.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,Gluon/Pyon/Syntax.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,Gluon/Pyon/Rename.hs))
$(eval $(call PYON_COMPILE_HS_SOURCE,Gluon/Pyon/Typecheck.hs))

# 'Gluon.hs' has multiple targets, so it needs a distinct rule
# Touch output files to ensure their timestamps are updated
$(BUILDDIR)/Gluon/Gluon_stub.c \
 $(BUILDDIR)/Gluon/Gluon_stub.h \
 $(BUILDDIR)/Gluon/Gluon.o : $(BUILDDIR)/Gluon/Gluon.hs
	$(HC) -c $< -o $(BUILDDIR)/Gluon/Gluon.o -i$(BUILDDIR) \
	 $(HS_C_OPTS)
	touch $(BUILDDIR)/Gluon/Gluon.hi
	touch $(BUILDDIR)/Gluon/Gluon_stub.c
	touch $(BUILDDIR)/Gluon/Gluon_stub.h

# 'Driver.hs' has multiple targets, so it needs a distinct rule
# Touch output files to ensure their timestamps are updated
$(BUILDDIR)/Parser/Driver_stub.c \
 $(BUILDDIR)/Parser/Driver_stub.h \
 $(BUILDDIR)/Parser/Driver.o : $(BUILDDIR)/Parser/Driver.hs
	$(HC) -c $< -o $(BUILDDIR)/Parser/Driver.o -i$(BUILDDIR) \
	 $(HS_C_OPTS)
	touch $(BUILDDIR)/Parser/Driver.hi
	touch $(BUILDDIR)/Parser/Driver_stub.c
	touch $(BUILDDIR)/Parser/Driver_stub.h

# Generate a file with path information
$(BUILDDIR)/Paths_pyon.hs :
	echo "{- Auto-generated source file -} module Paths_pyon where { import System.FilePath; getDataFileName :: String -> IO String; getDataFileName n = return (\"$(prefix)/share/pyon\" </> n) }" > $@

$(BUILDDIR)/Paths_pyon.o : $(BUILDDIR)/Paths_pyon.hs
	$(HC) -c $< -o $@ $(HS_C_OPTS)

$(BUILDDIR)/Main_c.o : $(SRCDIR)/Main_c.c
	$(CC) -c $< -o $@ $(C_C_OPTS)

$(BUILDDIR)/PythonInterface/Python_c.o : $(SRCDIR)/PythonInterface/Python_c.c
	mkdir -p $(BUILDDIR)/PythonInterface
	$(CC) -c $< -o $@ $(C_C_OPTS)

$(BUILDDIR)/PythonInterface/HsObject_c.o : $(SRCDIR)/PythonInterface/HsObject_c.c
	mkdir -p $(BUILDDIR)/PythonInterface
	$(CC) -c $< -o $@ $(C_C_OPTS)

$(BUILDDIR)/Gluon/Gluon_c.o : $(SRCDIR)/Gluon/Gluon_c.c
	mkdir -p $(BUILDDIR)/PythonInterface
	$(CC) -c $< -o $@ $(C_C_OPTS)

$(BUILDDIR)/Parser/Driver_stub.o : $(BUILDDIR)/Parser/Driver_stub.c
	$(CC) -c $< -o $@ $(C_C_OPTS)

$(BUILDDIR)/Gluon/Gluon_stub.o : $(BUILDDIR)/Gluon/Gluon_stub.c
	$(CC) -c $< -o $@ $(C_C_OPTS)

$(PYON_TARGET) : bin $(PYON_OBJECT_FILES)
	$(HC) $(PYON_OBJECT_FILES) -o $@ $(L_OPTS)

###############################################################################
# Generic rules

# To build a script, insert a line telling the shell how to execute the script
build/scripts/% : src/scripts/%
	mkdir -p build/scripts
	echo "#! $(bindir)/pyon" > $@
	cat $< >> $@

$(BUILDDIR)/%.hs : $(SRCDIR)/%.hs
	mkdir -p $(dir $@)
	cp $< $@

%.hi : %.o ;
