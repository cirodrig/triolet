
module core.internal.memory_py;

#include "rts.h"
#include "memory_py.h"
#include "apply_py.h"
#include "structures.h"
#include "new_pyasm_records.h"

// Deallocate an object.  Calls 'triolet_dealloc'.
function deallocF (pointer p) -> () {
  () = () primcall triolet_dealloc(p);
  ();
};

// Copy 1 byte
function inline copy1F (pointer src, pointer dst) -> unit {
  !dst = uint8 load src;
  nil;
};

// Copy 2 bytes
function inline copy2F (pointer src, pointer dst) -> unit {
  !dst = uint16 load src;
  nil;
};

// Copy 4 bytes
function inline copy4F (pointer src, pointer dst) -> unit {
  !dst = uint32 load src;
  nil;
};

// Copy 8 bytes
function inline copy8F (pointer src, pointer dst) -> unit {
  !dst = uint64 load src;
  nil;
};

// Copy some bytes
function inline blockcopy (SA sa, cursor src, pointer dst) -> unit {
  SA {sz, al, pointerless} = sa;
  _ = pointer primcall memcpy (dst, src as pointer, sz as word);
  nil;
};
