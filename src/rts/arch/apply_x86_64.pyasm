
// Given a PAP or function, get the function
procedure pap_to_function (owned obj0) -> owned {

  // Check header; is it a function?
  r = while (owned obj = obj0) (obj @! PAP(unit).papTag == null) {
    // This is a PAP; get the operator
    obj @! PAP(unit).operator;
  };
  r;
};

// Get the arity of a PAP or function
procedure inline fun_arity(owned obj) -> uint16 {
  obj_tag = obj @! PAP(unit).papTag;
  if (obj_tag == null) {
    // This is a PAP
    obj @! PAP(unit).arity;
  }
  else {
    // This is a function
    // Read from the info table
    obj_tag @! InfoTable.arity;
  };
};

// Call a PAP that includes all arguments
procedure inline call_pap(owned pap, pointer ret) -> () {
  fun = owned primcall pap_to_function(pap);
  fun_info = fun @! Function.info;
  () primcall (fun_info @! InfoTable.inexact) (pap, ret);
};

// Evaluate a PAP if it has been applied to all arguments.
// Otherwise, copy the PAP reference into 'ret'.
procedure inline eval_pap(uint16 arity, owned pap, pointer ret) -> () {
  if (arity == uint16 0) {
    () primcall call_pap(pap, ret);
  }
  else {
    !ret = pap;
    ();
  };
};

// Evaluate a PAP if it has been applied to all arguments.
// The 'ret' pointer is used as temporary storage.
// Otherwise, return the PAP.
procedure inline eval_pap_f(uint16 arity, owned pap, pointer ret) -> owned {
  if (arity == uint16 0) {
    () = () primcall call_pap(pap, ret);
    owned load ret;
  }
  else {
    pap;
  };
};

///////////////////////////////////////////////////////////////////////////////
// Apply functions.
//
// All functions apply 'obj' to 'arg', and either return a new object or
// write their return value to the given address.
procedure apply_u_f (owned obj, unit _) -> owned {
  data owned ret; // Temporary storage for return value
  !ret = null as owned;

  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(unit);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_u,
                            null, obj, arity, nil };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  owned primcall eval_pap_f(arity, new_pap, ret);
};

procedure apply_u (owned obj, unit _, pointer ret) -> () {
  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(unit);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_u,
                            null, obj, arity, nil };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  () primcall eval_pap(arity, new_pap, ret);
};

procedure apply_p_f (owned obj, pointer arg) -> owned {
  data owned ret; // Temporary storage for return value
  !ret = null as owned;

  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(pointer);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_p,
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  owned primcall eval_pap_f(arity, new_pap, ret);
};

procedure apply_p (owned obj, pointer arg, pointer ret) -> () {
  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(pointer);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_p,
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  () primcall eval_pap(arity, new_pap, ret);
};

procedure apply_o_f (owned obj, owned arg) -> owned {
  data owned ret; // Temporary storage for return value
  !ret = null as owned;

  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(owned);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_o,
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  owned primcall eval_pap_f(arity, new_pap, ret);
};

procedure apply_o (owned obj, owned arg, pointer ret) -> () {
  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(owned);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_o,
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  () primcall eval_pap(arity, new_pap, ret);
};

procedure apply_c_f (owned obj, cursor arg) -> owned {
  data owned ret; // Temporary storage for return value
  !ret = null as owned;

  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(cursor);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_c,
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  owned primcall eval_pap_f(arity, new_pap, ret);
};

procedure apply_c (owned obj, cursor arg, pointer ret) -> () {
  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(cursor);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_c,
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  () primcall eval_pap(arity, new_pap, ret);
};

procedure apply_i32_f (owned obj, int32 arg) -> owned {
  data owned ret; // Temporary storage for return value
  !ret = null as owned;

  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(int32);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_i32,
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  owned primcall eval_pap_f(arity, new_pap, ret);
};

procedure apply_i32 (owned obj, int32 arg, pointer ret) -> () {
  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(int32);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { typeObject_PAP_i32,
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  () primcall eval_pap(arity, new_pap, ret);
};

procedure apply_f32_f (owned obj, float arg) -> owned {
  data owned ret; // Temporary storage for return value
  !ret = null as owned;

  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(float);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { null as owned,  // FIXME: object header
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  owned primcall eval_pap_f(arity, new_pap, ret);
};

procedure apply_f32 (owned obj, float arg, pointer ret) -> () {
  arity = uint16 primcall fun_arity(obj) - uint16 1;

  // Create a new PAP
  typedef pap_type = PAP(float);
  new_pap_ptr = pointer primcall triolet_alloc (sizeof pap_type);
  !new_pap_ptr = pap_type { null as owned,  // FIXME: object header
                            null, obj, arity, arg };
  new_pap = new_pap_ptr as owned;

  // Evaluate if it's fully applied
  () primcall eval_pap(arity, new_pap, ret);
};

///////////////////////////////////////////////////////////////////////////////
// Type objects

data owned typeObject_PAP_u = TypeObject_mem {
  typeObject_typeObject,
  uint 0,
  PAP_u_serialize,
  PAP_u_deserialize
};

function PAP_u_serialize (owned obj, owned buf, unit dummy) -> unit {
#ifdef PRINT_PUTS
  () = () primcall triolet_db_int(int 210);
#endif
  typedef pap_type = PAP(unit);
  _ = unit call putBoxedObject (obj @! pap_type.operator, buf, dummy);
  _ = unit call putUint (obj @! pap_type.arity as uint, buf, dummy);
  nil;
};

function PAP_u_deserialize (owned type_object, cursor buffer) -> ReadResult(owned) {
#ifdef PRINT_GETS
  () = () primcall triolet_db_int(int 110);
#endif
  typedef pap_type = PAP(unit);
  ReadResult(owned) {buffer2, operator} =
    ReadResult(owned) call getBoxedObject (buffer);

  ReadResult(uint) {buffer3, arity} =
    ReadResult(uint) call getUint (buffer2);

  p = pointer primcall triolet_alloc (sizeof pap_type);
  p @! pap_type.header = type_object;
  p @! pap_type.papTag = null;
  p @! pap_type.operator = operator;
  p @! pap_type.arity = arity as uint16;

  ReadResult(owned) {buffer3, p as owned};
};

data owned typeObject_PAP_p = TypeObject_mem {
  typeObject_typeObject,
  uint 0,
  PAP_p_serialize,
  PAP_p_deserialize
};

function PAP_p_serialize (owned obj, owned buf, unit dummy) -> unit {
#ifdef PRINT_PUTS
  () = () primcall triolet_db_int(int 211);
#endif
  typedef pap_type = PAP(pointer);
  _ = unit call putBoxedObject (obj @! pap_type.operator, buf, dummy);
  _ = unit call putUint (obj @! pap_type.arity as uint, buf, dummy);
  _ = unit call putPointer (obj @! pap_type.operand, buf, dummy);
  nil;
};

function PAP_p_deserialize (owned type_object, cursor buffer) -> ReadResult(owned) {
#ifdef PRINT_GETS
  () = () primcall triolet_db_int(int 111);
#endif
  typedef pap_type = PAP(pointer);
  ReadResult(owned) {buffer2, operator} =
    ReadResult(owned) call getBoxedObject (buffer);

  ReadResult(uint) {buffer3, arity} =
    ReadResult(uint) call getUint (buffer2);

  ReadResult(pointer) {buffer4, operand} =
    ReadResult(pointer) call getPointer (buffer3);

  p = pointer primcall triolet_alloc (sizeof pap_type);
  p @! pap_type.header = type_object;
  p @! pap_type.papTag = null;
  p @! pap_type.operator = operator;
  p @! pap_type.arity = arity as uint16;
  p @! pap_type.operand = operand;

  ReadResult(owned) {buffer4, p as owned};
};

data owned typeObject_PAP_o = TypeObject_mem {
  typeObject_typeObject,
  uint 0,
  PAP_o_serialize,
  PAP_o_deserialize
};

function PAP_o_serialize (owned obj, owned buf, unit dummy) -> unit {
#ifdef PRINT_PUTS
  () = () primcall triolet_db_int(int 212);
#endif
  typedef pap_type = PAP(owned);
  _ = unit call putBoxedObject (obj @! pap_type.operator, buf, dummy);
  _ = unit call putUint (obj @! pap_type.arity as uint, buf, dummy);
  _ = unit call putBoxedObject (obj @! pap_type.operand, buf, dummy);
  nil;
};

function PAP_o_deserialize (owned type_object, cursor buffer) -> ReadResult(owned) {
#ifdef PRINT_GETS
  () = () primcall triolet_db_int(int 112);
#endif
  typedef pap_type = PAP(owned);
  ReadResult(owned) {buffer2, operator} =
    ReadResult(owned) call getBoxedObject (buffer);

  ReadResult(uint) {buffer3, arity} =
    ReadResult(uint) call getUint (buffer2);

  ReadResult(owned) {buffer4, operand} =
    ReadResult(owned) call getBoxedObject (buffer3);

  p = pointer primcall triolet_alloc (sizeof pap_type);
  p @! pap_type.header = type_object;
  p @! pap_type.papTag = null;
  p @! pap_type.operator = operator;
  p @! pap_type.arity = arity as uint16;
  p @! pap_type.operand = operand;

  ReadResult(owned) {buffer4, p as owned};
};

data owned typeObject_PAP_c = TypeObject_mem {
  typeObject_typeObject,
  uint 0,
  PAP_c_serialize,
  PAP_c_deserialize
};

function PAP_c_serialize (owned obj, owned buf, unit dummy) -> unit {
#ifdef PRINT_PUTS
  () = () primcall triolet_db_int(int 213);
#endif
  typedef pap_type = PAP(cursor);
  _ = unit call putBoxedObject (obj @! pap_type.operator, buf, dummy);
  _ = unit call putUint (obj @! pap_type.arity as uint, buf, dummy);
  _ = unit call putCursor (obj @! pap_type.operand, buf, dummy);
  nil;
};

function PAP_c_deserialize (owned type_object, cursor buffer) -> ReadResult(cursor) {
#ifdef PRINT_GETS
  () = () primcall triolet_db_int(int 113);
#endif
  typedef pap_type = PAP(cursor);

  ReadResult(owned) {buffer2, operator} =
    ReadResult(owned) call getBoxedObject (buffer);

  ReadResult(uint) {buffer3, arity} =
    ReadResult(uint) call getUint (buffer2);

  ReadResult(cursor) {buffer4, operand} =
    ReadResult(cursor) call getCursor (buffer3);

  p = pointer primcall triolet_alloc (sizeof pap_type);
  p @! pap_type.header = type_object;
  p @! pap_type.papTag = null;
  p @! pap_type.operator = operator;
  p @! pap_type.arity = arity as uint16;
  p @! pap_type.operand = operand;

  ReadResult(owned) {buffer4, p as owned};
};

data owned typeObject_PAP_i32 = TypeObject_mem {
  typeObject_typeObject,
  uint 0,
  PAP_i32_serialize,
  PAP_i32_deserialize
};

function PAP_i32_serialize (owned obj, owned buf, unit dummy) -> unit {
#ifdef PRINT_PUTS
  () = () primcall triolet_db_int(int 214);
#endif
  typedef pap_type = PAP(int32);
  _ = unit call putBoxedObject (obj @! pap_type.operator, buf, dummy);
  _ = unit call putUint (obj @! pap_type.arity as uint, buf, dummy);

#if INT_SIZE != 4
# error "Unexpected int size"
#endif
  _ = unit call putInt (obj @! pap_type.operand, buf, dummy);
  nil;
};

function PAP_i32_deserialize (owned type_object, cursor buffer) -> ReadResult(cursor) {
#ifdef PRINT_GETS
  () = () primcall triolet_db_int(int 114);
#endif
  typedef pap_type = PAP(int32);
  ReadResult(owned) {buffer2, operator} =
    ReadResult(owned) call getBoxedObject (buffer);

  ReadResult(uint) {buffer3, arity} =
    ReadResult(uint) call getUint (buffer2);

  ReadResult(int32) {buffer4, operand} =
    ReadResult(int32) call getInt (buffer3);

  p = pointer primcall triolet_alloc (sizeof pap_type);
  p @! pap_type.header = type_object;
  p @! pap_type.papTag = null;
  p @! pap_type.operator = operator;
  p @! pap_type.arity = arity as uint16;
  p @! pap_type.operand = operand;

  ReadResult(owned) {buffer4, p as owned};
};

data owned typeObject_PAP_f32 = TypeObject_mem {
  typeObject_typeObject,
  uint 0,
  PAP_f32_serialize,
  PAP_f32_deserialize
};

function PAP_f32_serialize (owned obj, owned buf, unit dummy) -> unit {
#ifdef PRINT_PUTS
  () = () primcall triolet_db_int(int 215);
#endif
  typedef pap_type = PAP(float);
  _ = unit call putBoxedObject (obj @! pap_type.operator, buf, dummy);
  _ = unit call putUint (obj @! pap_type.arity as uint, buf, dummy);

  _ = unit call putFloat (obj @! pap_type.operand, buf, dummy);
  nil;
};

function PAP_f32_deserialize (owned type_object, cursor buffer) -> ReadResult(cursor) {
#ifdef PRINT_GETS
  () = () primcall triolet_db_int(int 115);
#endif
  typedef pap_type = PAP(float);
  ReadResult(owned) {buffer2, operator} =
    ReadResult(owned) call getBoxedObject (buffer);

  ReadResult(uint) {buffer3, arity} =
    ReadResult(uint) call getUint (buffer2);

  ReadResult(float) {buffer4, operand} =
    ReadResult(float) call getFloat (buffer3);

  p = pointer primcall triolet_alloc (sizeof pap_type);
  p @! pap_type.header = type_object;
  p @! pap_type.papTag = null;
  p @! pap_type.operator = operator;
  p @! pap_type.arity = arity as uint16;
  p @! pap_type.operand = operand;

  ReadResult(owned) {buffer4, p as owned};
};
