
module pyon.internal.structures;

#include "pyasm.h"
#include "memory_py.h"
#include "apply_py.h"
#include "structures.h"
#include "pyasm_records.h"

// Parameter-passing convention dictionary of ints
data pointer int_pass_conv = PassConv {
  sizeof int32,
  alignof int32,
  copy4F,
  dummy_finalizer
};

// Construct an Additive dictionary
function additiveDict
  (unit _, pointer repr,
   owned add, owned sub, owned negate, pointer zero, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  typedef dictionary = AdditiveDict(bytes(size, align));

  ret @! dictionary.add = add;
  ret @! dictionary.subtract = sub;
  ret @! dictionary.negate = negate;
  () call (repr @! PassConv.copy) (zero, ret @ dictionary.zero);
};

function copy_AdditiveDict (pointer repr, pointer src, pointer dst) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  typedef dictionary = AdditiveDict(bytes(size, align));

  dst @! dictionary.add = src @! dictionary.add;
  dst @! dictionary.subtract = src @! dictionary.subtract;
  dst @! dictionary.negate = src @! dictionary.negate;
  () call (repr @! PassConv.copy)
    (src @ dictionary.zero, dst @ dictionary.zero);
};

#if 0
function finalize_AdditiveDict (pointer p) -> () {
  DECREF(p @! AdditiveDict.zero as pointer)
  DECREF(p @! AdditiveDict.add as pointer)
  DECREF(p @! AdditiveDict.subtract as pointer)
  ();
};
#endif