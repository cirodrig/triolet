
module pyon.internal.structures;

#include "rts.h"
#include "memory_py.h"
#include "apply_py.h"
#include "structures.h"
#include "list.h"
import procedure exit (int) -> ();

#include "pyasm_records.h"

// Representation of Repr objects
data pointer repr_Repr_value = PassConv {
  sizeof PassConv,
  alignof PassConv,
  copy_PassConv,
  dummy_finalizer
};

// Return the representation of a Repr object.  The parameter is a type
// parameter.
function inline repr_Repr (unit _) -> pointer {
  repr_Repr_value;
};

// Parameter-passing convention dictionary of ints
data pointer repr_int = PassConv {
  sizeof int32,
  alignof int32,
  copy4F,
  dummy_finalizer
};

// Parameter-passing convention dictionary of floats
data pointer repr_float = PassConv {
  sizeof float,
  alignof float,
  copy4F,
  dummy_finalizer
};

// Parameter-passing convention dictionary of bool
data pointer repr_bool = PassConv {
  sizeof bool,
  alignof bool,
  copy1F,
  dummy_finalizer
};

function copy_PassConv (unit _, pointer src, pointer dst) -> () {
  dst @! PassConv.size = src @! PassConv.size;
  dst @! PassConv.align = src @! PassConv.align;
  dst @! PassConv.copy = src @! PassConv.copy;
  dst @! PassConv.finalize = src @! PassConv.finalize;
  ();
};

function inline repr_PyonTuple2 (unit _, unit _,
                                 pointer repr1, pointer repr2,
                                 pointer ret) -> () {
  size1 = repr1 @! PassConv.size;
  align1 = repr1 @! PassConv.align;
  size2 = repr2 @! PassConv.size;
  align2 = repr2 @! PassConv.align;
  typedef tuple = PyonTuple2(bytes(value size1, value align1), bytes(value size2, value align2));

  ret @! PassConv.size = sizeof tuple;
  ret @! PassConv.align = alignof tuple;
  ret @! PassConv.copy = owned call copy_PyonTuple2
    (repr1 @! PassConv.copy, repr2 @! PassConv.copy,
     size1, align1, size2, align2);
  ret @! PassConv.finalize = dummy_finalizer;
  ();
};

function inline copy_PyonTuple2(owned copy1, owned copy2,
                         word size1, word align1, word size2, word align2,
                         pointer src, pointer dst) -> () {
  typedef tuple = PyonTuple2(bytes(value size1, value align1), bytes(value size2, value align2));
  () = () call copy1 (src @ tuple.member1, dst @ tuple.member1);
  () call copy2 (src @ tuple.member2, dst @ tuple.member2);
};

data pointer OpaqueTraversableDict_list = TraversableDict {
  list_traverse,
  list_build
};

function inline complex_pass_conv (unit _, pointer repr, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  typedef cpx = complex(bytes(value size, value align));

  ret @! PassConv.size = sizeof cpx;
  ret @! PassConv.align = alignof cpx;
  ret @! PassConv.copy =
      owned call copy_complex (size, align, repr @! PassConv.copy);
  ret @! PassConv.finalize =
      owned call finalize_complex (size, align, repr @! PassConv.finalize);
  ();
};

function inline copy_complex
  (word size, word align, owned copy_member, pointer src, pointer dst) -> () {
  typedef cpx = complex(bytes(value size, value align));
  () = () call copy_member (src @ cpx.real, dst @ cpx.real);
  () = () call copy_member (src @ cpx.imag, dst @ cpx.imag);
  ();
};

function finalize_complex
  (word size, word align, owned finalize_member, pointer self) -> () {
  // Not implemented
  ();
};

function inline repr_AdditiveDict (unit _, pointer repr, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  copy = repr @! PassConv.copy;
  typedef dictionary = AdditiveDict(bytes(value size, value align));

  ret @! PassConv.size = sizeof dictionary;
  ret @! PassConv.align = alignof dictionary;
  ret @! PassConv.copy = owned call AdditiveDict_copy (size, align, copy);
  ret @! PassConv.finalize = dummy_finalizer;
  ();
};

function AdditiveDict_copy
  (word size, word align, owned copy_value, pointer src, pointer dst) -> () {
  typedef dictionary = AdditiveDict(bytes(value size, value align));

  dst @! dictionary.add = src @! dictionary.add;
  dst @! dictionary.subtract = src @! dictionary.subtract;
  dst @! dictionary.negate = src @! dictionary.negate;
  () call (copy_value) (src @ dictionary.zero, dst @ dictionary.zero);  
};

function inline repr_MultiplicativeDict
  (unit _, pointer value_repr, pointer ret) -> () {
  size = value_repr @! PassConv.size;
  align = value_repr @! PassConv.align;
  copy = value_repr @! PassConv.copy;
  typedef dictionary = MultiplicativeDict(bytes(value size, value align));

  ret @! PassConv.size = sizeof dictionary;
  ret @! PassConv.align = alignof dictionary;
  ret @! PassConv.copy = owned call MultiplicativeDict_copy (size, align, copy);
  ret @! PassConv.finalize = dummy_finalizer;
  ();
};

function MultiplicativeDict_copy
  (word size, word align, owned copy_value, pointer src, pointer dst) -> () {
  typedef dictionary = MultiplicativeDict(bytes(value size, value align));

  () = () call AdditiveDict_copy(size, align, copy_value,
                                 src @ dictionary.additive,
                                 dst @ dictionary.additive);
  dst @! dictionary.mul = src @! dictionary.mul;
  dst @! dictionary.fromInt = src @! dictionary.fromInt;
  () call (copy_value) (src @ dictionary.one, dst @ dictionary.one);
};

// Construct an Additive dictionary
function inline additiveDict
  (unit _, pointer repr,
   owned add, owned sub, owned negate, owned write_zero, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  typedef dictionary = AdditiveDict(bytes(value size, value align));

  ret @! dictionary.add = add;
  ret @! dictionary.subtract = sub;
  ret @! dictionary.negate = negate;
  () call write_zero (ret @ dictionary.zero);
};

function multiplicativeDict
  (unit _, pointer repr,
   owned write_additive,
   owned mul, owned from_int, owned write_one, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  typedef dictionary = MultiplicativeDict(bytes(value size, value align));

  () = () call write_additive (ret @ dictionary.additive);
  ret @! dictionary.mul = mul;
  ret @! dictionary.fromInt = from_int;
  () call write_one (ret @ dictionary.one);
};

function inline additiveDict_complex
  (unit type, pointer member_additive, pointer ret) -> ()
{
  () primcall exit (int -1);
  // FIXME
/*
  member_size = member_additive @! AdditiveDict(unit).repr.size;
  member_align = member_additive @! AdditiveDict(unit).repr.align;
  typedef member = bytes(value member_size, value member_align);
  typedef member_dict = AdditiveDict(member);

  member_copy = member_additive @! member_dict.repr.copy;
  typedef cpx = complex(member);
  typedef dictionary = AdditiveDict(cpx);

  () = () call complex_pass_conv
    (type, member_additive @ member_dict.repr, ret @ dictionary.repr);

  ret @! dictionary.add =
    owned call complex_add (member_size, member_align,
                            member_additive @! member_dict.add);
  ret @! dictionary.subtract =
    owned call complex_sub (member_size, member_align,
                            member_additive @! member_dict.subtract);
  ret @! dictionary.negate =
    owned call complex_negate (member_size, member_align,
                               member_additive @! member_dict.negate);
  () = () call member_copy (ret @ dictionary.zero.real,
                            member_additive @ member_dict.zero);
  () = () call member_copy (ret @ dictionary.zero.imag,
                            member_additive @ member_dict.zero);
  (); */
};

function inline makeComplex(float re, float im, pointer ret) -> () {
  typedef cfloa = complex (float);
  ret @! cfloa.real = re;
  ret @! cfloa.imag = im;
  ();
};

function inline complex_add(word size, word align, owned member_add,
                     pointer x, pointer y, pointer ret) -> () {
  typedef cpx = complex(bytes(value size, value align));
  () = () call member_add (x @ cpx.real, y @ cpx.real, ret @ cpx.real);
  () call member_add (x @ cpx.imag, y @ cpx.imag, ret @ cpx.imag);
};

function inline complex_sub(word size, word align, owned member_sub,
                     pointer x, pointer y, pointer ret) -> () {
  typedef cpx = complex(bytes(value size, value align));
  () = () call member_sub (x @ cpx.real, y @ cpx.real, ret @ cpx.real);
  () call member_sub (x @ cpx.imag, y @ cpx.imag, ret @ cpx.imag);
};

function inline complex_negate(word size, word align, owned member_negate,
                        pointer x, pointer ret) -> () {
  typedef cpx = complex(bytes(value size, value align));
  () = () call member_negate (x @ cpx.real, ret @ cpx.real);
  () call member_negate (x @ cpx.imag, ret @ cpx.imag);
};