
module pyon.internal.structures;

#include "pyasm.h"
#include "memory_py.h"
#include "apply_py.h"
#include "structures.h"
#include "pyasm_records.h"

// Parameter-passing convention dictionary of ints
data pointer int_pass_conv = PassConv {
  sizeof int32,
  alignof int32,
  copy4F,
  dummy_finalizer
};

data pointer PassConv_pass_conv = PassConv {
  sizeof PassConv,
  alignof PassConv,
  copy_PassConv,
  dummy_finalizer
};

function copy_PassConv (unit _, pointer src, pointer dst) -> () {
  dst @! PassConv.size = src @! PassConv.size;
  dst @! PassConv.align = src @! PassConv.align;
  dst @! PassConv.copy = src @! PassConv.copy;
  dst @! PassConv.finalize = src @! PassConv.finalize;
  ();
};

function AdditiveDict_pass_conv (unit _, pointer repr, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  copy = repr @! PassConv.copy;
  finalize = repr @! PassConv.finalize;
  typedef dictionary = AdditiveDict(bytes(size, align));

  ret @! PassConv.size = sizeof dictionary;
  ret @! PassConv.align = alignof dictionary;
  ret @! PassConv.copy = owned call AdditiveDict_copy (size, align, copy);
  ret @! PassConv.finalize = dummy_finalizer;
  ();
};

function AdditiveDict_copy
  (word size, word align, owned copy_zero, pointer src, pointer dst) -> () {
  typedef dictionary = AdditiveDict(bytes(size, align));

  dst @! dictionary.repr.size = src @! dictionary.repr.size;
  dst @! dictionary.repr.align = src @! dictionary.repr.align;
  dst @! dictionary.repr.copy = src @! dictionary.repr.copy;
  dst @! dictionary.repr.finalize = src @! dictionary.repr.finalize;
  dst @! dictionary.add = src @! dictionary.add;
  dst @! dictionary.subtract = src @! dictionary.subtract;
  dst @! dictionary.negate = src @! dictionary.negate;
  () call (copy_zero) (src @ dictionary.zero, dst @ dictionary.zero);  
};


// Construct an Additive dictionary
function additiveDict
  (unit _, pointer repr,
   owned add, owned sub, owned negate, pointer zero, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  typedef dictionary = AdditiveDict(bytes(size, align));

  ret @! dictionary.repr.size = repr @! PassConv.size;
  ret @! dictionary.repr.align = repr @! PassConv.align;
  ret @! dictionary.repr.copy = repr @! PassConv.copy;
  ret @! dictionary.repr.finalize = repr @! PassConv.finalize;
  ret @! dictionary.add = add;
  ret @! dictionary.subtract = sub;
  ret @! dictionary.negate = negate;
  () call (repr @! PassConv.copy) (zero, ret @ dictionary.zero);
};

#if 0
function finalize_AdditiveDict (pointer p) -> () {
  DECREF(p @! AdditiveDict.zero as pointer)
  DECREF(p @! AdditiveDict.add as pointer)
  DECREF(p @! AdditiveDict.subtract as pointer)
  ();
};
#endif