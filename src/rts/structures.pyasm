
module pyon.internal.structures;

#include "pyasm.h"
#include "memory_py.h"
#include "apply_py.h"
#include "structures.h"
#include "pyasm_records.h"

// Parameter-passing convention dictionary of ints
data pointer int_pass_conv = PassConv {
  sizeof int32,
  alignof int32,
  copy4F,
  dummy_finalizer
};

// Parameter-passing convention dictionary of floats
data pointer float_pass_conv = PassConv {
  sizeof float,
  alignof float,
  copy4F,
  dummy_finalizer
};

// Parameter-passing convention dictionary of itself
data pointer PassConv_pass_conv = PassConv {
  sizeof PassConv,
  alignof PassConv,
  copy_PassConv,
  dummy_finalizer
};

function copy_PassConv (unit _, pointer src, pointer dst) -> () {
  dst @! PassConv.size = src @! PassConv.size;
  dst @! PassConv.align = src @! PassConv.align;
  dst @! PassConv.copy = src @! PassConv.copy;
  dst @! PassConv.finalize = src @! PassConv.finalize;
  ();
};

function AdditiveDict_pass_conv (unit _, pointer repr, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  copy = repr @! PassConv.copy;
  typedef dictionary = AdditiveDict(bytes(size, align));

  ret @! PassConv.size = sizeof dictionary;
  ret @! PassConv.align = alignof dictionary;
  ret @! PassConv.copy = owned call AdditiveDict_copy (size, align, copy);
  ret @! PassConv.finalize = dummy_finalizer;
  ();
};

function AdditiveDict_copy
  (word size, word align, owned copy_zero, pointer src, pointer dst) -> () {
  typedef dictionary = AdditiveDict(bytes(size, align));

  () = () call copy_PassConv(nil, src @ dictionary.repr, dst @ dictionary.repr);
  dst @! dictionary.add = src @! dictionary.add;
  dst @! dictionary.subtract = src @! dictionary.subtract;
  dst @! dictionary.negate = src @! dictionary.negate;
  () call (copy_zero) (src @ dictionary.zero, dst @ dictionary.zero);  
};

function MultiplicativeDict_pass_conv
  (unit _, pointer additive_dict, pointer ret) -> () {
  repr = additive_dict @ AdditiveDict(unit).repr;
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  copy = repr @! PassConv.copy;
  typedef dictionary = MultiplicativeDict(bytes(size, align));

  ret @! PassConv.size = sizeof dictionary;
  ret @! PassConv.align = alignof dictionary;
  ret @! PassConv.copy = owned call MultiplicativeDict_copy (size, align, copy);
  ret @! PassConv.finalize = dummy_finalizer;
  ();
};

function MultiplicativeDict_copy
  (word size, word align, owned copy_one, pointer src, pointer dst) -> () {
  typedef dictionary = MultiplicativeDict(bytes(size, align));

  () = () call AdditiveDict_copy(size, align, copy_one,
                                 src @ dictionary.additive,
                                 dst @ dictionary.additive);
  dst @! dictionary.mul = src @! dictionary.mul;
  dst @! dictionary.fromInt = src @! dictionary.fromInt;
  () call (copy_one) (src @ dictionary.one, dst @ dictionary.one);
};

// Construct an Additive dictionary
function additiveDict
  (unit _, pointer repr,
   owned add, owned sub, owned negate, pointer zero, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  typedef dictionary = AdditiveDict(bytes(size, align));

  () = () call copy_PassConv (nil, repr, ret @ dictionary.repr);
  ret @! dictionary.add = add;
  ret @! dictionary.subtract = sub;
  ret @! dictionary.negate = negate;
  () call (repr @! PassConv.copy) (zero, ret @ dictionary.zero);
};

function multiplicativeDict
  (unit _, pointer additive,
   owned mul, owned from_int, pointer one, pointer ret) -> () {
  repr = additive @ AdditiveDict(unit).repr;
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  copy = repr @! PassConv.copy;
  typedef dictionary = MultiplicativeDict(bytes(size, align));

  () = () call AdditiveDict_copy (size, align, copy,
                                  additive, ret @ dictionary.additive);
  ret @! dictionary.mul = mul;
  ret @! dictionary.fromInt = from_int;
  () call copy (one, ret @ dictionary.one);
};
