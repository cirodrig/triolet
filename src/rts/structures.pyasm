
module pyon.internal.structures;

#include "pyasm.h"
#include "memory_py.h"
#include "apply_py.h"
#include "structures.h"
#include "pyasm_records.h"

// Parameter-passing convention dictionary of ints
data pointer int_pass_conv = PassConv {
  sizeof int32,
  alignof int32,
  copy4F,
  dummy_finalizer
};

// Parameter-passing convention dictionary of floats
data pointer float_pass_conv = PassConv {
  sizeof float,
  alignof float,
  copy4F,
  dummy_finalizer
};

// Parameter-passing convention dictionary of itself
data pointer PassConv_pass_conv = PassConv {
  sizeof PassConv,
  alignof PassConv,
  copy_PassConv,
  dummy_finalizer
};

function copy_PassConv (unit _, pointer src, pointer dst) -> () {
  dst @! PassConv.size = src @! PassConv.size;
  dst @! PassConv.align = src @! PassConv.align;
  dst @! PassConv.copy = src @! PassConv.copy;
  dst @! PassConv.finalize = src @! PassConv.finalize;
  ();
};

function complex_pass_conv (unit _, pointer repr, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  typedef cpx = complex(bytes(size, align));

  ret @! PassConv.size = sizeof cpx;
  ret @! PassConv.align = alignof cpx;
  ret @! PassConv.copy =
      owned call copy_complex (size, align, repr @! PassConv.copy);
  ret @! PassConv.finalize =
      owned call finalize_complex (size, align, repr @! PassConv.finalize);
  ();
};

function copy_complex
  (word size, word align, owned copy_member, pointer src, pointer dst) -> () {
  typedef cpx = complex(bytes(size, align));
  () = () call copy_member (src @ cpx.real, dst @ cpx.real);
  () = () call copy_member (src @ cpx.imag, dst @ cpx.imag);
  ();
};

function finalize_complex
  (word size, word align, owned finalize_member, pointer self) -> () {
  // Not implemented
  ();
};

function AdditiveDict_pass_conv (unit _, pointer repr, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  copy = repr @! PassConv.copy;
  typedef dictionary = AdditiveDict(bytes(size, align));

  ret @! PassConv.size = sizeof dictionary;
  ret @! PassConv.align = alignof dictionary;
  ret @! PassConv.copy = owned call AdditiveDict_copy (size, align, copy);
  ret @! PassConv.finalize = dummy_finalizer;
  ();
};

function AdditiveDict_copy
  (word size, word align, owned copy_zero, pointer src, pointer dst) -> () {
  typedef dictionary = AdditiveDict(bytes(size, align));

  () = () call copy_PassConv(nil, src @ dictionary.repr, dst @ dictionary.repr);
  dst @! dictionary.add = src @! dictionary.add;
  dst @! dictionary.subtract = src @! dictionary.subtract;
  dst @! dictionary.negate = src @! dictionary.negate;
  () call (copy_zero) (src @ dictionary.zero, dst @ dictionary.zero);  
};

function MultiplicativeDict_pass_conv
  (unit _, pointer additive_dict, pointer ret) -> () {
  repr = additive_dict @ AdditiveDict(unit).repr;
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  copy = repr @! PassConv.copy;
  typedef dictionary = MultiplicativeDict(bytes(size, align));

  ret @! PassConv.size = sizeof dictionary;
  ret @! PassConv.align = alignof dictionary;
  ret @! PassConv.copy = owned call MultiplicativeDict_copy (size, align, copy);
  ret @! PassConv.finalize = dummy_finalizer;
  ();
};

function MultiplicativeDict_copy
  (word size, word align, owned copy_one, pointer src, pointer dst) -> () {
  typedef dictionary = MultiplicativeDict(bytes(size, align));

  () = () call AdditiveDict_copy(size, align, copy_one,
                                 src @ dictionary.additive,
                                 dst @ dictionary.additive);
  dst @! dictionary.mul = src @! dictionary.mul;
  dst @! dictionary.fromInt = src @! dictionary.fromInt;
  () call (copy_one) (src @ dictionary.one, dst @ dictionary.one);
};

// Construct an Additive dictionary
function additiveDict
  (unit _, pointer repr,
   owned add, owned sub, owned negate, pointer zero, pointer ret) -> () {
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  typedef dictionary = AdditiveDict(bytes(size, align));

  () = () call copy_PassConv (nil, repr, ret @ dictionary.repr);
  ret @! dictionary.add = add;
  ret @! dictionary.subtract = sub;
  ret @! dictionary.negate = negate;
  () call (repr @! PassConv.copy) (zero, ret @ dictionary.zero);
};

function multiplicativeDict
  (unit _, pointer additive,
   owned mul, owned from_int, pointer one, pointer ret) -> () {
  repr = additive @ AdditiveDict(unit).repr;
  size = repr @! PassConv.size;
  align = repr @! PassConv.align;
  copy = repr @! PassConv.copy;
  typedef dictionary = MultiplicativeDict(bytes(size, align));

  () = () call AdditiveDict_copy (size, align, copy,
                                  additive, ret @ dictionary.additive);
  ret @! dictionary.mul = mul;
  ret @! dictionary.fromInt = from_int;
  () call copy (one, ret @ dictionary.one);
};

function additiveDict_complex
  (unit type, pointer member_additive, pointer ret) -> ()
{
  member_size = member_additive @! AdditiveDict(unit).repr.size;
  member_align = member_additive @! AdditiveDict(unit).repr.align;
  typedef member = bytes(member_size, member_align);
  typedef member_dict = AdditiveDict(member);

  member_copy = member_additive @! member_dict.repr.copy;
  typedef cpx = complex(member);
  typedef dictionary = AdditiveDict(cpx);

  () = () call complex_pass_conv
    (type, member_additive @ member_dict.repr, ret @ dictionary.repr);

  ret @! dictionary.add =
    owned call complex_add (member_size, member_align,
                            member_additive @! member_dict.add);
  ret @! dictionary.subtract =
    owned call complex_sub (member_size, member_align,
                            member_additive @! member_dict.subtract);
  ret @! dictionary.negate =
    owned call complex_negate (member_size, member_align,
                               member_additive @! member_dict.negate);
  () = () call member_copy (ret @ dictionary.zero.real,
                            member_additive @ member_dict.zero);
  () = () call member_copy (ret @ dictionary.zero.imag,
                            member_additive @ member_dict.zero);
  ();
};

function complex_add(word size, word align, owned member_add,
                     pointer x, pointer y, pointer ret) -> () {
  typedef cpx = complex(bytes(size, align));
  () = () call member_add (x @ cpx.real, y @ cpx.real, ret @ cpx.real);
  () call member_add (x @ cpx.imag, y @ cpx.imag, ret @ cpx.imag);
};

function complex_sub(word size, word align, owned member_sub,
                     pointer x, pointer y, pointer ret) -> () {
  typedef cpx = complex(bytes(size, align));
  () = () call member_sub (x @ cpx.real, y @ cpx.real, ret @ cpx.real);
  () call member_sub (x @ cpx.imag, y @ cpx.imag, ret @ cpx.imag);
};

function complex_negate(word size, word align, owned member_negate,
                        pointer x, pointer ret) -> () {
  typedef cpx = complex(bytes(size, align));
  () = () call member_negate (x @ cpx.real, ret @ cpx.real);
  () call member_negate (x @ cpx.imag, ret @ cpx.imag);
};