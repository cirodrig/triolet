
module core.internal.inplace;

#include "rts.h"
#include "memory_py.h"
#include "apply_py.h"
#include "debug.h"
#include "inplace.h"
#include "prim.h"
#include "structures.h"

import procedure exit (int) -> ();

#include "new_pyasm_records.h"

// Allocate a list's contents array
procedure inline allocate_list_contents (owned rep, int nelems) -> owned {
  SA {elem_size, elem_align} = rep @! Repr_mem.sizealign;
  typedef elem_type = bytes(value elem_size, value elem_align);
  typedef array_type = array(value nelems, elem_type);

  pointer primcall triolet_alloc (sizeof Boxed(array_type)) as owned;
};

// Increase the size of a list's contents array.
// Returns the new pointer and new list size.
//
// The old list contents are
// copied to the new list; the new contents are uninitialized.
procedure list_grow (owned rep, owned old_contents, int old_size) -> (int, owned) {
  SA {elem_size, elem_align} = rep @! Repr_mem.sizealign;
  typedef elem_type = bytes(value elem_size, value elem_align);

  typedef old_array_type = array(value old_size, elem_type);
  new_size = old_size * int 2;
  typedef new_array_type = array(value new_size, elem_type);

  new_contents = owned primcall allocate_list_contents(rep, new_size);

  // Copy old contents to new list
  _ = pointer primcall memcpy (new_contents @ Boxed(new_array_type).member,
                               old_contents @ Boxed(old_array_type).member,
                               sizeof old_array_type);

  // Free old contents
  () = () primcall triolet_dealloc(old_contents);

  (new_size, new_contents);
};

// Build a list by appending values, starting from an empty list.
//
// List building passes a state variable along as it proceeds.
// The initializer is a function that takes an append function and an
// initial state, and returns the final state.  The append function updates
// the state.
function inline append_build_list (owned rep, owned f, pointer ret) -> unit
{
  SA {elem_size, elem_align} = rep @! Repr_mem.sizealign;
  typedef elem_type = bytes(value elem_size, value elem_align);

  letrec {
    // The append function takes an initializer and a state, and calls the
    // initializer to write a single value into the list
    function append (owned initializer, ListBuilder state) -> ListBuilder
    {
      ListBuilder {nelems, used, contents} = state;

      // Increase list capacity if necessary
      (new_nelems, new_contents) = if (nelems == used) {
        (int, owned) primcall list_grow (rep, contents, nelems);
      } else {
        (nelems, contents);
      };

      // Write to the new member
      typedef array_type = Boxed(array(value new_nelems, elem_type));
      _ = unit call initializer (new_contents @ array_type.member[used]);

      // Return new state
      ListBuilder {new_nelems, used + int 1, new_contents};
    }
  };

  // Initialize list with 4 elements
  initial_contents = owned primcall allocate_list_contents (rep, int 4);
  initial_list = ListBuilder {int 4, int 0, initial_contents};

  // Call the list-building function with the initializer
  final_list = ListBuilder call f (append, initial_list);

  // Write the return value
  ListBuilder {_, final_size, final_contents} = final_list;
  ret @! List.nelems = FinIndInt {final_size};
  ret @! List.contents = final_contents;
  nil;
};

#if 0
function repr_append_list (owned rep) -> owned
{
  alist_rep = pointer primcall triolet_alloc (sizeof Repr);
  alist_rep @! Repr.sizealign = SA {sizeof AppendList, alignof AppendList};
  alist_rep @! Repr.copy = copy_append_list;
  alist_rep @! Repr.convert_to_boxed =
    owned call make_Boxed (sizeof AppendList, alignof AppendList);
  alist_rep @! Repr.convert_to_bare =
    owned call from_Boxed (sizeof AppendList, alignof AppendList,
                           copy_append_list);
  alist_rep @! Repr.is_pointerless = false;
  alist_rep as owned;
};

function copy_append_list (pointer src, pointer dst) -> unit {
  dst @! AppendList.nelems = src @! AppendList.nelems;
  dst @! AppendList.used = src @! AppendList.used;
  dst @! AppendList.contents = src @! AppendList.contents;
  nil;
};
#endif

function inline intSumScatter_make_init (unit dummy) -> int
{
  int 0;
};

function inline countingScatter_make_init (unit dummy) -> int
{
  int 0;
};

function inline intUpdateInPlace_initializer (owned f, pointer ret) -> unit
{
  !ret = int call f (nil);
  nil;
};

function inline intUpdateInPlace_updater (owned f, unit _, pointer ret) -> unit
{
  !ret = int call f (int load ret);
  nil;
};

function inline floatSumScatter_make_init (unit dummy) -> float
{
  float 0.0;
};

function inline floatUpdateInPlace_initializer (owned f, pointer ret) -> unit
{
  !ret = float call f (nil);
  nil;
};

function inline floatUpdateInPlace_updater (owned f, unit _, pointer ret) -> unit
{
  !ret = float call f (float load ret);
  nil;
};

function inline boolUpdateInPlace_initializer (owned f, pointer ret) -> unit
{
  !ret = bool call f (nil);
  nil;
};

function inline boolUpdateInPlace_updater (owned f, unit _, pointer ret) -> unit
{
  !ret = bool call f (bool load ret);
  nil;
};

function inline boxedScatter_updater (owned f, unit _, pointer ret) -> unit
{
  // Function 'f' has type (a -> a) for some boxed type 'a'
  old_val = U1Tuple(owned) load ret;
  new_val = owned call f(old_val);
  !ret = new_val;
  nil;
};

function inline appendScatter_initializer (SA sizealign, owned _, pointer ret) -> unit
{
  ret @! AppendList.nelems = FinIndInt {int 0};
  ret @! AppendList.used = int 0;
  ret @! AppendList.contents = null as owned;
  nil;
};

function inline appendScatter_update_real (SA elt_sizealign, owned writer, unit _, pointer alist) -> unit
{
  SA {elt_size, elt_align} = elt_sizealign;
  typedef elt = bytes(value elt_size, value elt_align);

  FinIndInt {n_elems} = alist @! AppendList.nelems;
  used = alist @! AppendList.used;
  old_contents = alist @! AppendList.contents;

  // Need to resize list?
  (new_contents, new_n_elems) = if (used == n_elems) {
    // Resize list
    typedef old_arr = array(value n_elems, elt);

    // Create a new array with 'ne' elements
    ne = n_elems + n_elems + int 2;
    typedef new_arr = array(value ne, elt);
    nc = pointer primcall triolet_alloc (sizeof Boxed(new_arr)) as owned;

    // If old array was not empty, copy old to new array
    () = if (n_elems != int 0) {
      () primcall memcpy (nc @ Boxed(new_arr).member,
                          old_contents @ Boxed(old_arr).member,
                          sizeof old_arr);
    }
    else { (); };

    // Update the list contents pointer
    alist @! AppendList.contents = nc;
    (nc, ne);
  }
  else {
    (old_contents, n_elems);
  };

  typedef new_arr = Boxed(array(value new_n_elems, elt));

  // Write to list
  _ = unit call writer (new_contents @ new_arr.member[used]);

  // Update the list object
  alist @! AppendList.nelems = FinIndInt {new_n_elems};
  alist @! AppendList.used = used + int 1;

  nil;
};

function inline compute_hash_table_size (FinIndInt keys_size) -> int
{
  FinIndInt {n} = keys_size;
  int primcall triolet_hash_size (n);
};

function inline build_hash_table
    (FinIndInt keys_size, FinIndInt hash_size,
     pointer keys, pointer hash) -> unit
{
  FinIndInt {hash_n} = hash_size;
  FinIndInt {keys_n} = keys_size;

  typedef hashtable = HashTable(value hash_n);

  () = () primcall triolet_hash_build(hash_n,
                                      hash @ hashtable.keys,
                                      hash @ hashtable.inds,
                                      keys_n, keys);
  nil;
};

function inline lookup_hash_table
    (FinIndInt hash_size, pointer keys_array, pointer inds_array,
     int key) -> int
{
  FinIndInt {n} = hash_size;
  int primcall triolet_hash_lookup (n, keys_array, inds_array, key);
};
