
module core.internal.prim;

#include "rts.h"
#include "memory_py.h"
#include "apply_py.h"
#include "prim.h"
#include "buffer.h"
#include "structures.h"
#include "debug.h"

import procedure exit (int) -> ();

#include "new_pyasm_records.h"

// Combine two stores.  This does nothing, since stores
// are just unit values.
function inline seqStore (unit _, unit _) -> unit {
  nil;
};

function inline read_int (pointer p, unit _) -> U2Tuple (int, unit) {
  U2Tuple (int, unit) {int load p, nil};
};

function inline write_int (int n, pointer p, unit _) -> unit {
  !p = n;
  nil;
};

function inline read_int64 (pointer p, unit _) -> U2Tuple (int64, unit) {
  U2Tuple (int64, unit) {int64 load p, nil};
};

function inline write_int64 (int64 n, pointer p, unit _) -> unit {
  !p = n;
  nil;
};

function inline read_float (pointer p, unit _) -> U2Tuple (float, unit) {
  U2Tuple (float, unit) {float load p, nil};
};

function inline write_float (float n, pointer p, unit _) -> unit {
  !p = n;
  nil;
};

// Create an identity coercion
function inline makeIdCoercion (unit _) -> unit {
  nil;
};

function inline makeIdBareCoercion (unit _) -> unit {
  nil;
};

function inline preserve (owned x) -> owned {
  owned primcall triolet_preserve(x);
};

// Print an int.  Return another int.
function inline traceInt_int (int t, int n) -> int {
  () = () primcall triolet_db_int (t as int32);
  n;
};

// Print an int.  Return a boxed object.
function inline traceInt_box (int t, owned o) -> owned {
  () = () primcall triolet_db_int (t as int32);
  o;
};

procedure inline finite_IndInt (int n) -> IndInt {
  IndInt {FINITE, IndIntData {FinIndInt {n}}};
};

procedure inline from_finite_IndInt (IndInt ii) -> int {
  IndInt {tag, IndIntData {FinIndInt {n}}} = ii;
  if (tag == FINITE) { n; } else { () = () primcall exit (int -1); int 0; };
};

// Allocate some memory.  Use the flag to determine what kind of allocation.
procedure inline allocate (bool is_pointerless, uint size) -> pointer {
  if (is_pointerless) {
    pointer primcall triolet_alloc_nopointers (size);
  } else {
    pointer primcall triolet_alloc (size);
  };
};

#if 0
function inline convertToBoxed (owned repr, owned writer) -> owned {
  data owned ret; // Temporary storage for written value

  is_ref = repr @! Repr_mem.is_ref.tag;
  if (is_ref == NOT_A_REFERENCE) {
    
  }
  else {
    _ = unit call writer (ret);    // Write value to stack
    owned load ret;
  };
};

function inline convertToBare (owned repr, owned src, pointer dst) -> unit {
  unit call (repr @! Repr.convert_to_bare) (src, dst);
};

// Since a partially applied instance of this function may be used to
// initialize a Repr object, we pass the fields of the Repr instead of passing
// the Repr.
function inline make_Boxed (uint size, uint align, owned writer) -> owned {
  typedef elt_type = bytes(value size, value align);
  typedef boxed_type = Boxed(elt_type);

  p = pointer primcall triolet_alloc (sizeof boxed_type);

  // TODO: initialize object Header
  // () = () primcall triolet_db_pointer (writer as pointer);
  _ = unit call writer (p @ boxed_type.member);
  p as owned;
};

// Since a partially applied instance of this function may be used to
// initialize a Repr object, we pass the fields of the Repr instead of passing
// the Repr.
function inline from_Boxed (uint size, uint align, owned copy, owned boxed, pointer dst) -> unit {
  typedef elt_type = bytes(value size, value align);
  typedef boxed_type = Boxed(elt_type);

  unit call (copy) (boxed @ boxed_type.member, dst);
};

function inline make_Boxed_0 (owned writer) -> owned {
  p = pointer primcall triolet_alloc (sizeof Boxed(unit));

  // FIXME: initialize object header
  _ = unit call writer (p @ Boxed(unit).member);
  p as owned;
};

function inline make_Boxed_1 (owned writer) -> owned {
  p = pointer primcall triolet_alloc (sizeof Boxed(bytes(value uint 1, value uint 1)));

  // FIXME: initialize object header
  _ = unit call writer (p @ Boxed(unit).member);
  p as owned;
};

function inline make_Boxed_4 (owned writer) -> owned {
  p = pointer primcall triolet_alloc (sizeof Boxed(bytes(value uint 4, value uint 4)));

  // FIXME: initialize object header
  _ = unit call writer (p @ Boxed(unit).member);
  p as owned;
};

function inline from_Boxed_0 (owned src, pointer dst) -> unit {
  nil; // Do nothing
};

function inline from_Boxed_1 (owned src, pointer dst) -> unit {
  !dst = src @! Boxed(uint8).member;
  nil;
};

function inline from_Boxed_4 (owned src, pointer dst) -> unit {
  !dst = src @! Boxed(uint32).member;
  nil;
};

function inline storeBox (owned arg, pointer dst) -> unit {
  !dst = arg;
  nil;
};

function inline loadBox (pointer src) -> owned {
  owned load src;
};
#endif

function inline ptrToBox (pointer ptr) -> owned {
  ptr as owned;
};

function inline boxToPtr (owned box) -> pointer {
  box as pointer;
};

function eq_int (int x, int y) -> uint {
  (x == y) as uint;
};

function ne_int (int x, int y) -> uint {
  (x != y) as uint;
};

function lt_int (int x, int y) -> uint {
  (x < y) as uint;
};

function le_int (int x, int y) -> uint {
  (x <= y) as uint;
};

function gt_int (int x, int y) -> uint {
  (x > y) as uint;
};

function ge_int (int x, int y) -> uint {
  (x >= y) as uint;
};

function eq_float (float x, float y) -> uint {
  (x == y) as uint;
};

function ne_float (float x, float y) -> uint {
  (x != y) as uint;
};

function lt_float (float x, float y) -> uint {
  (x < y) as uint;
};

function le_float (float x, float y) -> uint {
  (x <= y) as uint;
};

function gt_float (float x, float y) -> uint {
  (x > y) as uint;
};

function ge_float (float x, float y) -> uint {
  (x >= y) as uint;
};

function eq_int64 (int64 x, int64 y) -> uint {
  (x == y) as uint;
};

function ne_int64 (int64 x, int64 y) -> uint {
  (x != y) as uint;
};

function lt_int64 (int64 x, int64 y) -> uint {
  (x < y) as uint;
};

function le_int64 (int64 x, int64 y) -> uint {
  (x <= y) as uint;
};

function gt_int64 (int64 x, int64 y) -> uint {
  (x > y) as uint;
};

function ge_int64 (int64 x, int64 y) -> uint {
  (x >= y) as uint;
};

function negate_int (int x) -> int {
  int 0 - x;
};

function negate_int64 (int64 x) -> int64 {
  int64 0 - x;
};

function floordiv_int(int x, int y) -> int {
  x %/ y;
};

function mod_int(int x, int y) -> int {
  x % y;
};

function negate_float (float x) -> float {
  float 0.0 - x;
};

function fromint_float(int x) -> float {
  x as float;
};

function floordiv_float(float x, float y) -> int {
  x %/ y;
};

function mod_float(float x, float y) -> float {
  x % y;
};

function div_float(float x, float y) -> float {
  x / y;
};

// Interpret an int as a size index
function inline defineIntIndex (int n) -> SomeIndInt {
  SomeIndInt {FinIndInt {n}};
};

function inline fromCursor (cursor x) -> cursor { x; };

function inline toCursor (cursor x) -> cursor { x; };

// Get a pointer to an array element
function inline subscript
 (SA sizealign, cursor ar, int index) -> cursor {
   SA {repr_size, repr_align, repr_pointerless} = sizealign;
   typedef elt_type = bytes(value repr_size, value repr_align);
   ar @ const_array(value int 0, elt_type)[index];
};

// Get a pointer to an array element.  Exactly the same as 'subscript'
// except for a different pointer type.
function inline subscript_out
 (SA sizealign, pointer ar, int index) -> pointer {
   SA {repr_size, repr_align, repr_pointerless} = sizealign;
   typedef elt_type = bytes(value repr_size, value repr_align);
   ar @ const_array(value int 0, elt_type)[index];
};

// Get a pointer to an array element.  Exactly the same as 'subscript'.
function inline subarray
 (SA sizealign, cursor ar, int index) -> cursor {
   SA {repr_size, repr_align, repr_pointerless} = sizealign;
   typedef elt_type = bytes(value repr_size, value repr_align);
   ar @ const_array(value int 0, elt_type)[index];
};

// Get a pointer to an array element.  Exactly the same as 'subscript'.
function inline subarray_out
 (SA sizealign, pointer ar, int index) -> pointer {
   SA {repr_size, repr_align, repr_pointerless} = sizealign;
   typedef elt_type = bytes(value repr_size, value repr_align);
   ar @ const_array(value int 0, elt_type)[index];
};

function inline min_ii (IndInt x, IndInt y) -> IndInt {
  IndInt {x_fin, IndIntData {FinIndInt {x_data}}} = x;
  IndInt {y_fin, IndIntData {FinIndInt {y_data}}} = y;

  if      (x_fin == POSINFTY || y_fin == NEGINFTY) { y; }
  else if (x_fin == NEGINFTY || y_fin == POSINFTY) { x; }
  else if (x_data < y_data) { IndInt primcall finite_IndInt(x_data); }
  else { IndInt primcall finite_IndInt(y_data); };
};

function inline minus_ii (IndInt x, IndInt y) -> IndInt {
  IndInt {x_fin, IndIntData {FinIndInt {x_data}}} = x;
  IndInt {y_fin, IndIntData {FinIndInt {y_data}}} = y;

  if (x_fin == POSINFTY) {
    if (y_fin == POSINFTY) {
      () = () primcall exit (int -1);
      x;
    } else {
      x;
    };
  }
  else if (x_fin == NEGINFTY) {
    if (y_fin == NEGINFTY) {
      () = () primcall exit (int -1);
      x;
    } else {
      x;
    };
  }
  else {
    // Finite case
    IndInt primcall finite_IndInt(x_data - y_data);
  };
};

procedure inline min_fii (FinIndInt x, FinIndInt y) -> FinIndInt {
  FinIndInt {x_data} = x;
  FinIndInt {y_data} = y;
  if (x_data < y_data) { x; } else { y; };
};

procedure inline minus_fii (FinIndInt x, FinIndInt y) -> FinIndInt {
  FinIndInt {x_data} = x;
  FinIndInt {y_data} = y;
  FinIndInt {x_data - y_data};
};

function inline not (uint b) -> uint {
  (~(b as bool)) as uint;
};

// Compute the GCD of two positive or negative numbers
function gcd (int x, int y) -> int {
  // Get absolute value of arguments
  ax = if (x < int 0) { -x;} else { x; };
  ay = if (y < int 0) { -y;} else { y; };

  (x, _) = while (int x = ax, int y = ay) (y != int 0) {
    (y, x % y);
  };
  x;
};

// Compute a number 'a' such that a*x + b*y = gcd a b
function extgcd_x (int x, int y) -> int {
  // Get absolute value of arguments
  ax = if (x < int 0) { -x;} else { x; };
  ay = if (y < int 0) { -y;} else { y; };

  (_, lastx, _, _) =
    while (int x = int 0, int lastx = int 1, int a = ax, int b = ay)
          (b != int 0) {
    q = a %/ b;
    r = a % b;
    x2 = lastx - q * x;
    (x2, x, b, r);
  };
  lastx;
};

// Get the number of distributed-memory processing elements.
// Implemented in C code
function inline getNumDistributedPlaces (unit dummy) -> SomeIndInt {

#ifdef USE_MPI
  n = int32 primcall triolet_get_num_distributed_places ();
  SomeIndInt {FinIndInt {n as int} };
#else
  SomeIndInt {FinIndInt {int 1} }; // Only one distributed execution place
#endif // USE_MPI
};

function inline doall (FinIndInt ix, owned f) -> unit {
  FinIndInt {count} = ix;
  _ = while (int n = int 0) (n < count) {
    _ = unit call f (n);
    n + int 1;
  };
  nil;
};

function inline doall_mutable (FinIndInt ix, owned f, unit dummy) -> unit {
  FinIndInt {count} = ix;
  _ = while (int n = int 0) (n < count) {
    _ = unit call f (n, nil);
    n + int 1;
  };
  nil;
};

// Check whether executing in a distributed task
function inline inDistributedTask (unit dummy) -> uint32 {
  
#ifdef USE_MPI
  uint32 primcall triolet_in_distributed_task ();
#else
  false as uint32;
#endif // USE_MPI
};

#ifdef USE_MPI

function farm (FinIndInt ntasks, owned rep_output, uint32 is_parallel, owned tasks) -> owned {
  FinIndInt {n} = ntasks;

  if (is_parallel == uint32 0 ||
      uint32 primcall triolet_in_distributed_task () as bool) {
    // Not running in parallel, or already executing a farmed task;
    // run sequentially
    owned primcall farm_sequential (n, rep_output, tasks);
  }
  else {
    owned primcall farm_parallel (n, rep_output, tasks);
  };
};

procedure farm_parallel (int n, owned rep_output, owned tasks) -> owned {
  // Error if number of tasks is less than 1
  _ = if (n < int 1) {
    () = () primcall exit(int -1);
    int 0;
  } else { int 0; };

  typedef boxed_array = Boxed(array(value n, owned));

  // Create temporary array to hold running tasks and results
  typedef running_task_array = array(value n, pointer);

  // Launch all tasks but the last
  running_tasks = pointer primcall triolet_alloc (sizeof running_task_array);

#if 0
  // SEQUENTIAL launch
  _ = while (int i = int 0) (i < n - int 1) {
    (length, buf) =
      (uint, pointer) primcall serializeBoxedObject(tasks @! boxed_array.member[i]);

    running_tasks @! running_task_array[i] =
      pointer primcall triolet_MPITask_launch (length, buf);
    i + int 1;
  };
#else
  // PARALLEL launch
  () = () primcall triolet_launch_tasks(n - int 1,
                                        running_tasks as pointer,
                                        (tasks @ boxed_array.member) as pointer);
#endif

  // Run the last task on this processor
  () = () primcall triolet_begin_distributed_task ();
  local_result = owned call (tasks @! boxed_array.member[n - int 1]) (nil);
  () = () primcall triolet_end_distributed_task ();

  // Collect results
  results = pointer primcall triolet_alloc (sizeof boxed_array);
  results @! boxed_array.header = rep_output;

#if 0
  // SERIAL gather
  _ = while (int i = int 0) (i < n - int 1) {
    running_task = running_tasks @! running_task_array[i];
    results @! boxed_array.member[i] =
      owned primcall triolet_MPITask_wait (running_task);
    i + int 1;
  };
#else
  // PARALLEL gather
  () = () primcall triolet_join_tasks(n - int 1,
                                      running_tasks as pointer,
                                      (results @ boxed_array.member) as pointer);  
#endif
  results @! boxed_array.member[n - int 1] = local_result;

  results as owned;
};

#else // !USE_MPI

// Single-core sequential 'farm' for debugging

function farm (FinIndInt ntasks, owned type_obj, uint32 is_parallel, owned tasks) -> owned {
  FinIndInt {n} = ntasks;

  owned primcall farm_sequential (n, type_obj, tasks);
};

#endif // USE_MPI

procedure farm_sequential (int n, owned type_obj, owned tasks) -> owned {
  // Error if number of tasks is less than 1
  _ = if (n < int 1) {
    () = () primcall exit(int -1);
    int 0;
  } else { int 0; };

  typedef boxed_array = Boxed(array(value n, owned));

  // Collect results
  results = pointer primcall triolet_alloc (sizeof boxed_array);
  results @! boxed_array.header = type_obj;

  _ = while (int i = int 0) (i < n) {
    // To test whether buffering works correctly,
    // use the calls to 'testCopyViaBuffer'
    //f_copy = owned call testCopyViaBuffer (null as owned, tasks @! boxed_array.member[i]);
    f_copy = tasks @! boxed_array.member[i];
    x = owned call f_copy (nil);
    //x_copy = owned call testCopyViaBuffer (null as owned, x);
    x_copy = x;
    results @! boxed_array.member[i] = x_copy;
    i + int 1;
  };

  results as owned;
};

// Take a buffer that contains a single object (plus anything it references,
// transitively).  Deserialize the object.
//
// This simply exports 'deserializeBoxedObject' for use in C code.
procedure triolet_deserialize (uint32 length, pointer dat) -> owned {
  owned primcall deserializeBoxedObject(length, dat);
};

// This simply exports 'serializeBoxedObject' for use in C code.
procedure triolet_serialize (owned obj) -> (uint, pointer) {
  (uint, pointer) primcall serializeBoxedObject(obj);
};

// Given a serialized function of type @NoneType -> a@ for some boxed type a,
// call the function, serialize the result, and call use_result on the
// serialized result.
procedure triolet_run_task (int32 length, pointer dat, pointer use_result)
  -> int32 {

  // Extract a function from the buffer and call it
  f = owned primcall deserializeBoxedObject (length, dat);
  r = owned call f (nil);

  // Serialize the result
  (length, result_buffer) =
    (uint, pointer) primcall serializeBoxedObject(r);

  // Use the result
  () = () primcall use_result (length, result_buffer);

  int32 0;
};


function blocked_greduce (owned zero_offset,
                          owned split_fn,
                          owned combine_fn,
                          owned reduce_fn,
                          owned unit_value,
                          owned range) -> owned
{
  owned primcall triolet_C_greduce
    (zero_offset, split_fn, combine_fn, reduce_fn, unit_value, range);
};

procedure greduce_range (owned reduce_fn, owned combine_fn,
                         owned acc, owned off, owned range) -> owned
{
  x = owned call reduce_fn (off, range);

  // If an accumulator was given, combine with accumulator
  if (acc == null as owned) {
    x;
  }
  else {
    owned call combine_fn (acc, x);
  };
};


procedure greduce_split (owned split_fn, pointer out1, pointer off2,
                         pointer out2, owned off, owned range) -> int
{
  typedef result_type = Maybe(Tuple3(owned, owned, owned));

  Maybe(Tuple3(owned, owned, owned)) {is_just, just_value} =
    Maybe(Tuple3(owned, owned, owned)) call split_fn (off, range);

  if (is_just == MAYBE_JUST) {
    // Save the fields
    Tuple3(owned, owned, owned) {out1_value, off2_value, out2_value} = just_value;
    !out1 = out1_value;
    !off2 = off2_value;
    !out2 = out2_value;

    // Return 1
    int 1;
  }
  else {
    // No output; return 0
    int 0;
  };
};

procedure greduce_combine(owned combine_fn, owned x, owned y) -> owned
{
  owned call combine_fn(x, y);
};

procedure greduce_unit(owned unit_fn) -> owned
{
  owned call unit_fn(nil);
};


function static_greduce (int range,
                         owned combine_fn,
                         owned reduce_fn,
                         owned unit_value) -> owned
{
  owned primcall triolet_C_static_greduce
    (range as int32, combine_fn, reduce_fn, unit_value);
};

procedure greduce_static_range(owned reduce_fn, int32 index) -> owned
{
  owned call reduce_fn(index as int);
};


#if 0
// A parallel reduction.  The iteration space is partitioned at run time
// and 'generator' is called on a single member of the iteration space.
function blocked_1d_reduce
  (FinIndInt size, owned reducer, owned init, owned generator) -> owned
{
  data BlockedReduceData reduce_data;
  reduce_data @! BlockedReduceData.initial_value = init;
  reduce_data @! BlockedReduceData.generator = generator;
  reduce_data @! BlockedReduceData.reducer = reducer;
  FinIndInt {count} = size;

  // Main computation is written in C++
  owned primcall triolet_C_blocked_reduce(reduce_data, init, count);
};

procedure blocked_reduce_accumulate_range
  (pointer dat, owned acc, int start, int end) -> owned {

  // Given the current accumulator value and the range to process,
  // compute and accumulate the reduction value over this range.
  // The range is [start, end).
  lsize = FinIndInt {end - start};
  owned call (dat @! BlockedReduceData.generator) (start, lsize, acc);
};

procedure blocked_reduce_reduce
  (pointer dat, owned x, owned y) -> owned {
  owned call (dat @! BlockedReduceData.reducer) (x, y);
};

function blocked_2d_reduce
  (FinIndInt size_y, FinIndInt size_x, owned reducer, owned init, owned generator) -> owned
{
  data BlockedReduceData reduce_data;
  reduce_data @! BlockedReduceData.initial_value = init;
  reduce_data @! BlockedReduceData.generator = generator;
  reduce_data @! BlockedReduceData.reducer = reducer;
  FinIndInt {count_y} = size_y;
  FinIndInt {count_x} = size_x;

  owned primcall triolet_C_blocked_reduce2 (reduce_data, init, count_y, count_x);
};

// Functions called from the C side of the library
procedure blocked_reduce2_accumulate_range
  (pointer dat, owned acc, int start_y, int end_y, int start_x, int end_x) -> owned
{
  lsizey = FinIndInt {end_y - start_y};
  lsizex = FinIndInt {end_x - start_x};
  owned call (dat @! BlockedReduceData.generator) (start_y, lsizey, start_x, lsizex, acc);
};

procedure blocked_reduce2_reduce (pointer dat, owned x, owned y) -> owned {
  owned call (dat @! BlockedReduceData.reducer) (x, y);
};

// A parallel reduction.  The iteration space is partitioned at run time
// and 'generator' is called on a single member of the iteration space.
function blocked_1d_reduceip
  (FinIndInt size, owned reducer, owned generator) -> owned
{
  data BlockedReduceIPData reduce_data;
  reduce_data @! BlockedReduceIPData.generator = generator;
  reduce_data @! BlockedReduceIPData.reducer = reducer;
  FinIndInt {count} = size;

  // Main computation is written in C++
  owned primcall triolet_C_blocked_reduceip(reduce_data, count);
};

procedure blocked_reduceip_generate_range
  (pointer dat, int start, int end) -> owned {

  // Given the current accumulator value and the range to process,
  // compute and accumulate the reduction value over this range.
  // The range is [start, end).
  lsize = FinIndInt {end - start};
  owned call (dat @! BlockedReduceIPData.generator) (start, lsize);
};

procedure blocked_reduceip_reduce
  (pointer dat, owned x, owned y) -> owned {
  owned call (dat @! BlockedReduceIPData.reducer) (x, y);
};
#endif

function inline blocked_doall
  (FinIndInt size, owned worker) -> unit {
  FinIndInt {count} = size;

  () = () primcall triolet_C_blocked_doall (worker, count);
  nil;
};

procedure blocked_doall_worker (owned f, int start, int end) -> () {
  _ = unit call f (start, FinIndInt {end - start});
  ();
};

function blocked_doall2
  (FinIndInt size_y, FinIndInt size_x, owned worker) -> unit {

  FinIndInt {count_y} = size_y;
  FinIndInt {count_x} = size_x;

  () = () primcall triolet_C_blocked_doall2 (worker, count_y, count_x);
  nil;
};

procedure blocked_doall2_worker
  (owned f, int start_y, int end_y, int start_x, int end_x) -> () {
  _ = unit call f (start_y, FinIndInt {end_y - start_y},
                   start_x, FinIndInt {end_x - start_x});
  nil;
};

function blocked_PBTree_doall (owned range, owned worker) -> unit {
  () = () primcall triolet_C_blocked_PBTree_doall (range, worker);
  nil;
};

procedure blocked_doall_PBTree_worker (owned f, int i, owned t) -> () {
  _ = unit call f (i, t);
  ();
};

procedure PBTree_size (owned tree) -> int {
  t = tree @! PBTree.tag;
  
  if (t == PBTree_LEAF) {
    FinIndInt {n} = tree @! PBTreeLeaf.members.nelems;
    n;
  }
  else if (t == PBTree_BRANCH) {
    tree @! PBTreeBranch.other.size;
  }
  else {
    int 0;
  };
};

procedure PBTree_split (owned tree, pointer ret) -> bool {
  tag = tree @! PBTree.tag;
  (is_splittable, left, right) =
    if (tag == PBTree_BRANCH) {
      (true, tree @! PBTreeBranch.other.left, tree @! PBTreeBranch.other.right);
    }
    else {
      (false, null as owned, null as owned);
    };
  ret @! array(value int 2, owned)[int 0] = left;
  ret @! array(value int 2, owned)[int 1] = right;
  is_splittable;
};

procedure PBTree_splittable (owned tree) -> bool {
  tag = tree @! PBTree.tag;
  if (tag == PBTree_BRANCH) {
    true;
  }
  else {
    false;
  };
};

procedure PBTree_leaf (pointer list) -> owned {
  p = pointer primcall triolet_alloc (sizeof PBTreeLeaf);
  p @! PBTreeLeaf.tag = PBTree_LEAF;
  p @! PBTreeLeaf.members = List load list;
  p as owned;
};

procedure PBTree_branch (owned left, owned right) -> owned {
  // If either child is empty, return the other
  if (left @! PBTree.tag == PBTree_EMPTY) {
    right;
  }
  else if (right @! PBTree.tag == PBTree_EMPTY) {
    left;
  }
  else {
    s1 = int primcall PBTree_size (left);
    s2 = int primcall PBTree_size (right);
    p = pointer primcall triolet_alloc (sizeof PBTreeBranch);
    p @! PBTreeBranch.tag = PBTree_BRANCH;
    p @! PBTreeBranch.other.size = s1 + s2;
    p @! PBTreeBranch.other.left = left;
    p @! PBTreeBranch.other.right = right;
    p as owned;
  };
};
