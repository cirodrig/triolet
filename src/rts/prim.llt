
module core.internal.prim;

#include "rts.h"
#include "memory_py.h"
#include "apply_py.h"
#include "prim.h"
#include "debug.h"

import procedure exit (int) -> ();

#include "new_pyasm_records.h"

// Print an int.  Return another int.
function inline traceInt_int (int t, int n) -> int {
  () = () primcall triolet_db_int (t as int32);
  n;
};

// Print an int.  Return a boxed object.
function inline traceInt_box (int t, owned o) -> owned {
  () = () primcall triolet_db_int (t as int32);
  o;
};

procedure inline finite_IndInt (int n) -> IndInt {
  IndInt {FINITE, IndIntData {FinIndInt {n}}};
};

procedure inline from_finite_IndInt (IndInt ii) -> int {
  IndInt {tag, IndIntData {FinIndInt {n}}} = ii;
  if (tag == FINITE) { n; } else { () = () primcall exit (int -1); int 0; };
};

// Allocate some memory.  Use the flag to determine what kind of allocation.
procedure inline allocate (bool is_pointerless, uint size) -> pointer {
  if (is_pointerless) {
    pointer primcall triolet_alloc_nopointers (size);
  } else {
    pointer primcall triolet_alloc (size);
  };
};

#if 0
function inline convertToBoxed (owned repr, owned writer) -> owned {
  owned call (repr @! Repr.convert_to_boxed) (writer);
};

function inline convertToBare (owned repr, owned src, pointer dst) -> unit {
  unit call (repr @! Repr.convert_to_bare) (src, dst);
};

// Since a partially applied instance of this function may be used to
// initialize a Repr object, we pass the fields of the Repr instead of passing
// the Repr.
function inline make_Boxed (uint size, uint align, owned writer) -> owned {
  typedef elt_type = bytes(value size, value align);
  typedef boxed_type = Boxed(elt_type);

  p = pointer primcall triolet_alloc (sizeof boxed_type);

  // TODO: initialize object Header
  // () = () primcall triolet_db_pointer (writer as pointer);
  _ = unit call writer (p @ boxed_type.member);
  p as owned;
};

// Since a partially applied instance of this function may be used to
// initialize a Repr object, we pass the fields of the Repr instead of passing
// the Repr.
function inline from_Boxed (uint size, uint align, owned copy, owned boxed, pointer dst) -> unit {
  typedef elt_type = bytes(value size, value align);
  typedef boxed_type = Boxed(elt_type);

  unit call (copy) (boxed @ boxed_type.member, dst);
};

function inline make_Boxed_0 (owned writer) -> owned {
  p = pointer primcall triolet_alloc (sizeof Boxed(unit));

  // FIXME: initialize object header
  _ = unit call writer (p @ Boxed(unit).member);
  p as owned;
};

function inline make_Boxed_1 (owned writer) -> owned {
  p = pointer primcall triolet_alloc (sizeof Boxed(bytes(value uint 1, value uint 1)));

  // FIXME: initialize object header
  _ = unit call writer (p @ Boxed(unit).member);
  p as owned;
};

function inline make_Boxed_4 (owned writer) -> owned {
  p = pointer primcall triolet_alloc (sizeof Boxed(bytes(value uint 4, value uint 4)));

  // FIXME: initialize object header
  _ = unit call writer (p @ Boxed(unit).member);
  p as owned;
};

function inline from_Boxed_0 (owned src, pointer dst) -> unit {
  nil; // Do nothing
};

function inline from_Boxed_1 (owned src, pointer dst) -> unit {
  !dst = src @! Boxed(uint8).member;
  nil;
};

function inline from_Boxed_4 (owned src, pointer dst) -> unit {
  !dst = src @! Boxed(uint32).member;
  nil;
};

function inline storeBox (owned arg, pointer dst) -> unit {
  !dst = arg;
  nil;
};

function inline loadBox (pointer src) -> owned {
  owned load src;
};
#endif

function inline ptrToBox (pointer ptr) -> owned {
  ptr as owned;
};

function inline boxToPtr (owned box) -> pointer {
  box as pointer;
};

function eq_int (int x, int y) -> uint {
  (x == y) as uint;
};

function ne_int (int x, int y) -> uint {
  (x != y) as uint;
};

function lt_int (int x, int y) -> uint {
  (x < y) as uint;
};

function le_int (int x, int y) -> uint {
  (x <= y) as uint;
};

function gt_int (int x, int y) -> uint {
  (x > y) as uint;
};

function ge_int (int x, int y) -> uint {
  (x >= y) as uint;
};

function eq_float (float x, float y) -> uint {
  (x == y) as uint;
};

function ne_float (float x, float y) -> uint {
  (x != y) as uint;
};

function lt_float (float x, float y) -> uint {
  (x < y) as uint;
};

function le_float (float x, float y) -> uint {
  (x <= y) as uint;
};

function gt_float (float x, float y) -> uint {
  (x > y) as uint;
};

function ge_float (float x, float y) -> uint {
  (x >= y) as uint;
};

function negate_int (int x) -> int {
  int 0 - x;
};

function floordiv_int(int x, int y) -> int {
  x %/ y;
};

function mod_int(int x, int y) -> int {
  x % y;
};

function negate_float (float x) -> float {
  float 0.0 - x;
};

function fromint_float(int x) -> float {
  x as float;
};

function floordiv_float(float x, float y) -> int {
  x %/ y;
};

function mod_float(float x, float y) -> float {
  x % y;
};

function div_float(float x, float y) -> float {
  x / y;
};

// Interpret an int as a size index
function inline defineIntIndex (int n) -> SomeIndInt {
  SomeIndInt {FinIndInt {n}};
};

// Get a pointer to an array element
function inline subscript
 (SA sizealign, pointer base, int index) -> pointer {
   SA {repr_size, repr_align} = sizealign;
   typedef elt_type = bytes(value repr_size, value repr_align);
   base @ const_array(value int 0, elt_type)[index];
};

// Get a pointer to an array element.  Exactly the same as 'subscript'.
function inline subscript_out
 (SA sizealign, pointer base, int index) -> pointer {
   SA {repr_size, repr_align} = sizealign;
   typedef elt_type = bytes(value repr_size, value repr_align);
   base @ const_array(value int 0, elt_type)[index];
};

function inline min_ii (IndInt x, IndInt y) -> IndInt {
  IndInt {x_fin, IndIntData {FinIndInt {x_data}}} = x;
  IndInt {y_fin, IndIntData {FinIndInt {y_data}}} = y;

  if      (x_fin == POSINFTY || y_fin == NEGINFTY) { y; }
  else if (x_fin == NEGINFTY || y_fin == POSINFTY) { x; }
  else if (x_data < y_data) { IndInt primcall finite_IndInt(x_data); }
  else { IndInt primcall finite_IndInt(y_data); };
};

function inline minus_ii (IndInt x, IndInt y) -> IndInt {
  IndInt {x_fin, IndIntData {FinIndInt {x_data}}} = x;
  IndInt {y_fin, IndIntData {FinIndInt {y_data}}} = y;

  if (x_fin == POSINFTY) {
    if (y_fin == POSINFTY) {
      () = () primcall exit (int -1);
      x;
    } else {
      x;
    };
  }
  else if (x_fin == NEGINFTY) {
    if (y_fin == NEGINFTY) {
      () = () primcall exit (int -1);
      x;
    } else {
      x;
    };
  }
  else {
    // Finite case
    IndInt primcall finite_IndInt(x_data - y_data);
  };
};

procedure inline min_fii (FinIndInt x, FinIndInt y) -> FinIndInt {
  FinIndInt {x_data} = x;
  FinIndInt {y_data} = y;
  if (x_data < y_data) { x; } else { y; };
};

procedure inline minus_fii (FinIndInt x, FinIndInt y) -> FinIndInt {
  FinIndInt {x_data} = x;
  FinIndInt {y_data} = y;
  FinIndInt {x_data - y_data};
};

function inline not (uint b) -> uint {
  (~(b as bool)) as uint;
};

// Compute the GCD of two positive or negative numbers
function gcd (int x, int y) -> int {
  // Get absolute value of arguments
  ax = if (x < int 0) { -x;} else { x; };
  ay = if (y < int 0) { -y;} else { y; };

  (x, _) = while (int x = ax, int y = ay) (y != int 0) {
    (y, x % y);
  };
  x;
};

// Compute a number 'a' such that a*x + b*y = gcd a b
function extgcd_x (int x, int y) -> int {
  // Get absolute value of arguments
  ax = if (x < int 0) { -x;} else { x; };
  ay = if (y < int 0) { -y;} else { y; };

  (_, lastx, _, _) =
    while (int x = int 0, int lastx = int 1, int a = ax, int b = ay)
          (b != int 0) {
    q = a %/ b;
    r = a % b;
    x2 = lastx - q * x;
    (x2, x, b, r);
  };
  lastx;
};

function inline doall (FinIndInt ix, owned f) -> unit {
  FinIndInt {count} = ix;
  _ = while (int n = int 0) (n < count) {
    _ = unit call f (n);
    n + int 1;
  };
  nil;
};

// A parallel reduction.  The iteration space is partitioned at run time
// and 'generator' is called on a single member of the iteration space.
function blocked_1d_reduce
  (FinIndInt size, owned reducer, owned init, owned generator) -> owned
{
  data BlockedReduceData reduce_data;
  reduce_data @! BlockedReduceData.initial_value = init;
  reduce_data @! BlockedReduceData.generator = generator;
  reduce_data @! BlockedReduceData.reducer = reducer;
  FinIndInt {count} = size;

  // Main computation is written in C++
  owned primcall triolet_C_blocked_reduce(reduce_data, init, count);
};

procedure blocked_reduce_accumulate_range
  (pointer dat, owned acc, int start, int end) -> owned {

  // Given the current accumulator value and the range to process,
  // compute and accumulate the reduction value over this range.
  // The range is [start, end).
  lsize = FinIndInt {end - start};
  owned call (dat @! BlockedReduceData.generator) (start, lsize, acc);
};

procedure blocked_reduce_reduce
  (pointer dat, owned x, owned y) -> owned {
  owned call (dat @! BlockedReduceData.reducer) (x, y);
};

function blocked_2d_reduce
  (FinIndInt size_y, FinIndInt size_x, owned reducer, owned init, owned generator) -> owned
{
  data BlockedReduceData reduce_data;
  reduce_data @! BlockedReduceData.initial_value = init;
  reduce_data @! BlockedReduceData.generator = generator;
  reduce_data @! BlockedReduceData.reducer = reducer;
  FinIndInt {count_y} = size_y;
  FinIndInt {count_x} = size_x;

  owned primcall triolet_C_blocked_reduce2 (reduce_data, init, count_y, count_x);
};

// Functions called from the C side of the library
procedure blocked_reduce2_accumulate_range
  (pointer dat, owned acc, int start_y, int end_y, int start_x, int end_x) -> owned
{
  lsizey = FinIndInt {end_y - start_y};
  lsizex = FinIndInt {end_x - start_x};
  owned call (dat @! BlockedReduceData.generator) (start_y, lsizey, start_x, lsizex, acc);
};

procedure blocked_reduce2_reduce (pointer dat, owned x, owned y) -> owned {
  owned call (dat @! BlockedReduceData.reducer) (x, y);
};

// A parallel reduction.  The iteration space is partitioned at run time
// and 'generator' is called on a single member of the iteration space.
function blocked_1d_reduceip
  (FinIndInt size, owned reducer, owned generator) -> owned
{
  data BlockedReduceIPData reduce_data;
  reduce_data @! BlockedReduceIPData.generator = generator;
  reduce_data @! BlockedReduceIPData.reducer = reducer;
  FinIndInt {count} = size;

  // Main computation is written in C++
  owned primcall triolet_C_blocked_reduceip(reduce_data, count);
};

procedure blocked_reduceip_generate_range
  (pointer dat, int start, int end) -> owned {

  // Given the current accumulator value and the range to process,
  // compute and accumulate the reduction value over this range.
  // The range is [start, end).
  lsize = FinIndInt {end - start};
  owned call (dat @! BlockedReduceIPData.generator) (start, lsize);
};

procedure blocked_reduceip_reduce
  (pointer dat, owned x, owned y) -> owned {
  owned call (dat @! BlockedReduceIPData.reducer) (x, y);
};

function inline blocked_doall
  (FinIndInt size, owned worker) -> unit {
  FinIndInt {count} = size;

  () = () primcall triolet_C_blocked_doall (worker, count);
  nil;
};

procedure blocked_doall_worker (owned f, int start, int end) -> () {
  _ = unit call f (start, FinIndInt {end - start});
  ();
};

function blocked_doall2
  (FinIndInt size_y, FinIndInt size_x, owned worker) -> unit {

  FinIndInt {count_y} = size_y;
  FinIndInt {count_x} = size_x;

  () = () primcall triolet_C_blocked_doall2 (worker, count_y, count_x);
  nil;
};

procedure blocked_doall2_worker
  (owned f, int start_y, int end_y, int start_x, int end_x) -> () {
  _ = unit call f (start_y, FinIndInt {end_y - start_y},
                   start_x, FinIndInt {end_x - start_x});
  nil;
};

function blocked_PBTree_doall (owned range, owned worker) -> unit {
  () = () primcall triolet_C_blocked_PBTree_doall (range, worker);
  nil;
};

procedure blocked_doall_PBTree_worker (owned f, int i, owned t) -> () {
  _ = unit call f (i, t);
  ();
};

procedure PBTree_size (owned tree) -> int {
  t = tree @! PBTree.tag;
  
  if (t == PBTree_LEAF) {
    FinIndInt {n} = tree @! PBTreeLeaf.members.nelems;
    n;
  }
  else if (t == PBTree_BRANCH) {
    tree @! PBTreeBranch.other.size;
  }
  else {
    int 0;
  };
};

procedure PBTree_split (owned tree, pointer ret) -> bool {
  tag = tree @! PBTree.tag;
  (is_splittable, left, right) =
    if (tag == PBTree_BRANCH) {
      (true, tree @! PBTreeBranch.other.left, tree @! PBTreeBranch.other.right);
    }
    else {
      (false, null as owned, null as owned);
    };
  ret @! array(value int 2, owned)[int 0] = left;
  ret @! array(value int 2, owned)[int 1] = right;
  is_splittable;
};

procedure PBTree_splittable (owned tree) -> bool {
  tag = tree @! PBTree.tag;
  if (tag == PBTree_BRANCH) {
    true;
  }
  else {
    false;
  };
};

procedure PBTree_leaf (pointer list) -> owned {
  p = pointer primcall triolet_alloc (sizeof PBTreeLeaf);
  p @! PBTreeLeaf.tag = PBTree_LEAF;
  p @! PBTreeLeaf.members = List load list;
  p as owned;
};

procedure PBTree_branch (owned left, owned right) -> owned {
  // If either child is empty, return the other
  if (left @! PBTree.tag == PBTree_EMPTY) {
    right;
  }
  else if (right @! PBTree.tag == PBTree_EMPTY) {
    left;
  }
  else {
    s1 = int primcall PBTree_size (left);
    s2 = int primcall PBTree_size (right);
    p = pointer primcall triolet_alloc (sizeof PBTreeBranch);
    p @! PBTreeBranch.tag = PBTree_BRANCH;
    p @! PBTreeBranch.other.size = s1 + s2;
    p @! PBTreeBranch.other.left = left;
    p @! PBTreeBranch.other.right = right;
    p as owned;
  };
};
