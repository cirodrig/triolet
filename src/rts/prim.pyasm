
module pyon.internal.prim;

#include "rts.h"
#include "memory_py.h"
#include "apply_py.h"
#include "prim.h"
#include "new_pyasm_records.h"

function inline storeBox (unit _, owned arg, pointer dst) -> () {
  !dst = arg;
  ();
};

function inline loadBox (unit _, pointer src) -> owned {
  owned load src;
};

function add_int (int x, int y) -> int {
  x + y;
};

function sub_int (int x, int y) -> int {
  x - y;
};

function negate_int (int x) -> int {
  int 0 - x;
};

function mul_int(int x, int y) -> int {
  x * y;
};

function fromint_int(int x) -> int {
  x;
};

function add_float (float x, float y) -> float {
  x + y;
};

function sub_float (float x, float y) -> float {
  x - y;
};

function negate_float (float x) -> float {
  float 0.0 - x;
};

function mul_float(float x, float y) -> float {
  x * y;
};

function fromint_float(int x) -> float {
  x as float;
};

function load_complexFloat (pointer x) -> (complex(float)) {
  typedef cpxfloat = complex(float);
  complex(float) {x @! cpxfloat.real, x @! cpxfloat.imag};
};

function store_complexFloat (complex(float) x, pointer dst) -> () {
  complex(float) {re, im} = x;
  dst @! complex(float).real = re;
  dst @! complex(float).imag = im;
  ();
};
