
module pyon.internal.prim;

#include "rts.h"
#include "memory_py.h"
#include "apply_py.h"
#include "prim.h"
#include "new_pyasm_records.h"

function inline storeBox (unit _, owned arg, pointer dst) -> () {
  !dst = arg;
  ();
};

function inline loadBox (unit _, pointer src) -> owned {
  owned load src;
};

function inline ptrToBox (unit _, pointer ptr) -> owned {
  ptr as owned;
};

function inline boxToPtr (unit _, owned box) -> pointer {
  box as pointer;
};

function eq_int (int x, int y) -> bool {
  x == y;
};

function ne_int (int x, int y) -> bool {
  x != y;
};

function lt_int (int x, int y) -> bool {
  x < y;
};

function le_int (int x, int y) -> bool {
  x <= y;
};

function gt_int (int x, int y) -> bool {
  x > y;
};

function ge_int (int x, int y) -> bool {
  x >= y;
};

function eq_float (float x, float y) -> bool {
  x == y;
};

function ne_float (float x, float y) -> bool {
  x != y;
};

function lt_float (float x, float y) -> bool {
  x < y;
};

function le_float (float x, float y) -> bool {
  x <= y;
};

function gt_float (float x, float y) -> bool {
  x > y;
};

function ge_float (float x, float y) -> bool {
  x >= y;
};

function negate_int (int x) -> int {
  int 0 - x;
};

function floordiv_int(int x, int y) -> int {
  x %/ y;
};

function mod_int(int x, int y) -> int {
  x % y;
};

function negate_float (float x) -> float {
  float 0.0 - x;
};

function fromint_float(int x) -> float {
  x as float;
};

function floordiv_float(float x, float y) -> int {
  x %/ y;
};

function mod_float(float x, float y) -> float {
  x % y;
};

function div_float(float x, float y) -> float {
  x / y;
};

// Get a pointer to an array element
function inline subscript
 (unit _, unit _, owned repr, pointer base, int index) -> pointer {
   typedef elt_type = bytes(value repr @! PassConv.size,
                            value repr @! PassConv.align);
   base @ const_array(value int 0, elt_type)[index];
};