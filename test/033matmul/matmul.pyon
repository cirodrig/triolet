
def sum(xs):
  return reduce(lambda x, y: x + y, 0, xs)

def mm(M, N):
  def dotprod(r, c): return sum(x * y for (x, y) in zip(__iter__(r), __iter__(c)))

  return __build__(outerproduct(dotprod, listiter(__iter__(rows(M))), listiter(__iter__(cols(N)))))

# def mm(M, N):
#   def dotprod(r, c): return sum(x * y for (x, y) in zip(r, c))
#
#   return matrix(outerproduct(dotprod, rows(M)), cols(N))


export ccall mm : array2(float) * array2(float) -> array2(float)
